/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/admin/v1/posts": {
    /** Paginate posts */
    get: {
      parameters?: {
        query?: {
          /** @description Post number */
          post_num?: number;
          /** @description Post status */
          status?: "open" | "closed" | "completed" | "canceled";
          /** @description Text */
          text?: string;
          /** @description Deadline */
          deadline?: string;
          /** @description Delivery date */
          delivery_date?: string;
          /** @description Seller ID */
          seller_id?: string;
          /** @description Page (0-based) */
          page?: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["admin.getPostsResult"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["utils.HTTPError"];
          };
        };
      };
    };
    /** Create post */
    post: {
      /** @description Post body */
      requestBody: {
        content: {
          "application/json": components["schemas"]["admin.createPostForm"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              data?: {
                count?: number;
                has_next_page?: boolean;
              };
              success?: boolean;
            } & components["schemas"]["data"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["utils.HTTPError"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    "admin.Object": components["schemas"]["posts"];
    "admin.PaginationResult": {
      data?: {
        count?: number;
        has_next_page?: boolean;
      };
      success?: boolean;
    } & components["schemas"]["data"];
    "admin.createPostForm": {
      body?: string;
      deadline?: string;
      delivery_date?: string;
      images?: components["schemas"]["schema.Image"][];
      is_in_stock?: boolean;
      items?: {
          name?: string;
          price?: number;
          stock?: number;
        }[];
      post_num?: number;
      seller_id?: string;
      /** @description StorageType holds the value of the "storage_type" field. */
      storage_type?: string;
      title?: string;
    };
    "admin.getPostsData": {
      count?: number;
      has_next_page?: boolean;
      posts?: components["schemas"]["ent.Post"][];
    };
    "admin.getPostsResult": {
      data?: components["schemas"]["admin.getPostsData"];
      success?: boolean;
    };
    data: {
      data?: components["schemas"]["posts"];
    };
    "ent.Post": {
      /** @description Body holds the value of the "body" field. */
      body?: string;
      /** @description Comment holds the value of the "comment" field. */
      comment?: string;
      /** @description CommentCount holds the value of the "comment_count" field. */
      comment_count?: number;
      /** @description CreatedAt holds the value of the "created_at" field. */
      created_at?: string;
      /** @description Deadline holds the value of the "deadline" field. */
      deadline?: string;
      /** @description Delivered holds the value of the "delivered" field. */
      delivered?: boolean;
      /** @description DeliveryDate holds the value of the "delivery_date" field. */
      delivery_date?: string;
      /** @description ExtraFee holds the value of the "extra_fee" field. */
      extra_fee?: number;
      /** @description ExtraTotal holds the value of the "extra_total" field. */
      extra_total?: number;
      /** @description ID of the ent. */
      id?: string;
      /** @description Images holds the value of the "images" field. */
      images?: components["schemas"]["schema.Image"][];
      /** @description IsInStock holds the value of the "is_in_stock" field. */
      is_in_stock?: boolean;
      /** @description LikeCount holds the value of the "like_count" field. */
      like_count?: number;
      /** @description NormalFee holds the value of the "normal_fee" field. */
      normal_fee?: number;
      /** @description NormalTotal holds the value of the "normal_total" field. */
      normal_total?: number;
      /** @description OrderCount holds the value of the "order_count" field. */
      order_count?: number;
      /** @description PostNum holds the value of the "post_num" field. */
      post_num?: number;
      /** @description SellerID holds the value of the "seller_id" field. */
      seller_id?: string;
      status?: components["schemas"]["post.Status"];
      storage_type?: components["schemas"]["post.StorageType"];
      /** @description Title holds the value of the "title" field. */
      title?: string;
      /** @description UpdatedAt holds the value of the "updated_at" field. */
      updated_at?: string;
    };
    /** @description Status holds the value of the "status" field. */
    "post.Status": string;
    /** @description StorageType holds the value of the "storage_type" field. */
    "post.StorageType": string;
    posts: {
      posts?: components["schemas"]["ent.Post"][];
    };
    "schema.Image": {
      lg?: string;
      md?: string;
      sm?: string;
    };
    "utils.HTTPError": {
      /** @example 400 */
      code?: number;
      /** @example status bad request */
      message?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
