// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/billc-dev/tuango-go/ent/predicate"
	"github.com/billc-dev/tuango-go/ent/room"
	"github.com/billc-dev/tuango-go/ent/roomuser"
	"github.com/billc-dev/tuango-go/ent/user"
)

// RoomUserUpdate is the builder for updating RoomUser entities.
type RoomUserUpdate struct {
	config
	hooks     []Hook
	mutation  *RoomUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RoomUserUpdate builder.
func (ruu *RoomUserUpdate) Where(ps ...predicate.RoomUser) *RoomUserUpdate {
	ruu.mutation.Where(ps...)
	return ruu
}

// SetRoomID sets the "room_id" field.
func (ruu *RoomUserUpdate) SetRoomID(s string) *RoomUserUpdate {
	ruu.mutation.SetRoomID(s)
	return ruu
}

// SetUserID sets the "user_id" field.
func (ruu *RoomUserUpdate) SetUserID(s string) *RoomUserUpdate {
	ruu.mutation.SetUserID(s)
	return ruu
}

// SetLastReadMessageID sets the "last_read_message_id" field.
func (ruu *RoomUserUpdate) SetLastReadMessageID(s string) *RoomUserUpdate {
	ruu.mutation.SetLastReadMessageID(s)
	return ruu
}

// SetRoom sets the "room" edge to the Room entity.
func (ruu *RoomUserUpdate) SetRoom(r *Room) *RoomUserUpdate {
	return ruu.SetRoomID(r.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ruu *RoomUserUpdate) SetUser(u *User) *RoomUserUpdate {
	return ruu.SetUserID(u.ID)
}

// Mutation returns the RoomUserMutation object of the builder.
func (ruu *RoomUserUpdate) Mutation() *RoomUserMutation {
	return ruu.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (ruu *RoomUserUpdate) ClearRoom() *RoomUserUpdate {
	ruu.mutation.ClearRoom()
	return ruu
}

// ClearUser clears the "user" edge to the User entity.
func (ruu *RoomUserUpdate) ClearUser() *RoomUserUpdate {
	ruu.mutation.ClearUser()
	return ruu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ruu *RoomUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ruu.sqlSave, ruu.mutation, ruu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruu *RoomUserUpdate) SaveX(ctx context.Context) int {
	affected, err := ruu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ruu *RoomUserUpdate) Exec(ctx context.Context) error {
	_, err := ruu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruu *RoomUserUpdate) ExecX(ctx context.Context) {
	if err := ruu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruu *RoomUserUpdate) check() error {
	if _, ok := ruu.mutation.RoomID(); ruu.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoomUser.room"`)
	}
	if _, ok := ruu.mutation.UserID(); ruu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoomUser.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruu *RoomUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoomUserUpdate {
	ruu.modifiers = append(ruu.modifiers, modifiers...)
	return ruu
}

func (ruu *RoomUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ruu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(roomuser.Table, roomuser.Columns, sqlgraph.NewFieldSpec(roomuser.FieldID, field.TypeString))
	if ps := ruu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruu.mutation.LastReadMessageID(); ok {
		_spec.SetField(roomuser.FieldLastReadMessageID, field.TypeString, value)
	}
	if ruu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.RoomTable,
			Columns: []string{roomuser.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.RoomTable,
			Columns: []string{roomuser.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.UserTable,
			Columns: []string{roomuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.UserTable,
			Columns: []string{roomuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ruu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ruu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ruu.mutation.done = true
	return n, nil
}

// RoomUserUpdateOne is the builder for updating a single RoomUser entity.
type RoomUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RoomUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRoomID sets the "room_id" field.
func (ruuo *RoomUserUpdateOne) SetRoomID(s string) *RoomUserUpdateOne {
	ruuo.mutation.SetRoomID(s)
	return ruuo
}

// SetUserID sets the "user_id" field.
func (ruuo *RoomUserUpdateOne) SetUserID(s string) *RoomUserUpdateOne {
	ruuo.mutation.SetUserID(s)
	return ruuo
}

// SetLastReadMessageID sets the "last_read_message_id" field.
func (ruuo *RoomUserUpdateOne) SetLastReadMessageID(s string) *RoomUserUpdateOne {
	ruuo.mutation.SetLastReadMessageID(s)
	return ruuo
}

// SetRoom sets the "room" edge to the Room entity.
func (ruuo *RoomUserUpdateOne) SetRoom(r *Room) *RoomUserUpdateOne {
	return ruuo.SetRoomID(r.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ruuo *RoomUserUpdateOne) SetUser(u *User) *RoomUserUpdateOne {
	return ruuo.SetUserID(u.ID)
}

// Mutation returns the RoomUserMutation object of the builder.
func (ruuo *RoomUserUpdateOne) Mutation() *RoomUserMutation {
	return ruuo.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (ruuo *RoomUserUpdateOne) ClearRoom() *RoomUserUpdateOne {
	ruuo.mutation.ClearRoom()
	return ruuo
}

// ClearUser clears the "user" edge to the User entity.
func (ruuo *RoomUserUpdateOne) ClearUser() *RoomUserUpdateOne {
	ruuo.mutation.ClearUser()
	return ruuo
}

// Where appends a list predicates to the RoomUserUpdate builder.
func (ruuo *RoomUserUpdateOne) Where(ps ...predicate.RoomUser) *RoomUserUpdateOne {
	ruuo.mutation.Where(ps...)
	return ruuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruuo *RoomUserUpdateOne) Select(field string, fields ...string) *RoomUserUpdateOne {
	ruuo.fields = append([]string{field}, fields...)
	return ruuo
}

// Save executes the query and returns the updated RoomUser entity.
func (ruuo *RoomUserUpdateOne) Save(ctx context.Context) (*RoomUser, error) {
	return withHooks(ctx, ruuo.sqlSave, ruuo.mutation, ruuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruuo *RoomUserUpdateOne) SaveX(ctx context.Context) *RoomUser {
	node, err := ruuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruuo *RoomUserUpdateOne) Exec(ctx context.Context) error {
	_, err := ruuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruuo *RoomUserUpdateOne) ExecX(ctx context.Context) {
	if err := ruuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruuo *RoomUserUpdateOne) check() error {
	if _, ok := ruuo.mutation.RoomID(); ruuo.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoomUser.room"`)
	}
	if _, ok := ruuo.mutation.UserID(); ruuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RoomUser.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruuo *RoomUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoomUserUpdateOne {
	ruuo.modifiers = append(ruuo.modifiers, modifiers...)
	return ruuo
}

func (ruuo *RoomUserUpdateOne) sqlSave(ctx context.Context) (_node *RoomUser, err error) {
	if err := ruuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(roomuser.Table, roomuser.Columns, sqlgraph.NewFieldSpec(roomuser.FieldID, field.TypeString))
	id, ok := ruuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RoomUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, roomuser.FieldID)
		for _, f := range fields {
			if !roomuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != roomuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruuo.mutation.LastReadMessageID(); ok {
		_spec.SetField(roomuser.FieldLastReadMessageID, field.TypeString, value)
	}
	if ruuo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.RoomTable,
			Columns: []string{roomuser.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruuo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.RoomTable,
			Columns: []string{roomuser.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.UserTable,
			Columns: []string{roomuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.UserTable,
			Columns: []string{roomuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ruuo.modifiers...)
	_node = &RoomUser{config: ruuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruuo.mutation.done = true
	return _node, nil
}
