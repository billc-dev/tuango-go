// Code generated by ent, DO NOT EDIT.

package deliver

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/billc-dev/tuango-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Deliver {
	return predicate.Deliver(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Deliver {
	return predicate.Deliver(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Deliver {
	return predicate.Deliver(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Deliver {
	return predicate.Deliver(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Deliver {
	return predicate.Deliver(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Deliver {
	return predicate.Deliver(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Deliver {
	return predicate.Deliver(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Deliver {
	return predicate.Deliver(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Deliver {
	return predicate.Deliver(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldUserID, v))
}

// PostID applies equality check predicate on the "post_id" field. It's identical to PostIDEQ.
func PostID(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldPostID, v))
}

// NormalTotal applies equality check predicate on the "normal_total" field. It's identical to NormalTotalEQ.
func NormalTotal(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldNormalTotal, v))
}

// NormalFee applies equality check predicate on the "normal_fee" field. It's identical to NormalFeeEQ.
func NormalFee(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldNormalFee, v))
}

// ExtraTotal applies equality check predicate on the "extra_total" field. It's identical to ExtraTotalEQ.
func ExtraTotal(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldExtraTotal, v))
}

// ExtraFee applies equality check predicate on the "extra_fee" field. It's identical to ExtraFeeEQ.
func ExtraFee(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldExtraFee, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Deliver {
	return predicate.Deliver(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Deliver {
	return predicate.Deliver(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldContainsFold(FieldUserID, v))
}

// PostIDEQ applies the EQ predicate on the "post_id" field.
func PostIDEQ(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldPostID, v))
}

// PostIDNEQ applies the NEQ predicate on the "post_id" field.
func PostIDNEQ(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldNEQ(FieldPostID, v))
}

// PostIDIn applies the In predicate on the "post_id" field.
func PostIDIn(vs ...string) predicate.Deliver {
	return predicate.Deliver(sql.FieldIn(FieldPostID, vs...))
}

// PostIDNotIn applies the NotIn predicate on the "post_id" field.
func PostIDNotIn(vs ...string) predicate.Deliver {
	return predicate.Deliver(sql.FieldNotIn(FieldPostID, vs...))
}

// PostIDGT applies the GT predicate on the "post_id" field.
func PostIDGT(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldGT(FieldPostID, v))
}

// PostIDGTE applies the GTE predicate on the "post_id" field.
func PostIDGTE(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldGTE(FieldPostID, v))
}

// PostIDLT applies the LT predicate on the "post_id" field.
func PostIDLT(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldLT(FieldPostID, v))
}

// PostIDLTE applies the LTE predicate on the "post_id" field.
func PostIDLTE(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldLTE(FieldPostID, v))
}

// PostIDContains applies the Contains predicate on the "post_id" field.
func PostIDContains(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldContains(FieldPostID, v))
}

// PostIDHasPrefix applies the HasPrefix predicate on the "post_id" field.
func PostIDHasPrefix(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldHasPrefix(FieldPostID, v))
}

// PostIDHasSuffix applies the HasSuffix predicate on the "post_id" field.
func PostIDHasSuffix(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldHasSuffix(FieldPostID, v))
}

// PostIDEqualFold applies the EqualFold predicate on the "post_id" field.
func PostIDEqualFold(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldEqualFold(FieldPostID, v))
}

// PostIDContainsFold applies the ContainsFold predicate on the "post_id" field.
func PostIDContainsFold(v string) predicate.Deliver {
	return predicate.Deliver(sql.FieldContainsFold(FieldPostID, v))
}

// NormalTotalEQ applies the EQ predicate on the "normal_total" field.
func NormalTotalEQ(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldNormalTotal, v))
}

// NormalTotalNEQ applies the NEQ predicate on the "normal_total" field.
func NormalTotalNEQ(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldNEQ(FieldNormalTotal, v))
}

// NormalTotalIn applies the In predicate on the "normal_total" field.
func NormalTotalIn(vs ...float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldIn(FieldNormalTotal, vs...))
}

// NormalTotalNotIn applies the NotIn predicate on the "normal_total" field.
func NormalTotalNotIn(vs ...float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldNotIn(FieldNormalTotal, vs...))
}

// NormalTotalGT applies the GT predicate on the "normal_total" field.
func NormalTotalGT(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldGT(FieldNormalTotal, v))
}

// NormalTotalGTE applies the GTE predicate on the "normal_total" field.
func NormalTotalGTE(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldGTE(FieldNormalTotal, v))
}

// NormalTotalLT applies the LT predicate on the "normal_total" field.
func NormalTotalLT(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldLT(FieldNormalTotal, v))
}

// NormalTotalLTE applies the LTE predicate on the "normal_total" field.
func NormalTotalLTE(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldLTE(FieldNormalTotal, v))
}

// NormalFeeEQ applies the EQ predicate on the "normal_fee" field.
func NormalFeeEQ(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldNormalFee, v))
}

// NormalFeeNEQ applies the NEQ predicate on the "normal_fee" field.
func NormalFeeNEQ(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldNEQ(FieldNormalFee, v))
}

// NormalFeeIn applies the In predicate on the "normal_fee" field.
func NormalFeeIn(vs ...float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldIn(FieldNormalFee, vs...))
}

// NormalFeeNotIn applies the NotIn predicate on the "normal_fee" field.
func NormalFeeNotIn(vs ...float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldNotIn(FieldNormalFee, vs...))
}

// NormalFeeGT applies the GT predicate on the "normal_fee" field.
func NormalFeeGT(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldGT(FieldNormalFee, v))
}

// NormalFeeGTE applies the GTE predicate on the "normal_fee" field.
func NormalFeeGTE(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldGTE(FieldNormalFee, v))
}

// NormalFeeLT applies the LT predicate on the "normal_fee" field.
func NormalFeeLT(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldLT(FieldNormalFee, v))
}

// NormalFeeLTE applies the LTE predicate on the "normal_fee" field.
func NormalFeeLTE(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldLTE(FieldNormalFee, v))
}

// ExtraTotalEQ applies the EQ predicate on the "extra_total" field.
func ExtraTotalEQ(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldExtraTotal, v))
}

// ExtraTotalNEQ applies the NEQ predicate on the "extra_total" field.
func ExtraTotalNEQ(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldNEQ(FieldExtraTotal, v))
}

// ExtraTotalIn applies the In predicate on the "extra_total" field.
func ExtraTotalIn(vs ...float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldIn(FieldExtraTotal, vs...))
}

// ExtraTotalNotIn applies the NotIn predicate on the "extra_total" field.
func ExtraTotalNotIn(vs ...float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldNotIn(FieldExtraTotal, vs...))
}

// ExtraTotalGT applies the GT predicate on the "extra_total" field.
func ExtraTotalGT(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldGT(FieldExtraTotal, v))
}

// ExtraTotalGTE applies the GTE predicate on the "extra_total" field.
func ExtraTotalGTE(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldGTE(FieldExtraTotal, v))
}

// ExtraTotalLT applies the LT predicate on the "extra_total" field.
func ExtraTotalLT(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldLT(FieldExtraTotal, v))
}

// ExtraTotalLTE applies the LTE predicate on the "extra_total" field.
func ExtraTotalLTE(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldLTE(FieldExtraTotal, v))
}

// ExtraFeeEQ applies the EQ predicate on the "extra_fee" field.
func ExtraFeeEQ(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldExtraFee, v))
}

// ExtraFeeNEQ applies the NEQ predicate on the "extra_fee" field.
func ExtraFeeNEQ(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldNEQ(FieldExtraFee, v))
}

// ExtraFeeIn applies the In predicate on the "extra_fee" field.
func ExtraFeeIn(vs ...float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldIn(FieldExtraFee, vs...))
}

// ExtraFeeNotIn applies the NotIn predicate on the "extra_fee" field.
func ExtraFeeNotIn(vs ...float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldNotIn(FieldExtraFee, vs...))
}

// ExtraFeeGT applies the GT predicate on the "extra_fee" field.
func ExtraFeeGT(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldGT(FieldExtraFee, v))
}

// ExtraFeeGTE applies the GTE predicate on the "extra_fee" field.
func ExtraFeeGTE(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldGTE(FieldExtraFee, v))
}

// ExtraFeeLT applies the LT predicate on the "extra_fee" field.
func ExtraFeeLT(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldLT(FieldExtraFee, v))
}

// ExtraFeeLTE applies the LTE predicate on the "extra_fee" field.
func ExtraFeeLTE(v float64) predicate.Deliver {
	return predicate.Deliver(sql.FieldLTE(FieldExtraFee, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Deliver {
	return predicate.Deliver(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Deliver {
	return predicate.Deliver(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Deliver {
	return predicate.Deliver(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPost applies the HasEdge predicate on the "post" edge.
func HasPost() predicate.Deliver {
	return predicate.Deliver(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PostTable, PostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostWith applies the HasEdge predicate on the "post" edge with a given conditions (other predicates).
func HasPostWith(preds ...predicate.Post) predicate.Deliver {
	return predicate.Deliver(func(s *sql.Selector) {
		step := newPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Deliver) predicate.Deliver {
	return predicate.Deliver(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Deliver) predicate.Deliver {
	return predicate.Deliver(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Deliver) predicate.Deliver {
	return predicate.Deliver(sql.NotPredicates(p))
}
