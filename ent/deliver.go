// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/billc-dev/tuango-go/ent/deliver"
	"github.com/billc-dev/tuango-go/ent/post"
	"github.com/billc-dev/tuango-go/ent/schema"
	"github.com/billc-dev/tuango-go/ent/user"
)

// Deliver is the model entity for the Deliver schema.
type Deliver struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID *string `json:"user_id,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID *string `json:"post_id,omitempty"`
	// NormalOrders holds the value of the "normal_orders" field.
	NormalOrders []schema.DeliverOrder `json:"normal_orders,omitempty"`
	// ExtraOrders holds the value of the "extra_orders" field.
	ExtraOrders []schema.DeliverOrder `json:"extra_orders,omitempty"`
	// NormalTotal holds the value of the "normal_total" field.
	NormalTotal *float64 `json:"normal_total,omitempty"`
	// NormalFee holds the value of the "normal_fee" field.
	NormalFee *float64 `json:"normal_fee,omitempty"`
	// ExtraTotal holds the value of the "extra_total" field.
	ExtraTotal *float64 `json:"extra_total,omitempty"`
	// ExtraFee holds the value of the "extra_fee" field.
	ExtraFee *float64 `json:"extra_fee,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeliverQuery when eager-loading is set.
	Edges        DeliverEdges `json:"-"`
	selectValues sql.SelectValues
}

// DeliverEdges holds the relations/edges for other nodes in the graph.
type DeliverEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliverEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliverEdges) PostOrErr() (*Post, error) {
	if e.loadedTypes[1] {
		if e.Post == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: post.Label}
		}
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Deliver) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deliver.FieldNormalOrders, deliver.FieldExtraOrders:
			values[i] = new([]byte)
		case deliver.FieldNormalTotal, deliver.FieldNormalFee, deliver.FieldExtraTotal, deliver.FieldExtraFee:
			values[i] = new(sql.NullFloat64)
		case deliver.FieldID, deliver.FieldUserID, deliver.FieldPostID:
			values[i] = new(sql.NullString)
		case deliver.FieldCreatedAt, deliver.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Deliver fields.
func (d *Deliver) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deliver.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				d.ID = value.String
			}
		case deliver.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				d.UserID = new(string)
				*d.UserID = value.String
			}
		case deliver.FieldPostID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value.Valid {
				d.PostID = new(string)
				*d.PostID = value.String
			}
		case deliver.FieldNormalOrders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field normal_orders", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.NormalOrders); err != nil {
					return fmt.Errorf("unmarshal field normal_orders: %w", err)
				}
			}
		case deliver.FieldExtraOrders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extra_orders", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.ExtraOrders); err != nil {
					return fmt.Errorf("unmarshal field extra_orders: %w", err)
				}
			}
		case deliver.FieldNormalTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field normal_total", values[i])
			} else if value.Valid {
				d.NormalTotal = new(float64)
				*d.NormalTotal = value.Float64
			}
		case deliver.FieldNormalFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field normal_fee", values[i])
			} else if value.Valid {
				d.NormalFee = new(float64)
				*d.NormalFee = value.Float64
			}
		case deliver.FieldExtraTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field extra_total", values[i])
			} else if value.Valid {
				d.ExtraTotal = new(float64)
				*d.ExtraTotal = value.Float64
			}
		case deliver.FieldExtraFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field extra_fee", values[i])
			} else if value.Valid {
				d.ExtraFee = new(float64)
				*d.ExtraFee = value.Float64
			}
		case deliver.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = new(time.Time)
				*d.CreatedAt = value.Time
			}
		case deliver.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = new(time.Time)
				*d.UpdatedAt = value.Time
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Deliver.
// This includes values selected through modifiers, order, etc.
func (d *Deliver) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Deliver entity.
func (d *Deliver) QueryUser() *UserQuery {
	return NewDeliverClient(d.config).QueryUser(d)
}

// QueryPost queries the "post" edge of the Deliver entity.
func (d *Deliver) QueryPost() *PostQuery {
	return NewDeliverClient(d.config).QueryPost(d)
}

// Update returns a builder for updating this Deliver.
// Note that you need to call Deliver.Unwrap() before calling this method if this Deliver
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Deliver) Update() *DeliverUpdateOne {
	return NewDeliverClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Deliver entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Deliver) Unwrap() *Deliver {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Deliver is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Deliver) String() string {
	var builder strings.Builder
	builder.WriteString("Deliver(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	if v := d.UserID; v != nil {
		builder.WriteString("user_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := d.PostID; v != nil {
		builder.WriteString("post_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("normal_orders=")
	builder.WriteString(fmt.Sprintf("%v", d.NormalOrders))
	builder.WriteString(", ")
	builder.WriteString("extra_orders=")
	builder.WriteString(fmt.Sprintf("%v", d.ExtraOrders))
	builder.WriteString(", ")
	if v := d.NormalTotal; v != nil {
		builder.WriteString("normal_total=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.NormalFee; v != nil {
		builder.WriteString("normal_fee=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.ExtraTotal; v != nil {
		builder.WriteString("extra_total=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.ExtraFee; v != nil {
		builder.WriteString("extra_fee=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := d.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := d.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (d *Deliver) MarshalJSON() ([]byte, error) {
	type Alias Deliver
	return json.Marshal(&struct {
		*Alias
		DeliverEdges
	}{
		Alias:        (*Alias)(d),
		DeliverEdges: d.Edges,
	})
}

// Delivers is a parsable slice of Deliver.
type Delivers []*Deliver
