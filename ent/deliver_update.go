// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/billc-dev/tuango-go/ent/deliver"
	"github.com/billc-dev/tuango-go/ent/post"
	"github.com/billc-dev/tuango-go/ent/predicate"
	"github.com/billc-dev/tuango-go/ent/schema"
	"github.com/billc-dev/tuango-go/ent/user"
)

// DeliverUpdate is the builder for updating Deliver entities.
type DeliverUpdate struct {
	config
	hooks     []Hook
	mutation  *DeliverMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DeliverUpdate builder.
func (du *DeliverUpdate) Where(ps ...predicate.Deliver) *DeliverUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUserID sets the "user_id" field.
func (du *DeliverUpdate) SetUserID(s string) *DeliverUpdate {
	du.mutation.SetUserID(s)
	return du
}

// SetPostID sets the "post_id" field.
func (du *DeliverUpdate) SetPostID(s string) *DeliverUpdate {
	du.mutation.SetPostID(s)
	return du
}

// SetNormalOrders sets the "normal_orders" field.
func (du *DeliverUpdate) SetNormalOrders(so []schema.DeliverOrder) *DeliverUpdate {
	du.mutation.SetNormalOrders(so)
	return du
}

// AppendNormalOrders appends so to the "normal_orders" field.
func (du *DeliverUpdate) AppendNormalOrders(so []schema.DeliverOrder) *DeliverUpdate {
	du.mutation.AppendNormalOrders(so)
	return du
}

// SetExtraOrders sets the "extra_orders" field.
func (du *DeliverUpdate) SetExtraOrders(so []schema.DeliverOrder) *DeliverUpdate {
	du.mutation.SetExtraOrders(so)
	return du
}

// AppendExtraOrders appends so to the "extra_orders" field.
func (du *DeliverUpdate) AppendExtraOrders(so []schema.DeliverOrder) *DeliverUpdate {
	du.mutation.AppendExtraOrders(so)
	return du
}

// SetNormalTotal sets the "normal_total" field.
func (du *DeliverUpdate) SetNormalTotal(f float64) *DeliverUpdate {
	du.mutation.ResetNormalTotal()
	du.mutation.SetNormalTotal(f)
	return du
}

// SetNillableNormalTotal sets the "normal_total" field if the given value is not nil.
func (du *DeliverUpdate) SetNillableNormalTotal(f *float64) *DeliverUpdate {
	if f != nil {
		du.SetNormalTotal(*f)
	}
	return du
}

// AddNormalTotal adds f to the "normal_total" field.
func (du *DeliverUpdate) AddNormalTotal(f float64) *DeliverUpdate {
	du.mutation.AddNormalTotal(f)
	return du
}

// SetNormalFee sets the "normal_fee" field.
func (du *DeliverUpdate) SetNormalFee(f float64) *DeliverUpdate {
	du.mutation.ResetNormalFee()
	du.mutation.SetNormalFee(f)
	return du
}

// SetNillableNormalFee sets the "normal_fee" field if the given value is not nil.
func (du *DeliverUpdate) SetNillableNormalFee(f *float64) *DeliverUpdate {
	if f != nil {
		du.SetNormalFee(*f)
	}
	return du
}

// AddNormalFee adds f to the "normal_fee" field.
func (du *DeliverUpdate) AddNormalFee(f float64) *DeliverUpdate {
	du.mutation.AddNormalFee(f)
	return du
}

// SetExtraTotal sets the "extra_total" field.
func (du *DeliverUpdate) SetExtraTotal(f float64) *DeliverUpdate {
	du.mutation.ResetExtraTotal()
	du.mutation.SetExtraTotal(f)
	return du
}

// SetNillableExtraTotal sets the "extra_total" field if the given value is not nil.
func (du *DeliverUpdate) SetNillableExtraTotal(f *float64) *DeliverUpdate {
	if f != nil {
		du.SetExtraTotal(*f)
	}
	return du
}

// AddExtraTotal adds f to the "extra_total" field.
func (du *DeliverUpdate) AddExtraTotal(f float64) *DeliverUpdate {
	du.mutation.AddExtraTotal(f)
	return du
}

// SetExtraFee sets the "extra_fee" field.
func (du *DeliverUpdate) SetExtraFee(f float64) *DeliverUpdate {
	du.mutation.ResetExtraFee()
	du.mutation.SetExtraFee(f)
	return du
}

// SetNillableExtraFee sets the "extra_fee" field if the given value is not nil.
func (du *DeliverUpdate) SetNillableExtraFee(f *float64) *DeliverUpdate {
	if f != nil {
		du.SetExtraFee(*f)
	}
	return du
}

// AddExtraFee adds f to the "extra_fee" field.
func (du *DeliverUpdate) AddExtraFee(f float64) *DeliverUpdate {
	du.mutation.AddExtraFee(f)
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DeliverUpdate) SetCreatedAt(t time.Time) *DeliverUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DeliverUpdate) SetNillableCreatedAt(t *time.Time) *DeliverUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DeliverUpdate) SetUpdatedAt(t time.Time) *DeliverUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetUser sets the "user" edge to the User entity.
func (du *DeliverUpdate) SetUser(u *User) *DeliverUpdate {
	return du.SetUserID(u.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (du *DeliverUpdate) SetPost(p *Post) *DeliverUpdate {
	return du.SetPostID(p.ID)
}

// Mutation returns the DeliverMutation object of the builder.
func (du *DeliverUpdate) Mutation() *DeliverMutation {
	return du.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (du *DeliverUpdate) ClearUser() *DeliverUpdate {
	du.mutation.ClearUser()
	return du
}

// ClearPost clears the "post" edge to the Post entity.
func (du *DeliverUpdate) ClearPost() *DeliverUpdate {
	du.mutation.ClearPost()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeliverUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeliverUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeliverUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeliverUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DeliverUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := deliver.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DeliverUpdate) check() error {
	if _, ok := du.mutation.UserID(); du.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Deliver.user"`)
	}
	if _, ok := du.mutation.PostID(); du.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Deliver.post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (du *DeliverUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeliverUpdate {
	du.modifiers = append(du.modifiers, modifiers...)
	return du
}

func (du *DeliverUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliver.Table, deliver.Columns, sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.NormalOrders(); ok {
		_spec.SetField(deliver.FieldNormalOrders, field.TypeJSON, value)
	}
	if value, ok := du.mutation.AppendedNormalOrders(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, deliver.FieldNormalOrders, value)
		})
	}
	if value, ok := du.mutation.ExtraOrders(); ok {
		_spec.SetField(deliver.FieldExtraOrders, field.TypeJSON, value)
	}
	if value, ok := du.mutation.AppendedExtraOrders(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, deliver.FieldExtraOrders, value)
		})
	}
	if value, ok := du.mutation.NormalTotal(); ok {
		_spec.SetField(deliver.FieldNormalTotal, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedNormalTotal(); ok {
		_spec.AddField(deliver.FieldNormalTotal, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.NormalFee(); ok {
		_spec.SetField(deliver.FieldNormalFee, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedNormalFee(); ok {
		_spec.AddField(deliver.FieldNormalFee, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.ExtraTotal(); ok {
		_spec.SetField(deliver.FieldExtraTotal, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedExtraTotal(); ok {
		_spec.AddField(deliver.FieldExtraTotal, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.ExtraFee(); ok {
		_spec.SetField(deliver.FieldExtraFee, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedExtraFee(); ok {
		_spec.AddField(deliver.FieldExtraFee, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(deliver.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(deliver.FieldUpdatedAt, field.TypeTime, value)
	}
	if du.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliver.UserTable,
			Columns: []string{deliver.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliver.UserTable,
			Columns: []string{deliver.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliver.PostTable,
			Columns: []string{deliver.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliver.PostTable,
			Columns: []string{deliver.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(du.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeliverUpdateOne is the builder for updating a single Deliver entity.
type DeliverUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DeliverMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (duo *DeliverUpdateOne) SetUserID(s string) *DeliverUpdateOne {
	duo.mutation.SetUserID(s)
	return duo
}

// SetPostID sets the "post_id" field.
func (duo *DeliverUpdateOne) SetPostID(s string) *DeliverUpdateOne {
	duo.mutation.SetPostID(s)
	return duo
}

// SetNormalOrders sets the "normal_orders" field.
func (duo *DeliverUpdateOne) SetNormalOrders(so []schema.DeliverOrder) *DeliverUpdateOne {
	duo.mutation.SetNormalOrders(so)
	return duo
}

// AppendNormalOrders appends so to the "normal_orders" field.
func (duo *DeliverUpdateOne) AppendNormalOrders(so []schema.DeliverOrder) *DeliverUpdateOne {
	duo.mutation.AppendNormalOrders(so)
	return duo
}

// SetExtraOrders sets the "extra_orders" field.
func (duo *DeliverUpdateOne) SetExtraOrders(so []schema.DeliverOrder) *DeliverUpdateOne {
	duo.mutation.SetExtraOrders(so)
	return duo
}

// AppendExtraOrders appends so to the "extra_orders" field.
func (duo *DeliverUpdateOne) AppendExtraOrders(so []schema.DeliverOrder) *DeliverUpdateOne {
	duo.mutation.AppendExtraOrders(so)
	return duo
}

// SetNormalTotal sets the "normal_total" field.
func (duo *DeliverUpdateOne) SetNormalTotal(f float64) *DeliverUpdateOne {
	duo.mutation.ResetNormalTotal()
	duo.mutation.SetNormalTotal(f)
	return duo
}

// SetNillableNormalTotal sets the "normal_total" field if the given value is not nil.
func (duo *DeliverUpdateOne) SetNillableNormalTotal(f *float64) *DeliverUpdateOne {
	if f != nil {
		duo.SetNormalTotal(*f)
	}
	return duo
}

// AddNormalTotal adds f to the "normal_total" field.
func (duo *DeliverUpdateOne) AddNormalTotal(f float64) *DeliverUpdateOne {
	duo.mutation.AddNormalTotal(f)
	return duo
}

// SetNormalFee sets the "normal_fee" field.
func (duo *DeliverUpdateOne) SetNormalFee(f float64) *DeliverUpdateOne {
	duo.mutation.ResetNormalFee()
	duo.mutation.SetNormalFee(f)
	return duo
}

// SetNillableNormalFee sets the "normal_fee" field if the given value is not nil.
func (duo *DeliverUpdateOne) SetNillableNormalFee(f *float64) *DeliverUpdateOne {
	if f != nil {
		duo.SetNormalFee(*f)
	}
	return duo
}

// AddNormalFee adds f to the "normal_fee" field.
func (duo *DeliverUpdateOne) AddNormalFee(f float64) *DeliverUpdateOne {
	duo.mutation.AddNormalFee(f)
	return duo
}

// SetExtraTotal sets the "extra_total" field.
func (duo *DeliverUpdateOne) SetExtraTotal(f float64) *DeliverUpdateOne {
	duo.mutation.ResetExtraTotal()
	duo.mutation.SetExtraTotal(f)
	return duo
}

// SetNillableExtraTotal sets the "extra_total" field if the given value is not nil.
func (duo *DeliverUpdateOne) SetNillableExtraTotal(f *float64) *DeliverUpdateOne {
	if f != nil {
		duo.SetExtraTotal(*f)
	}
	return duo
}

// AddExtraTotal adds f to the "extra_total" field.
func (duo *DeliverUpdateOne) AddExtraTotal(f float64) *DeliverUpdateOne {
	duo.mutation.AddExtraTotal(f)
	return duo
}

// SetExtraFee sets the "extra_fee" field.
func (duo *DeliverUpdateOne) SetExtraFee(f float64) *DeliverUpdateOne {
	duo.mutation.ResetExtraFee()
	duo.mutation.SetExtraFee(f)
	return duo
}

// SetNillableExtraFee sets the "extra_fee" field if the given value is not nil.
func (duo *DeliverUpdateOne) SetNillableExtraFee(f *float64) *DeliverUpdateOne {
	if f != nil {
		duo.SetExtraFee(*f)
	}
	return duo
}

// AddExtraFee adds f to the "extra_fee" field.
func (duo *DeliverUpdateOne) AddExtraFee(f float64) *DeliverUpdateOne {
	duo.mutation.AddExtraFee(f)
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DeliverUpdateOne) SetCreatedAt(t time.Time) *DeliverUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DeliverUpdateOne) SetNillableCreatedAt(t *time.Time) *DeliverUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DeliverUpdateOne) SetUpdatedAt(t time.Time) *DeliverUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetUser sets the "user" edge to the User entity.
func (duo *DeliverUpdateOne) SetUser(u *User) *DeliverUpdateOne {
	return duo.SetUserID(u.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (duo *DeliverUpdateOne) SetPost(p *Post) *DeliverUpdateOne {
	return duo.SetPostID(p.ID)
}

// Mutation returns the DeliverMutation object of the builder.
func (duo *DeliverUpdateOne) Mutation() *DeliverMutation {
	return duo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (duo *DeliverUpdateOne) ClearUser() *DeliverUpdateOne {
	duo.mutation.ClearUser()
	return duo
}

// ClearPost clears the "post" edge to the Post entity.
func (duo *DeliverUpdateOne) ClearPost() *DeliverUpdateOne {
	duo.mutation.ClearPost()
	return duo
}

// Where appends a list predicates to the DeliverUpdate builder.
func (duo *DeliverUpdateOne) Where(ps ...predicate.Deliver) *DeliverUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeliverUpdateOne) Select(field string, fields ...string) *DeliverUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Deliver entity.
func (duo *DeliverUpdateOne) Save(ctx context.Context) (*Deliver, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeliverUpdateOne) SaveX(ctx context.Context) *Deliver {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeliverUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeliverUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DeliverUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := deliver.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DeliverUpdateOne) check() error {
	if _, ok := duo.mutation.UserID(); duo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Deliver.user"`)
	}
	if _, ok := duo.mutation.PostID(); duo.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Deliver.post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (duo *DeliverUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DeliverUpdateOne {
	duo.modifiers = append(duo.modifiers, modifiers...)
	return duo
}

func (duo *DeliverUpdateOne) sqlSave(ctx context.Context) (_node *Deliver, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deliver.Table, deliver.Columns, sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Deliver.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deliver.FieldID)
		for _, f := range fields {
			if !deliver.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deliver.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.NormalOrders(); ok {
		_spec.SetField(deliver.FieldNormalOrders, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.AppendedNormalOrders(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, deliver.FieldNormalOrders, value)
		})
	}
	if value, ok := duo.mutation.ExtraOrders(); ok {
		_spec.SetField(deliver.FieldExtraOrders, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.AppendedExtraOrders(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, deliver.FieldExtraOrders, value)
		})
	}
	if value, ok := duo.mutation.NormalTotal(); ok {
		_spec.SetField(deliver.FieldNormalTotal, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedNormalTotal(); ok {
		_spec.AddField(deliver.FieldNormalTotal, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.NormalFee(); ok {
		_spec.SetField(deliver.FieldNormalFee, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedNormalFee(); ok {
		_spec.AddField(deliver.FieldNormalFee, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.ExtraTotal(); ok {
		_spec.SetField(deliver.FieldExtraTotal, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedExtraTotal(); ok {
		_spec.AddField(deliver.FieldExtraTotal, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.ExtraFee(); ok {
		_spec.SetField(deliver.FieldExtraFee, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedExtraFee(); ok {
		_spec.AddField(deliver.FieldExtraFee, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(deliver.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(deliver.FieldUpdatedAt, field.TypeTime, value)
	}
	if duo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliver.UserTable,
			Columns: []string{deliver.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliver.UserTable,
			Columns: []string{deliver.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliver.PostTable,
			Columns: []string{deliver.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliver.PostTable,
			Columns: []string{deliver.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(duo.modifiers...)
	_node = &Deliver{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deliver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
