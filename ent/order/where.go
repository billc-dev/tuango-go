// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/billc-dev/tuango-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUserID, v))
}

// PostID applies equality check predicate on the "post_id" field. It's identical to PostIDEQ.
func PostID(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPostID, v))
}

// OrderNum applies equality check predicate on the "order_num" field. It's identical to OrderNumEQ.
func OrderNum(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderNum, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldComment, v))
}

// SellerComment applies equality check predicate on the "seller_comment" field. It's identical to SellerCommentEQ.
func SellerComment(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldSellerComment, v))
}

// HasName applies equality check predicate on the "has_name" field. It's identical to HasNameEQ.
func HasName(v bool) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldHasName, v))
}

// IsExtra applies equality check predicate on the "is_extra" field. It's identical to IsExtraEQ.
func IsExtra(v bool) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldIsExtra, v))
}

// Fb applies equality check predicate on the "fb" field. It's identical to FbEQ.
func Fb(v bool) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldFb, v))
}

// IsInStock applies equality check predicate on the "is_in_stock" field. It's identical to IsInStockEQ.
func IsInStock(v bool) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldIsInStock, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldUserID, v))
}

// PostIDEQ applies the EQ predicate on the "post_id" field.
func PostIDEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPostID, v))
}

// PostIDNEQ applies the NEQ predicate on the "post_id" field.
func PostIDNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPostID, v))
}

// PostIDIn applies the In predicate on the "post_id" field.
func PostIDIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPostID, vs...))
}

// PostIDNotIn applies the NotIn predicate on the "post_id" field.
func PostIDNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPostID, vs...))
}

// PostIDGT applies the GT predicate on the "post_id" field.
func PostIDGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPostID, v))
}

// PostIDGTE applies the GTE predicate on the "post_id" field.
func PostIDGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPostID, v))
}

// PostIDLT applies the LT predicate on the "post_id" field.
func PostIDLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPostID, v))
}

// PostIDLTE applies the LTE predicate on the "post_id" field.
func PostIDLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPostID, v))
}

// PostIDContains applies the Contains predicate on the "post_id" field.
func PostIDContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldPostID, v))
}

// PostIDHasPrefix applies the HasPrefix predicate on the "post_id" field.
func PostIDHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldPostID, v))
}

// PostIDHasSuffix applies the HasSuffix predicate on the "post_id" field.
func PostIDHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldPostID, v))
}

// PostIDEqualFold applies the EqualFold predicate on the "post_id" field.
func PostIDEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldPostID, v))
}

// PostIDContainsFold applies the ContainsFold predicate on the "post_id" field.
func PostIDContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldPostID, v))
}

// OrderNumEQ applies the EQ predicate on the "order_num" field.
func OrderNumEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderNum, v))
}

// OrderNumNEQ applies the NEQ predicate on the "order_num" field.
func OrderNumNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldOrderNum, v))
}

// OrderNumIn applies the In predicate on the "order_num" field.
func OrderNumIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldOrderNum, vs...))
}

// OrderNumNotIn applies the NotIn predicate on the "order_num" field.
func OrderNumNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldOrderNum, vs...))
}

// OrderNumGT applies the GT predicate on the "order_num" field.
func OrderNumGT(v int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldOrderNum, v))
}

// OrderNumGTE applies the GTE predicate on the "order_num" field.
func OrderNumGTE(v int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldOrderNum, v))
}

// OrderNumLT applies the LT predicate on the "order_num" field.
func OrderNumLT(v int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldOrderNum, v))
}

// OrderNumLTE applies the LTE predicate on the "order_num" field.
func OrderNumLTE(v int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldOrderNum, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldComment, v))
}

// SellerCommentEQ applies the EQ predicate on the "seller_comment" field.
func SellerCommentEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldSellerComment, v))
}

// SellerCommentNEQ applies the NEQ predicate on the "seller_comment" field.
func SellerCommentNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldSellerComment, v))
}

// SellerCommentIn applies the In predicate on the "seller_comment" field.
func SellerCommentIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldSellerComment, vs...))
}

// SellerCommentNotIn applies the NotIn predicate on the "seller_comment" field.
func SellerCommentNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldSellerComment, vs...))
}

// SellerCommentGT applies the GT predicate on the "seller_comment" field.
func SellerCommentGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldSellerComment, v))
}

// SellerCommentGTE applies the GTE predicate on the "seller_comment" field.
func SellerCommentGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldSellerComment, v))
}

// SellerCommentLT applies the LT predicate on the "seller_comment" field.
func SellerCommentLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldSellerComment, v))
}

// SellerCommentLTE applies the LTE predicate on the "seller_comment" field.
func SellerCommentLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldSellerComment, v))
}

// SellerCommentContains applies the Contains predicate on the "seller_comment" field.
func SellerCommentContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldSellerComment, v))
}

// SellerCommentHasPrefix applies the HasPrefix predicate on the "seller_comment" field.
func SellerCommentHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldSellerComment, v))
}

// SellerCommentHasSuffix applies the HasSuffix predicate on the "seller_comment" field.
func SellerCommentHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldSellerComment, v))
}

// SellerCommentEqualFold applies the EqualFold predicate on the "seller_comment" field.
func SellerCommentEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldSellerComment, v))
}

// SellerCommentContainsFold applies the ContainsFold predicate on the "seller_comment" field.
func SellerCommentContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldSellerComment, v))
}

// HasNameEQ applies the EQ predicate on the "has_name" field.
func HasNameEQ(v bool) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldHasName, v))
}

// HasNameNEQ applies the NEQ predicate on the "has_name" field.
func HasNameNEQ(v bool) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldHasName, v))
}

// IsExtraEQ applies the EQ predicate on the "is_extra" field.
func IsExtraEQ(v bool) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldIsExtra, v))
}

// IsExtraNEQ applies the NEQ predicate on the "is_extra" field.
func IsExtraNEQ(v bool) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldIsExtra, v))
}

// FbEQ applies the EQ predicate on the "fb" field.
func FbEQ(v bool) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldFb, v))
}

// FbNEQ applies the NEQ predicate on the "fb" field.
func FbNEQ(v bool) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldFb, v))
}

// IsInStockEQ applies the EQ predicate on the "is_in_stock" field.
func IsInStockEQ(v bool) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldIsInStock, v))
}

// IsInStockNEQ applies the NEQ predicate on the "is_in_stock" field.
func IsInStockNEQ(v bool) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldIsInStock, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPost applies the HasEdge predicate on the "post" edge.
func HasPost() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PostTable, PostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostWith applies the HasEdge predicate on the "post" edge with a given conditions (other predicates).
func HasPostWith(preds ...predicate.Post) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderItems applies the HasEdge predicate on the "order_items" edge.
func HasOrderItems() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderItemsTable, OrderItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderItemsWith applies the HasEdge predicate on the "order_items" edge with a given conditions (other predicates).
func HasOrderItemsWith(preds ...predicate.OrderItem) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newOrderItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrderHistories applies the HasEdge predicate on the "order_histories" edge.
func HasOrderHistories() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrderHistoriesTable, OrderHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderHistoriesWith applies the HasEdge predicate on the "order_histories" edge with a given conditions (other predicates).
func HasOrderHistoriesWith(preds ...predicate.OrderHistory) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newOrderHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
