// Code generated by ent, DO NOT EDIT.

package postitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the postitem type in the database.
	Label = "post_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPostID holds the string denoting the post_id field in the database.
	FieldPostID = "post_id"
	// FieldIdentifier holds the string denoting the identifier field in the database.
	FieldIdentifier = "identifier"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldStock holds the string denoting the stock field in the database.
	FieldStock = "stock"
	// EdgePost holds the string denoting the post edge name in mutations.
	EdgePost = "post"
	// EdgePostItem holds the string denoting the post_item edge name in mutations.
	EdgePostItem = "post_item"
	// Table holds the table name of the postitem in the database.
	Table = "post_items"
	// PostTable is the table that holds the post relation/edge.
	PostTable = "post_items"
	// PostInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostInverseTable = "posts"
	// PostColumn is the table column denoting the post relation/edge.
	PostColumn = "post_id"
	// PostItemTable is the table that holds the post_item relation/edge.
	PostItemTable = "order_items"
	// PostItemInverseTable is the table name for the OrderItem entity.
	// It exists in this package in order to avoid circular dependency with the "orderitem" package.
	PostItemInverseTable = "order_items"
	// PostItemColumn is the table column denoting the post_item relation/edge.
	PostItemColumn = "post_item_id"
)

// Columns holds all SQL columns for postitem fields.
var Columns = []string{
	FieldID,
	FieldPostID,
	FieldIdentifier,
	FieldName,
	FieldPrice,
	FieldStock,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the PostItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPostID orders the results by the post_id field.
func ByPostID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostID, opts...).ToFunc()
}

// ByIdentifier orders the results by the identifier field.
func ByIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentifier, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByStock orders the results by the stock field.
func ByStock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStock, opts...).ToFunc()
}

// ByPostField orders the results by post field.
func ByPostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostStep(), sql.OrderByField(field, opts...))
	}
}

// ByPostItemCount orders the results by post_item count.
func ByPostItemCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPostItemStep(), opts...)
	}
}

// ByPostItem orders the results by post_item terms.
func ByPostItem(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostItemStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PostTable, PostColumn),
	)
}
func newPostItemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostItemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PostItemTable, PostItemColumn),
	)
}
