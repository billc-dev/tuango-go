// Code generated by ent, DO NOT EDIT.

package postitem

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/billc-dev/tuango-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PostItem {
	return predicate.PostItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PostItem {
	return predicate.PostItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PostItem {
	return predicate.PostItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PostItem {
	return predicate.PostItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PostItem {
	return predicate.PostItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PostItem {
	return predicate.PostItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PostItem {
	return predicate.PostItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PostItem {
	return predicate.PostItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PostItem {
	return predicate.PostItem(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PostItem {
	return predicate.PostItem(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PostItem {
	return predicate.PostItem(sql.FieldContainsFold(FieldID, id))
}

// PostID applies equality check predicate on the "post_id" field. It's identical to PostIDEQ.
func PostID(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldEQ(FieldPostID, v))
}

// Identifier applies equality check predicate on the "identifier" field. It's identical to IdentifierEQ.
func Identifier(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldEQ(FieldIdentifier, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldEQ(FieldName, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldEQ(FieldPrice, v))
}

// Stock applies equality check predicate on the "stock" field. It's identical to StockEQ.
func Stock(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldEQ(FieldStock, v))
}

// PostIDEQ applies the EQ predicate on the "post_id" field.
func PostIDEQ(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldEQ(FieldPostID, v))
}

// PostIDNEQ applies the NEQ predicate on the "post_id" field.
func PostIDNEQ(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldNEQ(FieldPostID, v))
}

// PostIDIn applies the In predicate on the "post_id" field.
func PostIDIn(vs ...string) predicate.PostItem {
	return predicate.PostItem(sql.FieldIn(FieldPostID, vs...))
}

// PostIDNotIn applies the NotIn predicate on the "post_id" field.
func PostIDNotIn(vs ...string) predicate.PostItem {
	return predicate.PostItem(sql.FieldNotIn(FieldPostID, vs...))
}

// PostIDGT applies the GT predicate on the "post_id" field.
func PostIDGT(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldGT(FieldPostID, v))
}

// PostIDGTE applies the GTE predicate on the "post_id" field.
func PostIDGTE(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldGTE(FieldPostID, v))
}

// PostIDLT applies the LT predicate on the "post_id" field.
func PostIDLT(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldLT(FieldPostID, v))
}

// PostIDLTE applies the LTE predicate on the "post_id" field.
func PostIDLTE(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldLTE(FieldPostID, v))
}

// PostIDContains applies the Contains predicate on the "post_id" field.
func PostIDContains(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldContains(FieldPostID, v))
}

// PostIDHasPrefix applies the HasPrefix predicate on the "post_id" field.
func PostIDHasPrefix(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldHasPrefix(FieldPostID, v))
}

// PostIDHasSuffix applies the HasSuffix predicate on the "post_id" field.
func PostIDHasSuffix(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldHasSuffix(FieldPostID, v))
}

// PostIDEqualFold applies the EqualFold predicate on the "post_id" field.
func PostIDEqualFold(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldEqualFold(FieldPostID, v))
}

// PostIDContainsFold applies the ContainsFold predicate on the "post_id" field.
func PostIDContainsFold(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldContainsFold(FieldPostID, v))
}

// IdentifierEQ applies the EQ predicate on the "identifier" field.
func IdentifierEQ(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldEQ(FieldIdentifier, v))
}

// IdentifierNEQ applies the NEQ predicate on the "identifier" field.
func IdentifierNEQ(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldNEQ(FieldIdentifier, v))
}

// IdentifierIn applies the In predicate on the "identifier" field.
func IdentifierIn(vs ...string) predicate.PostItem {
	return predicate.PostItem(sql.FieldIn(FieldIdentifier, vs...))
}

// IdentifierNotIn applies the NotIn predicate on the "identifier" field.
func IdentifierNotIn(vs ...string) predicate.PostItem {
	return predicate.PostItem(sql.FieldNotIn(FieldIdentifier, vs...))
}

// IdentifierGT applies the GT predicate on the "identifier" field.
func IdentifierGT(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldGT(FieldIdentifier, v))
}

// IdentifierGTE applies the GTE predicate on the "identifier" field.
func IdentifierGTE(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldGTE(FieldIdentifier, v))
}

// IdentifierLT applies the LT predicate on the "identifier" field.
func IdentifierLT(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldLT(FieldIdentifier, v))
}

// IdentifierLTE applies the LTE predicate on the "identifier" field.
func IdentifierLTE(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldLTE(FieldIdentifier, v))
}

// IdentifierContains applies the Contains predicate on the "identifier" field.
func IdentifierContains(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldContains(FieldIdentifier, v))
}

// IdentifierHasPrefix applies the HasPrefix predicate on the "identifier" field.
func IdentifierHasPrefix(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldHasPrefix(FieldIdentifier, v))
}

// IdentifierHasSuffix applies the HasSuffix predicate on the "identifier" field.
func IdentifierHasSuffix(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldHasSuffix(FieldIdentifier, v))
}

// IdentifierEqualFold applies the EqualFold predicate on the "identifier" field.
func IdentifierEqualFold(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldEqualFold(FieldIdentifier, v))
}

// IdentifierContainsFold applies the ContainsFold predicate on the "identifier" field.
func IdentifierContainsFold(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldContainsFold(FieldIdentifier, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PostItem {
	return predicate.PostItem(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PostItem {
	return predicate.PostItem(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PostItem {
	return predicate.PostItem(sql.FieldContainsFold(FieldName, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldLTE(FieldPrice, v))
}

// StockEQ applies the EQ predicate on the "stock" field.
func StockEQ(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldEQ(FieldStock, v))
}

// StockNEQ applies the NEQ predicate on the "stock" field.
func StockNEQ(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldNEQ(FieldStock, v))
}

// StockIn applies the In predicate on the "stock" field.
func StockIn(vs ...float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldIn(FieldStock, vs...))
}

// StockNotIn applies the NotIn predicate on the "stock" field.
func StockNotIn(vs ...float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldNotIn(FieldStock, vs...))
}

// StockGT applies the GT predicate on the "stock" field.
func StockGT(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldGT(FieldStock, v))
}

// StockGTE applies the GTE predicate on the "stock" field.
func StockGTE(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldGTE(FieldStock, v))
}

// StockLT applies the LT predicate on the "stock" field.
func StockLT(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldLT(FieldStock, v))
}

// StockLTE applies the LTE predicate on the "stock" field.
func StockLTE(v float64) predicate.PostItem {
	return predicate.PostItem(sql.FieldLTE(FieldStock, v))
}

// HasPost applies the HasEdge predicate on the "post" edge.
func HasPost() predicate.PostItem {
	return predicate.PostItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PostTable, PostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostWith applies the HasEdge predicate on the "post" edge with a given conditions (other predicates).
func HasPostWith(preds ...predicate.Post) predicate.PostItem {
	return predicate.PostItem(func(s *sql.Selector) {
		step := newPostStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPostItem applies the HasEdge predicate on the "post_item" edge.
func HasPostItem() predicate.PostItem {
	return predicate.PostItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostItemTable, PostItemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostItemWith applies the HasEdge predicate on the "post_item" edge with a given conditions (other predicates).
func HasPostItemWith(preds ...predicate.OrderItem) predicate.PostItem {
	return predicate.PostItem(func(s *sql.Selector) {
		step := newPostItemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PostItem) predicate.PostItem {
	return predicate.PostItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PostItem) predicate.PostItem {
	return predicate.PostItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PostItem) predicate.PostItem {
	return predicate.PostItem(sql.NotPredicates(p))
}
