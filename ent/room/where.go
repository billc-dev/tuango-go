// Code generated by ent, DO NOT EDIT.

package room

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/billc-dev/tuango-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldName, v))
}

// LastMessage applies equality check predicate on the "last_message" field. It's identical to LastMessageEQ.
func LastMessage(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldLastMessage, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldUpdatedAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldType, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldName, v))
}

// LastMessageEQ applies the EQ predicate on the "last_message" field.
func LastMessageEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldLastMessage, v))
}

// LastMessageNEQ applies the NEQ predicate on the "last_message" field.
func LastMessageNEQ(v string) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldLastMessage, v))
}

// LastMessageIn applies the In predicate on the "last_message" field.
func LastMessageIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldLastMessage, vs...))
}

// LastMessageNotIn applies the NotIn predicate on the "last_message" field.
func LastMessageNotIn(vs ...string) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldLastMessage, vs...))
}

// LastMessageGT applies the GT predicate on the "last_message" field.
func LastMessageGT(v string) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldLastMessage, v))
}

// LastMessageGTE applies the GTE predicate on the "last_message" field.
func LastMessageGTE(v string) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldLastMessage, v))
}

// LastMessageLT applies the LT predicate on the "last_message" field.
func LastMessageLT(v string) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldLastMessage, v))
}

// LastMessageLTE applies the LTE predicate on the "last_message" field.
func LastMessageLTE(v string) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldLastMessage, v))
}

// LastMessageContains applies the Contains predicate on the "last_message" field.
func LastMessageContains(v string) predicate.Room {
	return predicate.Room(sql.FieldContains(FieldLastMessage, v))
}

// LastMessageHasPrefix applies the HasPrefix predicate on the "last_message" field.
func LastMessageHasPrefix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasPrefix(FieldLastMessage, v))
}

// LastMessageHasSuffix applies the HasSuffix predicate on the "last_message" field.
func LastMessageHasSuffix(v string) predicate.Room {
	return predicate.Room(sql.FieldHasSuffix(FieldLastMessage, v))
}

// LastMessageEqualFold applies the EqualFold predicate on the "last_message" field.
func LastMessageEqualFold(v string) predicate.Room {
	return predicate.Room(sql.FieldEqualFold(FieldLastMessage, v))
}

// LastMessageContainsFold applies the ContainsFold predicate on the "last_message" field.
func LastMessageContainsFold(v string) predicate.Room {
	return predicate.Room(sql.FieldContainsFold(FieldLastMessage, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Room {
	return predicate.Room(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Room {
	return predicate.Room(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Room {
	return predicate.Room(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasRoomMessages applies the HasEdge predicate on the "room_messages" edge.
func HasRoomMessages() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoomMessagesTable, RoomMessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomMessagesWith applies the HasEdge predicate on the "room_messages" edge with a given conditions (other predicates).
func HasRoomMessagesWith(preds ...predicate.Message) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := newRoomMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoomUsers applies the HasEdge predicate on the "room_users" edge.
func HasRoomUsers() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoomUsersTable, RoomUsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomUsersWith applies the HasEdge predicate on the "room_users" edge with a given conditions (other predicates).
func HasRoomUsersWith(preds ...predicate.RoomUser) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := newRoomUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Room) predicate.Room {
	return predicate.Room(sql.NotPredicates(p))
}
