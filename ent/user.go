// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/billc-dev/tuango-go/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username *string `json:"username,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName *string `json:"display_name,omitempty"`
	// PictureURL holds the value of the "picture_url" field.
	PictureURL *string `json:"picture_url,omitempty"`
	// PickupNum holds the value of the "pickup_num" field.
	PickupNum *float64 `json:"pickup_num,omitempty"`
	// Role holds the value of the "role" field.
	Role *user.Role `json:"role,omitempty"`
	// Status holds the value of the "status" field.
	Status *user.Status `json:"status,omitempty"`
	// Notified holds the value of the "notified" field.
	Notified *bool `json:"notified,omitempty"`
	// LinePay holds the value of the "line_pay" field.
	LinePay *bool `json:"line_pay,omitempty"`
	// Fb holds the value of the "fb" field.
	Fb *bool `json:"fb,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment *string `json:"comment,omitempty"`
	// DeliveredOrderCountLimit holds the value of the "delivered_order_count_limit" field.
	DeliveredOrderCountLimit *int `json:"delivered_order_count_limit,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"-"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// UserComments holds the value of the user_comments edge.
	UserComments []*Comment `json:"user_comments,omitempty"`
	// UserCompletes holds the value of the user_completes edge.
	UserCompletes []*Complete `json:"user_completes,omitempty"`
	// UserDelivers holds the value of the user_delivers edge.
	UserDelivers []*Deliver `json:"user_delivers,omitempty"`
	// UserLikes holds the value of the user_likes edge.
	UserLikes []*Like `json:"user_likes,omitempty"`
	// UserMessages holds the value of the user_messages edge.
	UserMessages []*Message `json:"user_messages,omitempty"`
	// UserOrders holds the value of the user_orders edge.
	UserOrders []*Order `json:"user_orders,omitempty"`
	// UserRooms holds the value of the user_rooms edge.
	UserRooms []*RoomUser `json:"user_rooms,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[0] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// UserCommentsOrErr returns the UserComments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserCommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.UserComments, nil
	}
	return nil, &NotLoadedError{edge: "user_comments"}
}

// UserCompletesOrErr returns the UserCompletes value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserCompletesOrErr() ([]*Complete, error) {
	if e.loadedTypes[2] {
		return e.UserCompletes, nil
	}
	return nil, &NotLoadedError{edge: "user_completes"}
}

// UserDeliversOrErr returns the UserDelivers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserDeliversOrErr() ([]*Deliver, error) {
	if e.loadedTypes[3] {
		return e.UserDelivers, nil
	}
	return nil, &NotLoadedError{edge: "user_delivers"}
}

// UserLikesOrErr returns the UserLikes value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserLikesOrErr() ([]*Like, error) {
	if e.loadedTypes[4] {
		return e.UserLikes, nil
	}
	return nil, &NotLoadedError{edge: "user_likes"}
}

// UserMessagesOrErr returns the UserMessages value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserMessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[5] {
		return e.UserMessages, nil
	}
	return nil, &NotLoadedError{edge: "user_messages"}
}

// UserOrdersOrErr returns the UserOrders value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserOrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[6] {
		return e.UserOrders, nil
	}
	return nil, &NotLoadedError{edge: "user_orders"}
}

// UserRoomsOrErr returns the UserRooms value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserRoomsOrErr() ([]*RoomUser, error) {
	if e.loadedTypes[7] {
		return e.UserRooms, nil
	}
	return nil, &NotLoadedError{edge: "user_rooms"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldNotified, user.FieldLinePay, user.FieldFb:
			values[i] = new(sql.NullBool)
		case user.FieldPickupNum:
			values[i] = new(sql.NullFloat64)
		case user.FieldDeliveredOrderCountLimit:
			values[i] = new(sql.NullInt64)
		case user.FieldID, user.FieldUsername, user.FieldDisplayName, user.FieldPictureURL, user.FieldRole, user.FieldStatus, user.FieldComment:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = new(string)
				*u.Username = value.String
			}
		case user.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				u.DisplayName = new(string)
				*u.DisplayName = value.String
			}
		case user.FieldPictureURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture_url", values[i])
			} else if value.Valid {
				u.PictureURL = new(string)
				*u.PictureURL = value.String
			}
		case user.FieldPickupNum:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pickup_num", values[i])
			} else if value.Valid {
				u.PickupNum = new(float64)
				*u.PickupNum = value.Float64
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = new(user.Role)
				*u.Role = user.Role(value.String)
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = new(user.Status)
				*u.Status = user.Status(value.String)
			}
		case user.FieldNotified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field notified", values[i])
			} else if value.Valid {
				u.Notified = new(bool)
				*u.Notified = value.Bool
			}
		case user.FieldLinePay:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field line_pay", values[i])
			} else if value.Valid {
				u.LinePay = new(bool)
				*u.LinePay = value.Bool
			}
		case user.FieldFb:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field fb", values[i])
			} else if value.Valid {
				u.Fb = new(bool)
				*u.Fb = value.Bool
			}
		case user.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				u.Comment = new(string)
				*u.Comment = value.String
			}
		case user.FieldDeliveredOrderCountLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delivered_order_count_limit", values[i])
			} else if value.Valid {
				u.DeliveredOrderCountLimit = new(int)
				*u.DeliveredOrderCountLimit = int(value.Int64)
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = new(time.Time)
				*u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = new(time.Time)
				*u.UpdatedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryPosts queries the "posts" edge of the User entity.
func (u *User) QueryPosts() *PostQuery {
	return NewUserClient(u.config).QueryPosts(u)
}

// QueryUserComments queries the "user_comments" edge of the User entity.
func (u *User) QueryUserComments() *CommentQuery {
	return NewUserClient(u.config).QueryUserComments(u)
}

// QueryUserCompletes queries the "user_completes" edge of the User entity.
func (u *User) QueryUserCompletes() *CompleteQuery {
	return NewUserClient(u.config).QueryUserCompletes(u)
}

// QueryUserDelivers queries the "user_delivers" edge of the User entity.
func (u *User) QueryUserDelivers() *DeliverQuery {
	return NewUserClient(u.config).QueryUserDelivers(u)
}

// QueryUserLikes queries the "user_likes" edge of the User entity.
func (u *User) QueryUserLikes() *LikeQuery {
	return NewUserClient(u.config).QueryUserLikes(u)
}

// QueryUserMessages queries the "user_messages" edge of the User entity.
func (u *User) QueryUserMessages() *MessageQuery {
	return NewUserClient(u.config).QueryUserMessages(u)
}

// QueryUserOrders queries the "user_orders" edge of the User entity.
func (u *User) QueryUserOrders() *OrderQuery {
	return NewUserClient(u.config).QueryUserOrders(u)
}

// QueryUserRooms queries the "user_rooms" edge of the User entity.
func (u *User) QueryUserRooms() *RoomUserQuery {
	return NewUserClient(u.config).QueryUserRooms(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	if v := u.Username; v != nil {
		builder.WriteString("username=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.DisplayName; v != nil {
		builder.WriteString("display_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.PictureURL; v != nil {
		builder.WriteString("picture_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.PickupNum; v != nil {
		builder.WriteString("pickup_num=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := u.Role; v != nil {
		builder.WriteString("role=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := u.Status; v != nil {
		builder.WriteString("status=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := u.Notified; v != nil {
		builder.WriteString("notified=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := u.LinePay; v != nil {
		builder.WriteString("line_pay=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := u.Fb; v != nil {
		builder.WriteString("fb=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := u.Comment; v != nil {
		builder.WriteString("comment=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.DeliveredOrderCountLimit; v != nil {
		builder.WriteString("delivered_order_count_limit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := u.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (u *User) MarshalJSON() ([]byte, error) {
	type Alias User
	return json.Marshal(&struct {
		*Alias
		UserEdges
	}{
		Alias:     (*Alias)(u),
		UserEdges: u.Edges,
	})
}

// Users is a parsable slice of User.
type Users []*User
