// Code generated by ent, DO NOT EDIT.

package notify

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/billc-dev/tuango-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Notify {
	return predicate.Notify(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Notify {
	return predicate.Notify(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldUserID, v))
}

// LineToken applies equality check predicate on the "line_token" field. It's identical to LineTokenEQ.
func LineToken(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldLineToken, v))
}

// FbToken applies equality check predicate on the "fb_token" field. It's identical to FbTokenEQ.
func FbToken(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldFbToken, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContainsFold(FieldUserID, v))
}

// LineTokenEQ applies the EQ predicate on the "line_token" field.
func LineTokenEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldLineToken, v))
}

// LineTokenNEQ applies the NEQ predicate on the "line_token" field.
func LineTokenNEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldLineToken, v))
}

// LineTokenIn applies the In predicate on the "line_token" field.
func LineTokenIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldLineToken, vs...))
}

// LineTokenNotIn applies the NotIn predicate on the "line_token" field.
func LineTokenNotIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldLineToken, vs...))
}

// LineTokenGT applies the GT predicate on the "line_token" field.
func LineTokenGT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldLineToken, v))
}

// LineTokenGTE applies the GTE predicate on the "line_token" field.
func LineTokenGTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldLineToken, v))
}

// LineTokenLT applies the LT predicate on the "line_token" field.
func LineTokenLT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldLineToken, v))
}

// LineTokenLTE applies the LTE predicate on the "line_token" field.
func LineTokenLTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldLineToken, v))
}

// LineTokenContains applies the Contains predicate on the "line_token" field.
func LineTokenContains(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContains(FieldLineToken, v))
}

// LineTokenHasPrefix applies the HasPrefix predicate on the "line_token" field.
func LineTokenHasPrefix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasPrefix(FieldLineToken, v))
}

// LineTokenHasSuffix applies the HasSuffix predicate on the "line_token" field.
func LineTokenHasSuffix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasSuffix(FieldLineToken, v))
}

// LineTokenEqualFold applies the EqualFold predicate on the "line_token" field.
func LineTokenEqualFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEqualFold(FieldLineToken, v))
}

// LineTokenContainsFold applies the ContainsFold predicate on the "line_token" field.
func LineTokenContainsFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContainsFold(FieldLineToken, v))
}

// FbTokenEQ applies the EQ predicate on the "fb_token" field.
func FbTokenEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldFbToken, v))
}

// FbTokenNEQ applies the NEQ predicate on the "fb_token" field.
func FbTokenNEQ(v string) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldFbToken, v))
}

// FbTokenIn applies the In predicate on the "fb_token" field.
func FbTokenIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldFbToken, vs...))
}

// FbTokenNotIn applies the NotIn predicate on the "fb_token" field.
func FbTokenNotIn(vs ...string) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldFbToken, vs...))
}

// FbTokenGT applies the GT predicate on the "fb_token" field.
func FbTokenGT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldFbToken, v))
}

// FbTokenGTE applies the GTE predicate on the "fb_token" field.
func FbTokenGTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldFbToken, v))
}

// FbTokenLT applies the LT predicate on the "fb_token" field.
func FbTokenLT(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldFbToken, v))
}

// FbTokenLTE applies the LTE predicate on the "fb_token" field.
func FbTokenLTE(v string) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldFbToken, v))
}

// FbTokenContains applies the Contains predicate on the "fb_token" field.
func FbTokenContains(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContains(FieldFbToken, v))
}

// FbTokenHasPrefix applies the HasPrefix predicate on the "fb_token" field.
func FbTokenHasPrefix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasPrefix(FieldFbToken, v))
}

// FbTokenHasSuffix applies the HasSuffix predicate on the "fb_token" field.
func FbTokenHasSuffix(v string) predicate.Notify {
	return predicate.Notify(sql.FieldHasSuffix(FieldFbToken, v))
}

// FbTokenEqualFold applies the EqualFold predicate on the "fb_token" field.
func FbTokenEqualFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldEqualFold(FieldFbToken, v))
}

// FbTokenContainsFold applies the ContainsFold predicate on the "fb_token" field.
func FbTokenContainsFold(v string) predicate.Notify {
	return predicate.Notify(sql.FieldContainsFold(FieldFbToken, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Notify {
	return predicate.Notify(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Notify) predicate.Notify {
	return predicate.Notify(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Notify) predicate.Notify {
	return predicate.Notify(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Notify) predicate.Notify {
	return predicate.Notify(sql.NotPredicates(p))
}
