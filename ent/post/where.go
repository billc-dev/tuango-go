// Code generated by ent, DO NOT EDIT.

package post

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/billc-dev/tuango-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldID, id))
}

// SellerID applies equality check predicate on the "seller_id" field. It's identical to SellerIDEQ.
func SellerID(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldSellerID, v))
}

// PostNum applies equality check predicate on the "post_num" field. It's identical to PostNumEQ.
func PostNum(v int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldPostNum, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldBody, v))
}

// Deadline applies equality check predicate on the "deadline" field. It's identical to DeadlineEQ.
func Deadline(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDeadline, v))
}

// DeliveryDate applies equality check predicate on the "delivery_date" field. It's identical to DeliveryDateEQ.
func DeliveryDate(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDeliveryDate, v))
}

// LikeCount applies equality check predicate on the "like_count" field. It's identical to LikeCountEQ.
func LikeCount(v int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldLikeCount, v))
}

// CommentCount applies equality check predicate on the "comment_count" field. It's identical to CommentCountEQ.
func CommentCount(v int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCommentCount, v))
}

// OrderCount applies equality check predicate on the "order_count" field. It's identical to OrderCountEQ.
func OrderCount(v int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldOrderCount, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldComment, v))
}

// Delivered applies equality check predicate on the "delivered" field. It's identical to DeliveredEQ.
func Delivered(v bool) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDelivered, v))
}

// IsInStock applies equality check predicate on the "is_in_stock" field. It's identical to IsInStockEQ.
func IsInStock(v bool) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldIsInStock, v))
}

// NormalTotal applies equality check predicate on the "normal_total" field. It's identical to NormalTotalEQ.
func NormalTotal(v float64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldNormalTotal, v))
}

// NormalFee applies equality check predicate on the "normal_fee" field. It's identical to NormalFeeEQ.
func NormalFee(v float64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldNormalFee, v))
}

// ExtraTotal applies equality check predicate on the "extra_total" field. It's identical to ExtraTotalEQ.
func ExtraTotal(v float64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldExtraTotal, v))
}

// ExtraFee applies equality check predicate on the "extra_fee" field. It's identical to ExtraFeeEQ.
func ExtraFee(v float64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldExtraFee, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUpdatedAt, v))
}

// SellerIDEQ applies the EQ predicate on the "seller_id" field.
func SellerIDEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldSellerID, v))
}

// SellerIDNEQ applies the NEQ predicate on the "seller_id" field.
func SellerIDNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldSellerID, v))
}

// SellerIDIn applies the In predicate on the "seller_id" field.
func SellerIDIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldSellerID, vs...))
}

// SellerIDNotIn applies the NotIn predicate on the "seller_id" field.
func SellerIDNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldSellerID, vs...))
}

// SellerIDGT applies the GT predicate on the "seller_id" field.
func SellerIDGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldSellerID, v))
}

// SellerIDGTE applies the GTE predicate on the "seller_id" field.
func SellerIDGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldSellerID, v))
}

// SellerIDLT applies the LT predicate on the "seller_id" field.
func SellerIDLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldSellerID, v))
}

// SellerIDLTE applies the LTE predicate on the "seller_id" field.
func SellerIDLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldSellerID, v))
}

// SellerIDContains applies the Contains predicate on the "seller_id" field.
func SellerIDContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldSellerID, v))
}

// SellerIDHasPrefix applies the HasPrefix predicate on the "seller_id" field.
func SellerIDHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldSellerID, v))
}

// SellerIDHasSuffix applies the HasSuffix predicate on the "seller_id" field.
func SellerIDHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldSellerID, v))
}

// SellerIDEqualFold applies the EqualFold predicate on the "seller_id" field.
func SellerIDEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldSellerID, v))
}

// SellerIDContainsFold applies the ContainsFold predicate on the "seller_id" field.
func SellerIDContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldSellerID, v))
}

// PostNumEQ applies the EQ predicate on the "post_num" field.
func PostNumEQ(v int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldPostNum, v))
}

// PostNumNEQ applies the NEQ predicate on the "post_num" field.
func PostNumNEQ(v int) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldPostNum, v))
}

// PostNumIn applies the In predicate on the "post_num" field.
func PostNumIn(vs ...int) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldPostNum, vs...))
}

// PostNumNotIn applies the NotIn predicate on the "post_num" field.
func PostNumNotIn(vs ...int) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldPostNum, vs...))
}

// PostNumGT applies the GT predicate on the "post_num" field.
func PostNumGT(v int) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldPostNum, v))
}

// PostNumGTE applies the GTE predicate on the "post_num" field.
func PostNumGTE(v int) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldPostNum, v))
}

// PostNumLT applies the LT predicate on the "post_num" field.
func PostNumLT(v int) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldPostNum, v))
}

// PostNumLTE applies the LTE predicate on the "post_num" field.
func PostNumLTE(v int) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldPostNum, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldTitle, v))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldBody, v))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldBody, v))
}

// DeadlineEQ applies the EQ predicate on the "deadline" field.
func DeadlineEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDeadline, v))
}

// DeadlineNEQ applies the NEQ predicate on the "deadline" field.
func DeadlineNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldDeadline, v))
}

// DeadlineIn applies the In predicate on the "deadline" field.
func DeadlineIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldDeadline, vs...))
}

// DeadlineNotIn applies the NotIn predicate on the "deadline" field.
func DeadlineNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldDeadline, vs...))
}

// DeadlineGT applies the GT predicate on the "deadline" field.
func DeadlineGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldDeadline, v))
}

// DeadlineGTE applies the GTE predicate on the "deadline" field.
func DeadlineGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldDeadline, v))
}

// DeadlineLT applies the LT predicate on the "deadline" field.
func DeadlineLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldDeadline, v))
}

// DeadlineLTE applies the LTE predicate on the "deadline" field.
func DeadlineLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldDeadline, v))
}

// DeadlineContains applies the Contains predicate on the "deadline" field.
func DeadlineContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldDeadline, v))
}

// DeadlineHasPrefix applies the HasPrefix predicate on the "deadline" field.
func DeadlineHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldDeadline, v))
}

// DeadlineHasSuffix applies the HasSuffix predicate on the "deadline" field.
func DeadlineHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldDeadline, v))
}

// DeadlineEqualFold applies the EqualFold predicate on the "deadline" field.
func DeadlineEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldDeadline, v))
}

// DeadlineContainsFold applies the ContainsFold predicate on the "deadline" field.
func DeadlineContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldDeadline, v))
}

// DeliveryDateEQ applies the EQ predicate on the "delivery_date" field.
func DeliveryDateEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDeliveryDate, v))
}

// DeliveryDateNEQ applies the NEQ predicate on the "delivery_date" field.
func DeliveryDateNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldDeliveryDate, v))
}

// DeliveryDateIn applies the In predicate on the "delivery_date" field.
func DeliveryDateIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldDeliveryDate, vs...))
}

// DeliveryDateNotIn applies the NotIn predicate on the "delivery_date" field.
func DeliveryDateNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldDeliveryDate, vs...))
}

// DeliveryDateGT applies the GT predicate on the "delivery_date" field.
func DeliveryDateGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldDeliveryDate, v))
}

// DeliveryDateGTE applies the GTE predicate on the "delivery_date" field.
func DeliveryDateGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldDeliveryDate, v))
}

// DeliveryDateLT applies the LT predicate on the "delivery_date" field.
func DeliveryDateLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldDeliveryDate, v))
}

// DeliveryDateLTE applies the LTE predicate on the "delivery_date" field.
func DeliveryDateLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldDeliveryDate, v))
}

// DeliveryDateContains applies the Contains predicate on the "delivery_date" field.
func DeliveryDateContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldDeliveryDate, v))
}

// DeliveryDateHasPrefix applies the HasPrefix predicate on the "delivery_date" field.
func DeliveryDateHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldDeliveryDate, v))
}

// DeliveryDateHasSuffix applies the HasSuffix predicate on the "delivery_date" field.
func DeliveryDateHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldDeliveryDate, v))
}

// DeliveryDateEqualFold applies the EqualFold predicate on the "delivery_date" field.
func DeliveryDateEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldDeliveryDate, v))
}

// DeliveryDateContainsFold applies the ContainsFold predicate on the "delivery_date" field.
func DeliveryDateContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldDeliveryDate, v))
}

// LikeCountEQ applies the EQ predicate on the "like_count" field.
func LikeCountEQ(v int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldLikeCount, v))
}

// LikeCountNEQ applies the NEQ predicate on the "like_count" field.
func LikeCountNEQ(v int) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldLikeCount, v))
}

// LikeCountIn applies the In predicate on the "like_count" field.
func LikeCountIn(vs ...int) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldLikeCount, vs...))
}

// LikeCountNotIn applies the NotIn predicate on the "like_count" field.
func LikeCountNotIn(vs ...int) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldLikeCount, vs...))
}

// LikeCountGT applies the GT predicate on the "like_count" field.
func LikeCountGT(v int) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldLikeCount, v))
}

// LikeCountGTE applies the GTE predicate on the "like_count" field.
func LikeCountGTE(v int) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldLikeCount, v))
}

// LikeCountLT applies the LT predicate on the "like_count" field.
func LikeCountLT(v int) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldLikeCount, v))
}

// LikeCountLTE applies the LTE predicate on the "like_count" field.
func LikeCountLTE(v int) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldLikeCount, v))
}

// CommentCountEQ applies the EQ predicate on the "comment_count" field.
func CommentCountEQ(v int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCommentCount, v))
}

// CommentCountNEQ applies the NEQ predicate on the "comment_count" field.
func CommentCountNEQ(v int) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldCommentCount, v))
}

// CommentCountIn applies the In predicate on the "comment_count" field.
func CommentCountIn(vs ...int) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldCommentCount, vs...))
}

// CommentCountNotIn applies the NotIn predicate on the "comment_count" field.
func CommentCountNotIn(vs ...int) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldCommentCount, vs...))
}

// CommentCountGT applies the GT predicate on the "comment_count" field.
func CommentCountGT(v int) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldCommentCount, v))
}

// CommentCountGTE applies the GTE predicate on the "comment_count" field.
func CommentCountGTE(v int) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldCommentCount, v))
}

// CommentCountLT applies the LT predicate on the "comment_count" field.
func CommentCountLT(v int) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldCommentCount, v))
}

// CommentCountLTE applies the LTE predicate on the "comment_count" field.
func CommentCountLTE(v int) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldCommentCount, v))
}

// OrderCountEQ applies the EQ predicate on the "order_count" field.
func OrderCountEQ(v int) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldOrderCount, v))
}

// OrderCountNEQ applies the NEQ predicate on the "order_count" field.
func OrderCountNEQ(v int) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldOrderCount, v))
}

// OrderCountIn applies the In predicate on the "order_count" field.
func OrderCountIn(vs ...int) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldOrderCount, vs...))
}

// OrderCountNotIn applies the NotIn predicate on the "order_count" field.
func OrderCountNotIn(vs ...int) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldOrderCount, vs...))
}

// OrderCountGT applies the GT predicate on the "order_count" field.
func OrderCountGT(v int) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldOrderCount, v))
}

// OrderCountGTE applies the GTE predicate on the "order_count" field.
func OrderCountGTE(v int) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldOrderCount, v))
}

// OrderCountLT applies the LT predicate on the "order_count" field.
func OrderCountLT(v int) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldOrderCount, v))
}

// OrderCountLTE applies the LTE predicate on the "order_count" field.
func OrderCountLTE(v int) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldOrderCount, v))
}

// StorageTypeEQ applies the EQ predicate on the "storage_type" field.
func StorageTypeEQ(v StorageType) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldStorageType, v))
}

// StorageTypeNEQ applies the NEQ predicate on the "storage_type" field.
func StorageTypeNEQ(v StorageType) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldStorageType, v))
}

// StorageTypeIn applies the In predicate on the "storage_type" field.
func StorageTypeIn(vs ...StorageType) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldStorageType, vs...))
}

// StorageTypeNotIn applies the NotIn predicate on the "storage_type" field.
func StorageTypeNotIn(vs ...StorageType) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldStorageType, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldStatus, vs...))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldComment, v))
}

// DeliveredEQ applies the EQ predicate on the "delivered" field.
func DeliveredEQ(v bool) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDelivered, v))
}

// DeliveredNEQ applies the NEQ predicate on the "delivered" field.
func DeliveredNEQ(v bool) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldDelivered, v))
}

// IsInStockEQ applies the EQ predicate on the "is_in_stock" field.
func IsInStockEQ(v bool) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldIsInStock, v))
}

// IsInStockNEQ applies the NEQ predicate on the "is_in_stock" field.
func IsInStockNEQ(v bool) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldIsInStock, v))
}

// NormalTotalEQ applies the EQ predicate on the "normal_total" field.
func NormalTotalEQ(v float64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldNormalTotal, v))
}

// NormalTotalNEQ applies the NEQ predicate on the "normal_total" field.
func NormalTotalNEQ(v float64) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldNormalTotal, v))
}

// NormalTotalIn applies the In predicate on the "normal_total" field.
func NormalTotalIn(vs ...float64) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldNormalTotal, vs...))
}

// NormalTotalNotIn applies the NotIn predicate on the "normal_total" field.
func NormalTotalNotIn(vs ...float64) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldNormalTotal, vs...))
}

// NormalTotalGT applies the GT predicate on the "normal_total" field.
func NormalTotalGT(v float64) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldNormalTotal, v))
}

// NormalTotalGTE applies the GTE predicate on the "normal_total" field.
func NormalTotalGTE(v float64) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldNormalTotal, v))
}

// NormalTotalLT applies the LT predicate on the "normal_total" field.
func NormalTotalLT(v float64) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldNormalTotal, v))
}

// NormalTotalLTE applies the LTE predicate on the "normal_total" field.
func NormalTotalLTE(v float64) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldNormalTotal, v))
}

// NormalFeeEQ applies the EQ predicate on the "normal_fee" field.
func NormalFeeEQ(v float64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldNormalFee, v))
}

// NormalFeeNEQ applies the NEQ predicate on the "normal_fee" field.
func NormalFeeNEQ(v float64) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldNormalFee, v))
}

// NormalFeeIn applies the In predicate on the "normal_fee" field.
func NormalFeeIn(vs ...float64) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldNormalFee, vs...))
}

// NormalFeeNotIn applies the NotIn predicate on the "normal_fee" field.
func NormalFeeNotIn(vs ...float64) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldNormalFee, vs...))
}

// NormalFeeGT applies the GT predicate on the "normal_fee" field.
func NormalFeeGT(v float64) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldNormalFee, v))
}

// NormalFeeGTE applies the GTE predicate on the "normal_fee" field.
func NormalFeeGTE(v float64) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldNormalFee, v))
}

// NormalFeeLT applies the LT predicate on the "normal_fee" field.
func NormalFeeLT(v float64) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldNormalFee, v))
}

// NormalFeeLTE applies the LTE predicate on the "normal_fee" field.
func NormalFeeLTE(v float64) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldNormalFee, v))
}

// ExtraTotalEQ applies the EQ predicate on the "extra_total" field.
func ExtraTotalEQ(v float64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldExtraTotal, v))
}

// ExtraTotalNEQ applies the NEQ predicate on the "extra_total" field.
func ExtraTotalNEQ(v float64) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldExtraTotal, v))
}

// ExtraTotalIn applies the In predicate on the "extra_total" field.
func ExtraTotalIn(vs ...float64) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldExtraTotal, vs...))
}

// ExtraTotalNotIn applies the NotIn predicate on the "extra_total" field.
func ExtraTotalNotIn(vs ...float64) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldExtraTotal, vs...))
}

// ExtraTotalGT applies the GT predicate on the "extra_total" field.
func ExtraTotalGT(v float64) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldExtraTotal, v))
}

// ExtraTotalGTE applies the GTE predicate on the "extra_total" field.
func ExtraTotalGTE(v float64) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldExtraTotal, v))
}

// ExtraTotalLT applies the LT predicate on the "extra_total" field.
func ExtraTotalLT(v float64) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldExtraTotal, v))
}

// ExtraTotalLTE applies the LTE predicate on the "extra_total" field.
func ExtraTotalLTE(v float64) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldExtraTotal, v))
}

// ExtraFeeEQ applies the EQ predicate on the "extra_fee" field.
func ExtraFeeEQ(v float64) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldExtraFee, v))
}

// ExtraFeeNEQ applies the NEQ predicate on the "extra_fee" field.
func ExtraFeeNEQ(v float64) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldExtraFee, v))
}

// ExtraFeeIn applies the In predicate on the "extra_fee" field.
func ExtraFeeIn(vs ...float64) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldExtraFee, vs...))
}

// ExtraFeeNotIn applies the NotIn predicate on the "extra_fee" field.
func ExtraFeeNotIn(vs ...float64) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldExtraFee, vs...))
}

// ExtraFeeGT applies the GT predicate on the "extra_fee" field.
func ExtraFeeGT(v float64) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldExtraFee, v))
}

// ExtraFeeGTE applies the GTE predicate on the "extra_fee" field.
func ExtraFeeGTE(v float64) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldExtraFee, v))
}

// ExtraFeeLT applies the LT predicate on the "extra_fee" field.
func ExtraFeeLT(v float64) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldExtraFee, v))
}

// ExtraFeeLTE applies the LTE predicate on the "extra_fee" field.
func ExtraFeeLTE(v float64) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldExtraFee, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasSeller applies the HasEdge predicate on the "seller" edge.
func HasSeller() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SellerTable, SellerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSellerWith applies the HasEdge predicate on the "seller" edge with a given conditions (other predicates).
func HasSellerWith(preds ...predicate.User) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newSellerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPostComments applies the HasEdge predicate on the "post_comments" edge.
func HasPostComments() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostCommentsTable, PostCommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostCommentsWith applies the HasEdge predicate on the "post_comments" edge with a given conditions (other predicates).
func HasPostCommentsWith(preds ...predicate.Comment) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newPostCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPostDelivers applies the HasEdge predicate on the "post_delivers" edge.
func HasPostDelivers() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostDeliversTable, PostDeliversColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostDeliversWith applies the HasEdge predicate on the "post_delivers" edge with a given conditions (other predicates).
func HasPostDeliversWith(preds ...predicate.Deliver) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newPostDeliversStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPostItems applies the HasEdge predicate on the "post_items" edge.
func HasPostItems() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostItemsTable, PostItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostItemsWith applies the HasEdge predicate on the "post_items" edge with a given conditions (other predicates).
func HasPostItemsWith(preds ...predicate.PostItem) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newPostItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPostLikes applies the HasEdge predicate on the "post_likes" edge.
func HasPostLikes() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostLikesTable, PostLikesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostLikesWith applies the HasEdge predicate on the "post_likes" edge with a given conditions (other predicates).
func HasPostLikesWith(preds ...predicate.Like) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newPostLikesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPostOrders applies the HasEdge predicate on the "post_orders" edge.
func HasPostOrders() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostOrdersTable, PostOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostOrdersWith applies the HasEdge predicate on the "post_orders" edge with a given conditions (other predicates).
func HasPostOrdersWith(preds ...predicate.Order) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newPostOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Post) predicate.Post {
	return predicate.Post(sql.NotPredicates(p))
}
