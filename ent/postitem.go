// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/billc-dev/tuango-go/ent/post"
	"github.com/billc-dev/tuango-go/ent/postitem"
)

// PostItem is the model entity for the PostItem schema.
type PostItem struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID *string `json:"post_id,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier *string `json:"identifier,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Price holds the value of the "price" field.
	Price *float64 `json:"price,omitempty"`
	// Stock holds the value of the "stock" field.
	Stock *float64 `json:"stock,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostItemQuery when eager-loading is set.
	Edges        PostItemEdges `json:"-"`
	selectValues sql.SelectValues
}

// PostItemEdges holds the relations/edges for other nodes in the graph.
type PostItemEdges struct {
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// PostItem holds the value of the post_item edge.
	PostItem []*OrderItem `json:"post_item,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostItemEdges) PostOrErr() (*Post, error) {
	if e.loadedTypes[0] {
		if e.Post == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: post.Label}
		}
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// PostItemOrErr returns the PostItem value or an error if the edge
// was not loaded in eager-loading.
func (e PostItemEdges) PostItemOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[1] {
		return e.PostItem, nil
	}
	return nil, &NotLoadedError{edge: "post_item"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PostItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case postitem.FieldPrice, postitem.FieldStock:
			values[i] = new(sql.NullFloat64)
		case postitem.FieldID, postitem.FieldPostID, postitem.FieldIdentifier, postitem.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PostItem fields.
func (pi *PostItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case postitem.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pi.ID = value.String
			}
		case postitem.FieldPostID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value.Valid {
				pi.PostID = new(string)
				*pi.PostID = value.String
			}
		case postitem.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				pi.Identifier = new(string)
				*pi.Identifier = value.String
			}
		case postitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pi.Name = new(string)
				*pi.Name = value.String
			}
		case postitem.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pi.Price = new(float64)
				*pi.Price = value.Float64
			}
		case postitem.FieldStock:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field stock", values[i])
			} else if value.Valid {
				pi.Stock = new(float64)
				*pi.Stock = value.Float64
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PostItem.
// This includes values selected through modifiers, order, etc.
func (pi *PostItem) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryPost queries the "post" edge of the PostItem entity.
func (pi *PostItem) QueryPost() *PostQuery {
	return NewPostItemClient(pi.config).QueryPost(pi)
}

// QueryPostItem queries the "post_item" edge of the PostItem entity.
func (pi *PostItem) QueryPostItem() *OrderItemQuery {
	return NewPostItemClient(pi.config).QueryPostItem(pi)
}

// Update returns a builder for updating this PostItem.
// Note that you need to call PostItem.Unwrap() before calling this method if this PostItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PostItem) Update() *PostItemUpdateOne {
	return NewPostItemClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the PostItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PostItem) Unwrap() *PostItem {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PostItem is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PostItem) String() string {
	var builder strings.Builder
	builder.WriteString("PostItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	if v := pi.PostID; v != nil {
		builder.WriteString("post_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pi.Identifier; v != nil {
		builder.WriteString("identifier=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pi.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pi.Price; v != nil {
		builder.WriteString("price=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pi.Stock; v != nil {
		builder.WriteString("stock=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (pi *PostItem) MarshalJSON() ([]byte, error) {
	type Alias PostItem
	return json.Marshal(&struct {
		*Alias
		PostItemEdges
	}{
		Alias:         (*Alias)(pi),
		PostItemEdges: pi.Edges,
	})
}

// PostItems is a parsable slice of PostItem.
type PostItems []*PostItem
