// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldPictureURL holds the string denoting the picture_url field in the database.
	FieldPictureURL = "picture_url"
	// FieldPickupNum holds the string denoting the pickup_num field in the database.
	FieldPickupNum = "pickup_num"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNotified holds the string denoting the notified field in the database.
	FieldNotified = "notified"
	// FieldLinePay holds the string denoting the line_pay field in the database.
	FieldLinePay = "line_pay"
	// FieldFb holds the string denoting the fb field in the database.
	FieldFb = "fb"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldDeliveredOrderCountLimit holds the string denoting the delivered_order_count_limit field in the database.
	FieldDeliveredOrderCountLimit = "delivered_order_count_limit"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePosts holds the string denoting the posts edge name in mutations.
	EdgePosts = "posts"
	// EdgeUserComments holds the string denoting the user_comments edge name in mutations.
	EdgeUserComments = "user_comments"
	// EdgeUserCompletes holds the string denoting the user_completes edge name in mutations.
	EdgeUserCompletes = "user_completes"
	// EdgeUserDelivers holds the string denoting the user_delivers edge name in mutations.
	EdgeUserDelivers = "user_delivers"
	// EdgeUserLikes holds the string denoting the user_likes edge name in mutations.
	EdgeUserLikes = "user_likes"
	// EdgeUserMessages holds the string denoting the user_messages edge name in mutations.
	EdgeUserMessages = "user_messages"
	// EdgeUserOrders holds the string denoting the user_orders edge name in mutations.
	EdgeUserOrders = "user_orders"
	// EdgeUserRooms holds the string denoting the user_rooms edge name in mutations.
	EdgeUserRooms = "user_rooms"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PostsTable is the table that holds the posts relation/edge.
	PostsTable = "posts"
	// PostsInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	PostsInverseTable = "posts"
	// PostsColumn is the table column denoting the posts relation/edge.
	PostsColumn = "seller_id"
	// UserCommentsTable is the table that holds the user_comments relation/edge.
	UserCommentsTable = "comments"
	// UserCommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	UserCommentsInverseTable = "comments"
	// UserCommentsColumn is the table column denoting the user_comments relation/edge.
	UserCommentsColumn = "user_id"
	// UserCompletesTable is the table that holds the user_completes relation/edge.
	UserCompletesTable = "completes"
	// UserCompletesInverseTable is the table name for the Complete entity.
	// It exists in this package in order to avoid circular dependency with the "complete" package.
	UserCompletesInverseTable = "completes"
	// UserCompletesColumn is the table column denoting the user_completes relation/edge.
	UserCompletesColumn = "user_id"
	// UserDeliversTable is the table that holds the user_delivers relation/edge.
	UserDeliversTable = "delivers"
	// UserDeliversInverseTable is the table name for the Deliver entity.
	// It exists in this package in order to avoid circular dependency with the "deliver" package.
	UserDeliversInverseTable = "delivers"
	// UserDeliversColumn is the table column denoting the user_delivers relation/edge.
	UserDeliversColumn = "user_id"
	// UserLikesTable is the table that holds the user_likes relation/edge.
	UserLikesTable = "likes"
	// UserLikesInverseTable is the table name for the Like entity.
	// It exists in this package in order to avoid circular dependency with the "like" package.
	UserLikesInverseTable = "likes"
	// UserLikesColumn is the table column denoting the user_likes relation/edge.
	UserLikesColumn = "user_id"
	// UserMessagesTable is the table that holds the user_messages relation/edge.
	UserMessagesTable = "messages"
	// UserMessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	UserMessagesInverseTable = "messages"
	// UserMessagesColumn is the table column denoting the user_messages relation/edge.
	UserMessagesColumn = "user_id"
	// UserOrdersTable is the table that holds the user_orders relation/edge.
	UserOrdersTable = "orders"
	// UserOrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	UserOrdersInverseTable = "orders"
	// UserOrdersColumn is the table column denoting the user_orders relation/edge.
	UserOrdersColumn = "user_id"
	// UserRoomsTable is the table that holds the user_rooms relation/edge.
	UserRoomsTable = "room_users"
	// UserRoomsInverseTable is the table name for the RoomUser entity.
	// It exists in this package in order to avoid circular dependency with the "roomuser" package.
	UserRoomsInverseTable = "room_users"
	// UserRoomsColumn is the table column denoting the user_rooms relation/edge.
	UserRoomsColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldDisplayName,
	FieldPictureURL,
	FieldPickupNum,
	FieldRole,
	FieldStatus,
	FieldNotified,
	FieldLinePay,
	FieldFb,
	FieldComment,
	FieldDeliveredOrderCountLimit,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultNotified holds the default value on creation for the "notified" field.
	DefaultNotified bool
	// DefaultLinePay holds the default value on creation for the "line_pay" field.
	DefaultLinePay bool
	// DefaultFb holds the default value on creation for the "fb" field.
	DefaultFb bool
	// DefaultComment holds the default value on creation for the "comment" field.
	DefaultComment string
	// DefaultDeliveredOrderCountLimit holds the default value on creation for the "delivered_order_count_limit" field.
	DefaultDeliveredOrderCountLimit int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// Role defines the type for the "role" enum field.
type Role string

// RoleBasic is the default value of the Role enum.
const DefaultRole = RoleBasic

// Role values.
const (
	RoleBasic  Role = "basic"
	RoleSeller Role = "seller"
	RoleAdmin  Role = "admin"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleBasic, RoleSeller, RoleAdmin:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusRegistered is the default value of the Status enum.
const DefaultStatus = StatusRegistered

// Status values.
const (
	StatusRegistered Status = "registered"
	StatusApproved   Status = "approved"
	StatusBlocked    Status = "blocked"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusRegistered, StatusApproved, StatusBlocked:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByPictureURL orders the results by the picture_url field.
func ByPictureURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPictureURL, opts...).ToFunc()
}

// ByPickupNum orders the results by the pickup_num field.
func ByPickupNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPickupNum, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByNotified orders the results by the notified field.
func ByNotified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotified, opts...).ToFunc()
}

// ByLinePay orders the results by the line_pay field.
func ByLinePay(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLinePay, opts...).ToFunc()
}

// ByFb orders the results by the fb field.
func ByFb(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFb, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByDeliveredOrderCountLimit orders the results by the delivered_order_count_limit field.
func ByDeliveredOrderCountLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeliveredOrderCountLimit, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPostsCount orders the results by posts count.
func ByPostsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPostsStep(), opts...)
	}
}

// ByPosts orders the results by posts terms.
func ByPosts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserCommentsCount orders the results by user_comments count.
func ByUserCommentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserCommentsStep(), opts...)
	}
}

// ByUserComments orders the results by user_comments terms.
func ByUserComments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserCommentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserCompletesCount orders the results by user_completes count.
func ByUserCompletesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserCompletesStep(), opts...)
	}
}

// ByUserCompletes orders the results by user_completes terms.
func ByUserCompletes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserCompletesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserDeliversCount orders the results by user_delivers count.
func ByUserDeliversCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserDeliversStep(), opts...)
	}
}

// ByUserDelivers orders the results by user_delivers terms.
func ByUserDelivers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserDeliversStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserLikesCount orders the results by user_likes count.
func ByUserLikesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserLikesStep(), opts...)
	}
}

// ByUserLikes orders the results by user_likes terms.
func ByUserLikes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserLikesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserMessagesCount orders the results by user_messages count.
func ByUserMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserMessagesStep(), opts...)
	}
}

// ByUserMessages orders the results by user_messages terms.
func ByUserMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserOrdersCount orders the results by user_orders count.
func ByUserOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserOrdersStep(), opts...)
	}
}

// ByUserOrders orders the results by user_orders terms.
func ByUserOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserRoomsCount orders the results by user_rooms count.
func ByUserRoomsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserRoomsStep(), opts...)
	}
}

// ByUserRooms orders the results by user_rooms terms.
func ByUserRooms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserRoomsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPostsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
	)
}
func newUserCommentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserCommentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserCommentsTable, UserCommentsColumn),
	)
}
func newUserCompletesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserCompletesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserCompletesTable, UserCompletesColumn),
	)
}
func newUserDeliversStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserDeliversInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserDeliversTable, UserDeliversColumn),
	)
}
func newUserLikesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserLikesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserLikesTable, UserLikesColumn),
	)
}
func newUserMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserMessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserMessagesTable, UserMessagesColumn),
	)
}
func newUserOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserOrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserOrdersTable, UserOrdersColumn),
	)
}
func newUserRoomsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserRoomsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserRoomsTable, UserRoomsColumn),
	)
}
