// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/billc-dev/tuango-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDisplayName, v))
}

// PictureURL applies equality check predicate on the "picture_url" field. It's identical to PictureURLEQ.
func PictureURL(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPictureURL, v))
}

// PickupNum applies equality check predicate on the "pickup_num" field. It's identical to PickupNumEQ.
func PickupNum(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPickupNum, v))
}

// Notified applies equality check predicate on the "notified" field. It's identical to NotifiedEQ.
func Notified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNotified, v))
}

// LinePay applies equality check predicate on the "line_pay" field. It's identical to LinePayEQ.
func LinePay(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLinePay, v))
}

// Fb applies equality check predicate on the "fb" field. It's identical to FbEQ.
func Fb(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFb, v))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldComment, v))
}

// DeliveredOrderCountLimit applies equality check predicate on the "delivered_order_count_limit" field. It's identical to DeliveredOrderCountLimitEQ.
func DeliveredOrderCountLimit(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeliveredOrderCountLimit, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDisplayName, v))
}

// PictureURLEQ applies the EQ predicate on the "picture_url" field.
func PictureURLEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPictureURL, v))
}

// PictureURLNEQ applies the NEQ predicate on the "picture_url" field.
func PictureURLNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPictureURL, v))
}

// PictureURLIn applies the In predicate on the "picture_url" field.
func PictureURLIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPictureURL, vs...))
}

// PictureURLNotIn applies the NotIn predicate on the "picture_url" field.
func PictureURLNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPictureURL, vs...))
}

// PictureURLGT applies the GT predicate on the "picture_url" field.
func PictureURLGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPictureURL, v))
}

// PictureURLGTE applies the GTE predicate on the "picture_url" field.
func PictureURLGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPictureURL, v))
}

// PictureURLLT applies the LT predicate on the "picture_url" field.
func PictureURLLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPictureURL, v))
}

// PictureURLLTE applies the LTE predicate on the "picture_url" field.
func PictureURLLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPictureURL, v))
}

// PictureURLContains applies the Contains predicate on the "picture_url" field.
func PictureURLContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPictureURL, v))
}

// PictureURLHasPrefix applies the HasPrefix predicate on the "picture_url" field.
func PictureURLHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPictureURL, v))
}

// PictureURLHasSuffix applies the HasSuffix predicate on the "picture_url" field.
func PictureURLHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPictureURL, v))
}

// PictureURLEqualFold applies the EqualFold predicate on the "picture_url" field.
func PictureURLEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPictureURL, v))
}

// PictureURLContainsFold applies the ContainsFold predicate on the "picture_url" field.
func PictureURLContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPictureURL, v))
}

// PickupNumEQ applies the EQ predicate on the "pickup_num" field.
func PickupNumEQ(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPickupNum, v))
}

// PickupNumNEQ applies the NEQ predicate on the "pickup_num" field.
func PickupNumNEQ(v float64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPickupNum, v))
}

// PickupNumIn applies the In predicate on the "pickup_num" field.
func PickupNumIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldIn(FieldPickupNum, vs...))
}

// PickupNumNotIn applies the NotIn predicate on the "pickup_num" field.
func PickupNumNotIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPickupNum, vs...))
}

// PickupNumGT applies the GT predicate on the "pickup_num" field.
func PickupNumGT(v float64) predicate.User {
	return predicate.User(sql.FieldGT(FieldPickupNum, v))
}

// PickupNumGTE applies the GTE predicate on the "pickup_num" field.
func PickupNumGTE(v float64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPickupNum, v))
}

// PickupNumLT applies the LT predicate on the "pickup_num" field.
func PickupNumLT(v float64) predicate.User {
	return predicate.User(sql.FieldLT(FieldPickupNum, v))
}

// PickupNumLTE applies the LTE predicate on the "pickup_num" field.
func PickupNumLTE(v float64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPickupNum, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.User {
	return predicate.User(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRole, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.User {
	return predicate.User(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.User {
	return predicate.User(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldStatus, vs...))
}

// NotifiedEQ applies the EQ predicate on the "notified" field.
func NotifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNotified, v))
}

// NotifiedNEQ applies the NEQ predicate on the "notified" field.
func NotifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNotified, v))
}

// LinePayEQ applies the EQ predicate on the "line_pay" field.
func LinePayEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLinePay, v))
}

// LinePayNEQ applies the NEQ predicate on the "line_pay" field.
func LinePayNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLinePay, v))
}

// FbEQ applies the EQ predicate on the "fb" field.
func FbEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFb, v))
}

// FbNEQ applies the NEQ predicate on the "fb" field.
func FbNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFb, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldComment, v))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldComment, v))
}

// DeliveredOrderCountLimitEQ applies the EQ predicate on the "delivered_order_count_limit" field.
func DeliveredOrderCountLimitEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeliveredOrderCountLimit, v))
}

// DeliveredOrderCountLimitNEQ applies the NEQ predicate on the "delivered_order_count_limit" field.
func DeliveredOrderCountLimitNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeliveredOrderCountLimit, v))
}

// DeliveredOrderCountLimitIn applies the In predicate on the "delivered_order_count_limit" field.
func DeliveredOrderCountLimitIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeliveredOrderCountLimit, vs...))
}

// DeliveredOrderCountLimitNotIn applies the NotIn predicate on the "delivered_order_count_limit" field.
func DeliveredOrderCountLimitNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeliveredOrderCountLimit, vs...))
}

// DeliveredOrderCountLimitGT applies the GT predicate on the "delivered_order_count_limit" field.
func DeliveredOrderCountLimitGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeliveredOrderCountLimit, v))
}

// DeliveredOrderCountLimitGTE applies the GTE predicate on the "delivered_order_count_limit" field.
func DeliveredOrderCountLimitGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeliveredOrderCountLimit, v))
}

// DeliveredOrderCountLimitLT applies the LT predicate on the "delivered_order_count_limit" field.
func DeliveredOrderCountLimitLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeliveredOrderCountLimit, v))
}

// DeliveredOrderCountLimitLTE applies the LTE predicate on the "delivered_order_count_limit" field.
func DeliveredOrderCountLimitLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeliveredOrderCountLimit, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasPosts applies the HasEdge predicate on the "posts" edge.
func HasPosts() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PostsTable, PostsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPostsWith applies the HasEdge predicate on the "posts" edge with a given conditions (other predicates).
func HasPostsWith(preds ...predicate.Post) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPostsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserComments applies the HasEdge predicate on the "user_comments" edge.
func HasUserComments() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserCommentsTable, UserCommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserCommentsWith applies the HasEdge predicate on the "user_comments" edge with a given conditions (other predicates).
func HasUserCommentsWith(preds ...predicate.Comment) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserCommentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserCompletes applies the HasEdge predicate on the "user_completes" edge.
func HasUserCompletes() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserCompletesTable, UserCompletesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserCompletesWith applies the HasEdge predicate on the "user_completes" edge with a given conditions (other predicates).
func HasUserCompletesWith(preds ...predicate.Complete) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserCompletesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserDelivers applies the HasEdge predicate on the "user_delivers" edge.
func HasUserDelivers() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserDeliversTable, UserDeliversColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserDeliversWith applies the HasEdge predicate on the "user_delivers" edge with a given conditions (other predicates).
func HasUserDeliversWith(preds ...predicate.Deliver) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserDeliversStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserLikes applies the HasEdge predicate on the "user_likes" edge.
func HasUserLikes() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserLikesTable, UserLikesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserLikesWith applies the HasEdge predicate on the "user_likes" edge with a given conditions (other predicates).
func HasUserLikesWith(preds ...predicate.Like) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserLikesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserMessages applies the HasEdge predicate on the "user_messages" edge.
func HasUserMessages() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserMessagesTable, UserMessagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserMessagesWith applies the HasEdge predicate on the "user_messages" edge with a given conditions (other predicates).
func HasUserMessagesWith(preds ...predicate.Message) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserMessagesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserOrders applies the HasEdge predicate on the "user_orders" edge.
func HasUserOrders() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserOrdersTable, UserOrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserOrdersWith applies the HasEdge predicate on the "user_orders" edge with a given conditions (other predicates).
func HasUserOrdersWith(preds ...predicate.Order) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserRooms applies the HasEdge predicate on the "user_rooms" edge.
func HasUserRooms() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserRoomsTable, UserRoomsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserRoomsWith applies the HasEdge predicate on the "user_rooms" edge with a given conditions (other predicates).
func HasUserRoomsWith(preds ...predicate.RoomUser) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newUserRoomsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
