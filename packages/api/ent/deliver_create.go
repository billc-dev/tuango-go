// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/billc-dev/tuango-go/ent/deliver"
	"github.com/billc-dev/tuango-go/ent/post"
	"github.com/billc-dev/tuango-go/ent/schema"
	"github.com/billc-dev/tuango-go/ent/user"
)

// DeliverCreate is the builder for creating a Deliver entity.
type DeliverCreate struct {
	config
	mutation *DeliverMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (dc *DeliverCreate) SetUserID(s string) *DeliverCreate {
	dc.mutation.SetUserID(s)
	return dc
}

// SetPostID sets the "post_id" field.
func (dc *DeliverCreate) SetPostID(s string) *DeliverCreate {
	dc.mutation.SetPostID(s)
	return dc
}

// SetNormalOrders sets the "normal_orders" field.
func (dc *DeliverCreate) SetNormalOrders(so []schema.DeliverOrder) *DeliverCreate {
	dc.mutation.SetNormalOrders(so)
	return dc
}

// SetExtraOrders sets the "extra_orders" field.
func (dc *DeliverCreate) SetExtraOrders(so []schema.DeliverOrder) *DeliverCreate {
	dc.mutation.SetExtraOrders(so)
	return dc
}

// SetNormalTotal sets the "normal_total" field.
func (dc *DeliverCreate) SetNormalTotal(f float64) *DeliverCreate {
	dc.mutation.SetNormalTotal(f)
	return dc
}

// SetNillableNormalTotal sets the "normal_total" field if the given value is not nil.
func (dc *DeliverCreate) SetNillableNormalTotal(f *float64) *DeliverCreate {
	if f != nil {
		dc.SetNormalTotal(*f)
	}
	return dc
}

// SetNormalFee sets the "normal_fee" field.
func (dc *DeliverCreate) SetNormalFee(f float64) *DeliverCreate {
	dc.mutation.SetNormalFee(f)
	return dc
}

// SetNillableNormalFee sets the "normal_fee" field if the given value is not nil.
func (dc *DeliverCreate) SetNillableNormalFee(f *float64) *DeliverCreate {
	if f != nil {
		dc.SetNormalFee(*f)
	}
	return dc
}

// SetExtraTotal sets the "extra_total" field.
func (dc *DeliverCreate) SetExtraTotal(f float64) *DeliverCreate {
	dc.mutation.SetExtraTotal(f)
	return dc
}

// SetNillableExtraTotal sets the "extra_total" field if the given value is not nil.
func (dc *DeliverCreate) SetNillableExtraTotal(f *float64) *DeliverCreate {
	if f != nil {
		dc.SetExtraTotal(*f)
	}
	return dc
}

// SetExtraFee sets the "extra_fee" field.
func (dc *DeliverCreate) SetExtraFee(f float64) *DeliverCreate {
	dc.mutation.SetExtraFee(f)
	return dc
}

// SetNillableExtraFee sets the "extra_fee" field if the given value is not nil.
func (dc *DeliverCreate) SetNillableExtraFee(f *float64) *DeliverCreate {
	if f != nil {
		dc.SetExtraFee(*f)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DeliverCreate) SetCreatedAt(t time.Time) *DeliverCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DeliverCreate) SetNillableCreatedAt(t *time.Time) *DeliverCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DeliverCreate) SetUpdatedAt(t time.Time) *DeliverCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DeliverCreate) SetNillableUpdatedAt(t *time.Time) *DeliverCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DeliverCreate) SetID(s string) *DeliverCreate {
	dc.mutation.SetID(s)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DeliverCreate) SetNillableID(s *string) *DeliverCreate {
	if s != nil {
		dc.SetID(*s)
	}
	return dc
}

// SetUser sets the "user" edge to the User entity.
func (dc *DeliverCreate) SetUser(u *User) *DeliverCreate {
	return dc.SetUserID(u.ID)
}

// SetPost sets the "post" edge to the Post entity.
func (dc *DeliverCreate) SetPost(p *Post) *DeliverCreate {
	return dc.SetPostID(p.ID)
}

// Mutation returns the DeliverMutation object of the builder.
func (dc *DeliverCreate) Mutation() *DeliverMutation {
	return dc.mutation
}

// Save creates the Deliver in the database.
func (dc *DeliverCreate) Save(ctx context.Context) (*Deliver, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeliverCreate) SaveX(ctx context.Context) *Deliver {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DeliverCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DeliverCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DeliverCreate) defaults() {
	if _, ok := dc.mutation.NormalTotal(); !ok {
		v := deliver.DefaultNormalTotal
		dc.mutation.SetNormalTotal(v)
	}
	if _, ok := dc.mutation.NormalFee(); !ok {
		v := deliver.DefaultNormalFee
		dc.mutation.SetNormalFee(v)
	}
	if _, ok := dc.mutation.ExtraTotal(); !ok {
		v := deliver.DefaultExtraTotal
		dc.mutation.SetExtraTotal(v)
	}
	if _, ok := dc.mutation.ExtraFee(); !ok {
		v := deliver.DefaultExtraFee
		dc.mutation.SetExtraFee(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := deliver.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := deliver.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := deliver.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DeliverCreate) check() error {
	if _, ok := dc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Deliver.user_id"`)}
	}
	if _, ok := dc.mutation.PostID(); !ok {
		return &ValidationError{Name: "post_id", err: errors.New(`ent: missing required field "Deliver.post_id"`)}
	}
	if _, ok := dc.mutation.NormalOrders(); !ok {
		return &ValidationError{Name: "normal_orders", err: errors.New(`ent: missing required field "Deliver.normal_orders"`)}
	}
	if _, ok := dc.mutation.ExtraOrders(); !ok {
		return &ValidationError{Name: "extra_orders", err: errors.New(`ent: missing required field "Deliver.extra_orders"`)}
	}
	if _, ok := dc.mutation.NormalTotal(); !ok {
		return &ValidationError{Name: "normal_total", err: errors.New(`ent: missing required field "Deliver.normal_total"`)}
	}
	if _, ok := dc.mutation.NormalFee(); !ok {
		return &ValidationError{Name: "normal_fee", err: errors.New(`ent: missing required field "Deliver.normal_fee"`)}
	}
	if _, ok := dc.mutation.ExtraTotal(); !ok {
		return &ValidationError{Name: "extra_total", err: errors.New(`ent: missing required field "Deliver.extra_total"`)}
	}
	if _, ok := dc.mutation.ExtraFee(); !ok {
		return &ValidationError{Name: "extra_fee", err: errors.New(`ent: missing required field "Deliver.extra_fee"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Deliver.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Deliver.updated_at"`)}
	}
	if _, ok := dc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Deliver.user"`)}
	}
	if _, ok := dc.mutation.PostID(); !ok {
		return &ValidationError{Name: "post", err: errors.New(`ent: missing required edge "Deliver.post"`)}
	}
	return nil
}

func (dc *DeliverCreate) sqlSave(ctx context.Context) (*Deliver, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Deliver.ID type: %T", _spec.ID.Value)
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DeliverCreate) createSpec() (*Deliver, *sqlgraph.CreateSpec) {
	var (
		_node = &Deliver{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(deliver.Table, sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.NormalOrders(); ok {
		_spec.SetField(deliver.FieldNormalOrders, field.TypeJSON, value)
		_node.NormalOrders = value
	}
	if value, ok := dc.mutation.ExtraOrders(); ok {
		_spec.SetField(deliver.FieldExtraOrders, field.TypeJSON, value)
		_node.ExtraOrders = value
	}
	if value, ok := dc.mutation.NormalTotal(); ok {
		_spec.SetField(deliver.FieldNormalTotal, field.TypeFloat64, value)
		_node.NormalTotal = &value
	}
	if value, ok := dc.mutation.NormalFee(); ok {
		_spec.SetField(deliver.FieldNormalFee, field.TypeFloat64, value)
		_node.NormalFee = &value
	}
	if value, ok := dc.mutation.ExtraTotal(); ok {
		_spec.SetField(deliver.FieldExtraTotal, field.TypeFloat64, value)
		_node.ExtraTotal = &value
	}
	if value, ok := dc.mutation.ExtraFee(); ok {
		_spec.SetField(deliver.FieldExtraFee, field.TypeFloat64, value)
		_node.ExtraFee = &value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(deliver.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(deliver.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if nodes := dc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliver.UserTable,
			Columns: []string{deliver.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deliver.PostTable,
			Columns: []string{deliver.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PostID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeliverCreateBulk is the builder for creating many Deliver entities in bulk.
type DeliverCreateBulk struct {
	config
	err      error
	builders []*DeliverCreate
}

// Save creates the Deliver entities in the database.
func (dcb *DeliverCreateBulk) Save(ctx context.Context) ([]*Deliver, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Deliver, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeliverMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DeliverCreateBulk) SaveX(ctx context.Context) []*Deliver {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DeliverCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DeliverCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
