// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/billc-dev/tuango-go/ent/notify"
)

// NotifyCreate is the builder for creating a Notify entity.
type NotifyCreate struct {
	config
	mutation *NotifyMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (nc *NotifyCreate) SetUserID(s string) *NotifyCreate {
	nc.mutation.SetUserID(s)
	return nc
}

// SetLineToken sets the "line_token" field.
func (nc *NotifyCreate) SetLineToken(s string) *NotifyCreate {
	nc.mutation.SetLineToken(s)
	return nc
}

// SetFbToken sets the "fb_token" field.
func (nc *NotifyCreate) SetFbToken(s string) *NotifyCreate {
	nc.mutation.SetFbToken(s)
	return nc
}

// SetCreatedAt sets the "created_at" field.
func (nc *NotifyCreate) SetCreatedAt(t time.Time) *NotifyCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NotifyCreate) SetNillableCreatedAt(t *time.Time) *NotifyCreate {
	if t != nil {
		nc.SetCreatedAt(*t)
	}
	return nc
}

// SetUpdatedAt sets the "updated_at" field.
func (nc *NotifyCreate) SetUpdatedAt(t time.Time) *NotifyCreate {
	nc.mutation.SetUpdatedAt(t)
	return nc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nc *NotifyCreate) SetNillableUpdatedAt(t *time.Time) *NotifyCreate {
	if t != nil {
		nc.SetUpdatedAt(*t)
	}
	return nc
}

// SetID sets the "id" field.
func (nc *NotifyCreate) SetID(s string) *NotifyCreate {
	nc.mutation.SetID(s)
	return nc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nc *NotifyCreate) SetNillableID(s *string) *NotifyCreate {
	if s != nil {
		nc.SetID(*s)
	}
	return nc
}

// Mutation returns the NotifyMutation object of the builder.
func (nc *NotifyCreate) Mutation() *NotifyMutation {
	return nc.mutation
}

// Save creates the Notify in the database.
func (nc *NotifyCreate) Save(ctx context.Context) (*Notify, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NotifyCreate) SaveX(ctx context.Context) *Notify {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NotifyCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NotifyCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NotifyCreate) defaults() {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		v := notify.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		v := notify.DefaultUpdatedAt()
		nc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nc.mutation.ID(); !ok {
		v := notify.DefaultID()
		nc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NotifyCreate) check() error {
	if _, ok := nc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Notify.user_id"`)}
	}
	if _, ok := nc.mutation.LineToken(); !ok {
		return &ValidationError{Name: "line_token", err: errors.New(`ent: missing required field "Notify.line_token"`)}
	}
	if _, ok := nc.mutation.FbToken(); !ok {
		return &ValidationError{Name: "fb_token", err: errors.New(`ent: missing required field "Notify.fb_token"`)}
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Notify.created_at"`)}
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Notify.updated_at"`)}
	}
	return nil
}

func (nc *NotifyCreate) sqlSave(ctx context.Context) (*Notify, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Notify.ID type: %T", _spec.ID.Value)
		}
	}
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NotifyCreate) createSpec() (*Notify, *sqlgraph.CreateSpec) {
	var (
		_node = &Notify{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(notify.Table, sqlgraph.NewFieldSpec(notify.FieldID, field.TypeString))
	)
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.UserID(); ok {
		_spec.SetField(notify.FieldUserID, field.TypeString, value)
		_node.UserID = &value
	}
	if value, ok := nc.mutation.LineToken(); ok {
		_spec.SetField(notify.FieldLineToken, field.TypeString, value)
		_node.LineToken = &value
	}
	if value, ok := nc.mutation.FbToken(); ok {
		_spec.SetField(notify.FieldFbToken, field.TypeString, value)
		_node.FbToken = &value
	}
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.SetField(notify.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := nc.mutation.UpdatedAt(); ok {
		_spec.SetField(notify.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	return _node, _spec
}

// NotifyCreateBulk is the builder for creating many Notify entities in bulk.
type NotifyCreateBulk struct {
	config
	err      error
	builders []*NotifyCreate
}

// Save creates the Notify entities in the database.
func (ncb *NotifyCreateBulk) Save(ctx context.Context) ([]*Notify, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Notify, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotifyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NotifyCreateBulk) SaveX(ctx context.Context) []*Notify {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NotifyCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NotifyCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
