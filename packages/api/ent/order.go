// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/billc-dev/tuango-go/ent/order"
	"github.com/billc-dev/tuango-go/ent/post"
	"github.com/billc-dev/tuango-go/ent/user"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID *string `json:"user_id,omitempty"`
	// PostID holds the value of the "post_id" field.
	PostID *string `json:"post_id,omitempty"`
	// OrderNum holds the value of the "order_num" field.
	OrderNum *int `json:"order_num,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment *string `json:"comment,omitempty"`
	// SellerComment holds the value of the "seller_comment" field.
	SellerComment *string `json:"seller_comment,omitempty"`
	// HasName holds the value of the "has_name" field.
	HasName *bool `json:"has_name,omitempty"`
	// IsExtra holds the value of the "is_extra" field.
	IsExtra *bool `json:"is_extra,omitempty"`
	// Fb holds the value of the "fb" field.
	Fb *bool `json:"fb,omitempty"`
	// IsInStock holds the value of the "is_in_stock" field.
	IsInStock *bool `json:"is_in_stock,omitempty"`
	// Status holds the value of the "status" field.
	Status *order.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges        OrderEdges `json:"-"`
	selectValues sql.SelectValues
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Post holds the value of the post edge.
	Post *Post `json:"post,omitempty"`
	// OrderItems holds the value of the order_items edge.
	OrderItems []*OrderItem `json:"order_items,omitempty"`
	// OrderHistories holds the value of the order_histories edge.
	OrderHistories []*OrderHistory `json:"order_histories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) PostOrErr() (*Post, error) {
	if e.loadedTypes[1] {
		if e.Post == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: post.Label}
		}
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// OrderItemsOrErr returns the OrderItems value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) OrderItemsOrErr() ([]*OrderItem, error) {
	if e.loadedTypes[2] {
		return e.OrderItems, nil
	}
	return nil, &NotLoadedError{edge: "order_items"}
}

// OrderHistoriesOrErr returns the OrderHistories value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) OrderHistoriesOrErr() ([]*OrderHistory, error) {
	if e.loadedTypes[3] {
		return e.OrderHistories, nil
	}
	return nil, &NotLoadedError{edge: "order_histories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldHasName, order.FieldIsExtra, order.FieldFb, order.FieldIsInStock:
			values[i] = new(sql.NullBool)
		case order.FieldOrderNum:
			values[i] = new(sql.NullInt64)
		case order.FieldID, order.FieldUserID, order.FieldPostID, order.FieldComment, order.FieldSellerComment, order.FieldStatus:
			values[i] = new(sql.NullString)
		case order.FieldCreatedAt, order.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				o.ID = value.String
			}
		case order.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				o.UserID = new(string)
				*o.UserID = value.String
			}
		case order.FieldPostID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_id", values[i])
			} else if value.Valid {
				o.PostID = new(string)
				*o.PostID = value.String
			}
		case order.FieldOrderNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_num", values[i])
			} else if value.Valid {
				o.OrderNum = new(int)
				*o.OrderNum = int(value.Int64)
			}
		case order.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				o.Comment = new(string)
				*o.Comment = value.String
			}
		case order.FieldSellerComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field seller_comment", values[i])
			} else if value.Valid {
				o.SellerComment = new(string)
				*o.SellerComment = value.String
			}
		case order.FieldHasName:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_name", values[i])
			} else if value.Valid {
				o.HasName = new(bool)
				*o.HasName = value.Bool
			}
		case order.FieldIsExtra:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_extra", values[i])
			} else if value.Valid {
				o.IsExtra = new(bool)
				*o.IsExtra = value.Bool
			}
		case order.FieldFb:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field fb", values[i])
			} else if value.Valid {
				o.Fb = new(bool)
				*o.Fb = value.Bool
			}
		case order.FieldIsInStock:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_in_stock", values[i])
			} else if value.Valid {
				o.IsInStock = new(bool)
				*o.IsInStock = value.Bool
			}
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = new(order.Status)
				*o.Status = order.Status(value.String)
			}
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = new(time.Time)
				*o.CreatedAt = value.Time
			}
		case order.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = new(time.Time)
				*o.UpdatedAt = value.Time
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Order.
// This includes values selected through modifiers, order, etc.
func (o *Order) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Order entity.
func (o *Order) QueryUser() *UserQuery {
	return NewOrderClient(o.config).QueryUser(o)
}

// QueryPost queries the "post" edge of the Order entity.
func (o *Order) QueryPost() *PostQuery {
	return NewOrderClient(o.config).QueryPost(o)
}

// QueryOrderItems queries the "order_items" edge of the Order entity.
func (o *Order) QueryOrderItems() *OrderItemQuery {
	return NewOrderClient(o.config).QueryOrderItems(o)
}

// QueryOrderHistories queries the "order_histories" edge of the Order entity.
func (o *Order) QueryOrderHistories() *OrderHistoryQuery {
	return NewOrderClient(o.config).QueryOrderHistories(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return NewOrderClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	if v := o.UserID; v != nil {
		builder.WriteString("user_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := o.PostID; v != nil {
		builder.WriteString("post_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := o.OrderNum; v != nil {
		builder.WriteString("order_num=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.Comment; v != nil {
		builder.WriteString("comment=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := o.SellerComment; v != nil {
		builder.WriteString("seller_comment=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := o.HasName; v != nil {
		builder.WriteString("has_name=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.IsExtra; v != nil {
		builder.WriteString("is_extra=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.Fb; v != nil {
		builder.WriteString("fb=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.IsInStock; v != nil {
		builder.WriteString("is_in_stock=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.Status; v != nil {
		builder.WriteString("status=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := o.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (o *Order) MarshalJSON() ([]byte, error) {
	type Alias Order
	return json.Marshal(&struct {
		*Alias
		OrderEdges
	}{
		Alias:      (*Alias)(o),
		OrderEdges: o.Edges,
	})
}

// Orders is a parsable slice of Order.
type Orders []*Order
