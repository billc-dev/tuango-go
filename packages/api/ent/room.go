// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/billc-dev/tuango-go/ent/room"
)

// Room is the model entity for the Room schema.
type Room struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type room.Type `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// LastMessage holds the value of the "last_message" field.
	LastMessage *string `json:"last_message,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomQuery when eager-loading is set.
	Edges        RoomEdges `json:"-"`
	selectValues sql.SelectValues
}

// RoomEdges holds the relations/edges for other nodes in the graph.
type RoomEdges struct {
	// RoomMessages holds the value of the room_messages edge.
	RoomMessages []*Message `json:"room_messages,omitempty"`
	// RoomUsers holds the value of the room_users edge.
	RoomUsers []*RoomUser `json:"room_users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoomMessagesOrErr returns the RoomMessages value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) RoomMessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[0] {
		return e.RoomMessages, nil
	}
	return nil, &NotLoadedError{edge: "room_messages"}
}

// RoomUsersOrErr returns the RoomUsers value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) RoomUsersOrErr() ([]*RoomUser, error) {
	if e.loadedTypes[1] {
		return e.RoomUsers, nil
	}
	return nil, &NotLoadedError{edge: "room_users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Room) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case room.FieldID, room.FieldType, room.FieldName, room.FieldLastMessage:
			values[i] = new(sql.NullString)
		case room.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Room fields.
func (r *Room) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case room.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case room.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = room.Type(value.String)
			}
		case room.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = new(string)
				*r.Name = value.String
			}
		case room.FieldLastMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_message", values[i])
			} else if value.Valid {
				r.LastMessage = new(string)
				*r.LastMessage = value.String
			}
		case room.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = new(time.Time)
				*r.UpdatedAt = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Room.
// This includes values selected through modifiers, order, etc.
func (r *Room) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryRoomMessages queries the "room_messages" edge of the Room entity.
func (r *Room) QueryRoomMessages() *MessageQuery {
	return NewRoomClient(r.config).QueryRoomMessages(r)
}

// QueryRoomUsers queries the "room_users" edge of the Room entity.
func (r *Room) QueryRoomUsers() *RoomUserQuery {
	return NewRoomClient(r.config).QueryRoomUsers(r)
}

// Update returns a builder for updating this Room.
// Note that you need to call Room.Unwrap() before calling this method if this Room
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Room) Update() *RoomUpdateOne {
	return NewRoomClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Room entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Room) Unwrap() *Room {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Room is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Room) String() string {
	var builder strings.Builder
	builder.WriteString("Room(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteString(", ")
	if v := r.Name; v != nil {
		builder.WriteString("name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := r.LastMessage; v != nil {
		builder.WriteString("last_message=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := r.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (r *Room) MarshalJSON() ([]byte, error) {
	type Alias Room
	return json.Marshal(&struct {
		*Alias
		RoomEdges
	}{
		Alias:     (*Alias)(r),
		RoomEdges: r.Edges,
	})
}

// Rooms is a parsable slice of Room.
type Rooms []*Room
