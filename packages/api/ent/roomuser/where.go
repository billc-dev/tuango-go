// Code generated by ent, DO NOT EDIT.

package roomuser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/billc-dev/tuango-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldContainsFold(FieldID, id))
}

// RoomID applies equality check predicate on the "room_id" field. It's identical to RoomIDEQ.
func RoomID(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldEQ(FieldRoomID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldEQ(FieldUserID, v))
}

// LastReadMessageID applies equality check predicate on the "last_read_message_id" field. It's identical to LastReadMessageIDEQ.
func LastReadMessageID(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldEQ(FieldLastReadMessageID, v))
}

// RoomIDEQ applies the EQ predicate on the "room_id" field.
func RoomIDEQ(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldEQ(FieldRoomID, v))
}

// RoomIDNEQ applies the NEQ predicate on the "room_id" field.
func RoomIDNEQ(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldNEQ(FieldRoomID, v))
}

// RoomIDIn applies the In predicate on the "room_id" field.
func RoomIDIn(vs ...string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldIn(FieldRoomID, vs...))
}

// RoomIDNotIn applies the NotIn predicate on the "room_id" field.
func RoomIDNotIn(vs ...string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldNotIn(FieldRoomID, vs...))
}

// RoomIDGT applies the GT predicate on the "room_id" field.
func RoomIDGT(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldGT(FieldRoomID, v))
}

// RoomIDGTE applies the GTE predicate on the "room_id" field.
func RoomIDGTE(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldGTE(FieldRoomID, v))
}

// RoomIDLT applies the LT predicate on the "room_id" field.
func RoomIDLT(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldLT(FieldRoomID, v))
}

// RoomIDLTE applies the LTE predicate on the "room_id" field.
func RoomIDLTE(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldLTE(FieldRoomID, v))
}

// RoomIDContains applies the Contains predicate on the "room_id" field.
func RoomIDContains(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldContains(FieldRoomID, v))
}

// RoomIDHasPrefix applies the HasPrefix predicate on the "room_id" field.
func RoomIDHasPrefix(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldHasPrefix(FieldRoomID, v))
}

// RoomIDHasSuffix applies the HasSuffix predicate on the "room_id" field.
func RoomIDHasSuffix(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldHasSuffix(FieldRoomID, v))
}

// RoomIDEqualFold applies the EqualFold predicate on the "room_id" field.
func RoomIDEqualFold(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldEqualFold(FieldRoomID, v))
}

// RoomIDContainsFold applies the ContainsFold predicate on the "room_id" field.
func RoomIDContainsFold(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldContainsFold(FieldRoomID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldContainsFold(FieldUserID, v))
}

// LastReadMessageIDEQ applies the EQ predicate on the "last_read_message_id" field.
func LastReadMessageIDEQ(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldEQ(FieldLastReadMessageID, v))
}

// LastReadMessageIDNEQ applies the NEQ predicate on the "last_read_message_id" field.
func LastReadMessageIDNEQ(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldNEQ(FieldLastReadMessageID, v))
}

// LastReadMessageIDIn applies the In predicate on the "last_read_message_id" field.
func LastReadMessageIDIn(vs ...string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldIn(FieldLastReadMessageID, vs...))
}

// LastReadMessageIDNotIn applies the NotIn predicate on the "last_read_message_id" field.
func LastReadMessageIDNotIn(vs ...string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldNotIn(FieldLastReadMessageID, vs...))
}

// LastReadMessageIDGT applies the GT predicate on the "last_read_message_id" field.
func LastReadMessageIDGT(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldGT(FieldLastReadMessageID, v))
}

// LastReadMessageIDGTE applies the GTE predicate on the "last_read_message_id" field.
func LastReadMessageIDGTE(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldGTE(FieldLastReadMessageID, v))
}

// LastReadMessageIDLT applies the LT predicate on the "last_read_message_id" field.
func LastReadMessageIDLT(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldLT(FieldLastReadMessageID, v))
}

// LastReadMessageIDLTE applies the LTE predicate on the "last_read_message_id" field.
func LastReadMessageIDLTE(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldLTE(FieldLastReadMessageID, v))
}

// LastReadMessageIDContains applies the Contains predicate on the "last_read_message_id" field.
func LastReadMessageIDContains(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldContains(FieldLastReadMessageID, v))
}

// LastReadMessageIDHasPrefix applies the HasPrefix predicate on the "last_read_message_id" field.
func LastReadMessageIDHasPrefix(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldHasPrefix(FieldLastReadMessageID, v))
}

// LastReadMessageIDHasSuffix applies the HasSuffix predicate on the "last_read_message_id" field.
func LastReadMessageIDHasSuffix(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldHasSuffix(FieldLastReadMessageID, v))
}

// LastReadMessageIDEqualFold applies the EqualFold predicate on the "last_read_message_id" field.
func LastReadMessageIDEqualFold(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldEqualFold(FieldLastReadMessageID, v))
}

// LastReadMessageIDContainsFold applies the ContainsFold predicate on the "last_read_message_id" field.
func LastReadMessageIDContainsFold(v string) predicate.RoomUser {
	return predicate.RoomUser(sql.FieldContainsFold(FieldLastReadMessageID, v))
}

// HasRoom applies the HasEdge predicate on the "room" edge.
func HasRoom() predicate.RoomUser {
	return predicate.RoomUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomWith applies the HasEdge predicate on the "room" edge with a given conditions (other predicates).
func HasRoomWith(preds ...predicate.Room) predicate.RoomUser {
	return predicate.RoomUser(func(s *sql.Selector) {
		step := newRoomStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.RoomUser {
	return predicate.RoomUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.RoomUser {
	return predicate.RoomUser(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RoomUser) predicate.RoomUser {
	return predicate.RoomUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RoomUser) predicate.RoomUser {
	return predicate.RoomUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RoomUser) predicate.RoomUser {
	return predicate.RoomUser(sql.NotPredicates(p))
}
