// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/billc-dev/tuango-go/ent/room"
	"github.com/billc-dev/tuango-go/ent/roomuser"
	"github.com/billc-dev/tuango-go/ent/user"
)

// RoomUserCreate is the builder for creating a RoomUser entity.
type RoomUserCreate struct {
	config
	mutation *RoomUserMutation
	hooks    []Hook
}

// SetRoomID sets the "room_id" field.
func (ruc *RoomUserCreate) SetRoomID(s string) *RoomUserCreate {
	ruc.mutation.SetRoomID(s)
	return ruc
}

// SetUserID sets the "user_id" field.
func (ruc *RoomUserCreate) SetUserID(s string) *RoomUserCreate {
	ruc.mutation.SetUserID(s)
	return ruc
}

// SetLastReadMessageID sets the "last_read_message_id" field.
func (ruc *RoomUserCreate) SetLastReadMessageID(s string) *RoomUserCreate {
	ruc.mutation.SetLastReadMessageID(s)
	return ruc
}

// SetID sets the "id" field.
func (ruc *RoomUserCreate) SetID(s string) *RoomUserCreate {
	ruc.mutation.SetID(s)
	return ruc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ruc *RoomUserCreate) SetNillableID(s *string) *RoomUserCreate {
	if s != nil {
		ruc.SetID(*s)
	}
	return ruc
}

// SetRoom sets the "room" edge to the Room entity.
func (ruc *RoomUserCreate) SetRoom(r *Room) *RoomUserCreate {
	return ruc.SetRoomID(r.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ruc *RoomUserCreate) SetUser(u *User) *RoomUserCreate {
	return ruc.SetUserID(u.ID)
}

// Mutation returns the RoomUserMutation object of the builder.
func (ruc *RoomUserCreate) Mutation() *RoomUserMutation {
	return ruc.mutation
}

// Save creates the RoomUser in the database.
func (ruc *RoomUserCreate) Save(ctx context.Context) (*RoomUser, error) {
	ruc.defaults()
	return withHooks(ctx, ruc.sqlSave, ruc.mutation, ruc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ruc *RoomUserCreate) SaveX(ctx context.Context) *RoomUser {
	v, err := ruc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ruc *RoomUserCreate) Exec(ctx context.Context) error {
	_, err := ruc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruc *RoomUserCreate) ExecX(ctx context.Context) {
	if err := ruc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruc *RoomUserCreate) defaults() {
	if _, ok := ruc.mutation.ID(); !ok {
		v := roomuser.DefaultID()
		ruc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruc *RoomUserCreate) check() error {
	if _, ok := ruc.mutation.RoomID(); !ok {
		return &ValidationError{Name: "room_id", err: errors.New(`ent: missing required field "RoomUser.room_id"`)}
	}
	if _, ok := ruc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "RoomUser.user_id"`)}
	}
	if _, ok := ruc.mutation.LastReadMessageID(); !ok {
		return &ValidationError{Name: "last_read_message_id", err: errors.New(`ent: missing required field "RoomUser.last_read_message_id"`)}
	}
	if _, ok := ruc.mutation.RoomID(); !ok {
		return &ValidationError{Name: "room", err: errors.New(`ent: missing required edge "RoomUser.room"`)}
	}
	if _, ok := ruc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "RoomUser.user"`)}
	}
	return nil
}

func (ruc *RoomUserCreate) sqlSave(ctx context.Context) (*RoomUser, error) {
	if err := ruc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ruc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ruc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RoomUser.ID type: %T", _spec.ID.Value)
		}
	}
	ruc.mutation.id = &_node.ID
	ruc.mutation.done = true
	return _node, nil
}

func (ruc *RoomUserCreate) createSpec() (*RoomUser, *sqlgraph.CreateSpec) {
	var (
		_node = &RoomUser{config: ruc.config}
		_spec = sqlgraph.NewCreateSpec(roomuser.Table, sqlgraph.NewFieldSpec(roomuser.FieldID, field.TypeString))
	)
	if id, ok := ruc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ruc.mutation.LastReadMessageID(); ok {
		_spec.SetField(roomuser.FieldLastReadMessageID, field.TypeString, value)
		_node.LastReadMessageID = &value
	}
	if nodes := ruc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.RoomTable,
			Columns: []string{roomuser.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoomID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ruc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuser.UserTable,
			Columns: []string{roomuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoomUserCreateBulk is the builder for creating many RoomUser entities in bulk.
type RoomUserCreateBulk struct {
	config
	builders []*RoomUserCreate
}

// Save creates the RoomUser entities in the database.
func (rucb *RoomUserCreateBulk) Save(ctx context.Context) ([]*RoomUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rucb.builders))
	nodes := make([]*RoomUser, len(rucb.builders))
	mutators := make([]Mutator, len(rucb.builders))
	for i := range rucb.builders {
		func(i int, root context.Context) {
			builder := rucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoomUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rucb *RoomUserCreateBulk) SaveX(ctx context.Context) []*RoomUser {
	v, err := rucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rucb *RoomUserCreateBulk) Exec(ctx context.Context) error {
	_, err := rucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rucb *RoomUserCreateBulk) ExecX(ctx context.Context) {
	if err := rucb.Exec(ctx); err != nil {
		panic(err)
	}
}
