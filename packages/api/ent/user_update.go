// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/billc-dev/tuango-go/ent/comment"
	"github.com/billc-dev/tuango-go/ent/complete"
	"github.com/billc-dev/tuango-go/ent/deliver"
	"github.com/billc-dev/tuango-go/ent/like"
	"github.com/billc-dev/tuango-go/ent/message"
	"github.com/billc-dev/tuango-go/ent/order"
	"github.com/billc-dev/tuango-go/ent/post"
	"github.com/billc-dev/tuango-go/ent/predicate"
	"github.com/billc-dev/tuango-go/ent/roomuser"
	"github.com/billc-dev/tuango-go/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetDisplayName sets the "display_name" field.
func (uu *UserUpdate) SetDisplayName(s string) *UserUpdate {
	uu.mutation.SetDisplayName(s)
	return uu
}

// SetPictureURL sets the "picture_url" field.
func (uu *UserUpdate) SetPictureURL(s string) *UserUpdate {
	uu.mutation.SetPictureURL(s)
	return uu
}

// SetPickupNum sets the "pickup_num" field.
func (uu *UserUpdate) SetPickupNum(f float64) *UserUpdate {
	uu.mutation.ResetPickupNum()
	uu.mutation.SetPickupNum(f)
	return uu
}

// AddPickupNum adds f to the "pickup_num" field.
func (uu *UserUpdate) AddPickupNum(f float64) *UserUpdate {
	uu.mutation.AddPickupNum(f)
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(u user.Role) *UserUpdate {
	uu.mutation.SetRole(u)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(u *user.Role) *UserUpdate {
	if u != nil {
		uu.SetRole(*u)
	}
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(u user.Status) *UserUpdate {
	uu.mutation.SetStatus(u)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(u *user.Status) *UserUpdate {
	if u != nil {
		uu.SetStatus(*u)
	}
	return uu
}

// SetNotified sets the "notified" field.
func (uu *UserUpdate) SetNotified(b bool) *UserUpdate {
	uu.mutation.SetNotified(b)
	return uu
}

// SetNillableNotified sets the "notified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableNotified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetNotified(*b)
	}
	return uu
}

// SetLinePay sets the "line_pay" field.
func (uu *UserUpdate) SetLinePay(b bool) *UserUpdate {
	uu.mutation.SetLinePay(b)
	return uu
}

// SetNillableLinePay sets the "line_pay" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLinePay(b *bool) *UserUpdate {
	if b != nil {
		uu.SetLinePay(*b)
	}
	return uu
}

// SetFb sets the "fb" field.
func (uu *UserUpdate) SetFb(b bool) *UserUpdate {
	uu.mutation.SetFb(b)
	return uu
}

// SetNillableFb sets the "fb" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFb(b *bool) *UserUpdate {
	if b != nil {
		uu.SetFb(*b)
	}
	return uu
}

// SetComment sets the "comment" field.
func (uu *UserUpdate) SetComment(s string) *UserUpdate {
	uu.mutation.SetComment(s)
	return uu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (uu *UserUpdate) SetNillableComment(s *string) *UserUpdate {
	if s != nil {
		uu.SetComment(*s)
	}
	return uu
}

// SetDeliveredOrderCountLimit sets the "delivered_order_count_limit" field.
func (uu *UserUpdate) SetDeliveredOrderCountLimit(i int) *UserUpdate {
	uu.mutation.ResetDeliveredOrderCountLimit()
	uu.mutation.SetDeliveredOrderCountLimit(i)
	return uu
}

// SetNillableDeliveredOrderCountLimit sets the "delivered_order_count_limit" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeliveredOrderCountLimit(i *int) *UserUpdate {
	if i != nil {
		uu.SetDeliveredOrderCountLimit(*i)
	}
	return uu
}

// AddDeliveredOrderCountLimit adds i to the "delivered_order_count_limit" field.
func (uu *UserUpdate) AddDeliveredOrderCountLimit(i int) *UserUpdate {
	uu.mutation.AddDeliveredOrderCountLimit(i)
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (uu *UserUpdate) AddPostIDs(ids ...string) *UserUpdate {
	uu.mutation.AddPostIDs(ids...)
	return uu
}

// AddPosts adds the "posts" edges to the Post entity.
func (uu *UserUpdate) AddPosts(p ...*Post) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPostIDs(ids...)
}

// AddUserCommentIDs adds the "user_comments" edge to the Comment entity by IDs.
func (uu *UserUpdate) AddUserCommentIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserCommentIDs(ids...)
	return uu
}

// AddUserComments adds the "user_comments" edges to the Comment entity.
func (uu *UserUpdate) AddUserComments(c ...*Comment) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddUserCommentIDs(ids...)
}

// AddUserCompleteIDs adds the "user_completes" edge to the Complete entity by IDs.
func (uu *UserUpdate) AddUserCompleteIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserCompleteIDs(ids...)
	return uu
}

// AddUserCompletes adds the "user_completes" edges to the Complete entity.
func (uu *UserUpdate) AddUserCompletes(c ...*Complete) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddUserCompleteIDs(ids...)
}

// AddUserDeliverIDs adds the "user_delivers" edge to the Deliver entity by IDs.
func (uu *UserUpdate) AddUserDeliverIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserDeliverIDs(ids...)
	return uu
}

// AddUserDelivers adds the "user_delivers" edges to the Deliver entity.
func (uu *UserUpdate) AddUserDelivers(d ...*Deliver) *UserUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddUserDeliverIDs(ids...)
}

// AddUserLikeIDs adds the "user_likes" edge to the Like entity by IDs.
func (uu *UserUpdate) AddUserLikeIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserLikeIDs(ids...)
	return uu
}

// AddUserLikes adds the "user_likes" edges to the Like entity.
func (uu *UserUpdate) AddUserLikes(l ...*Like) *UserUpdate {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.AddUserLikeIDs(ids...)
}

// AddUserMessageIDs adds the "user_messages" edge to the Message entity by IDs.
func (uu *UserUpdate) AddUserMessageIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserMessageIDs(ids...)
	return uu
}

// AddUserMessages adds the "user_messages" edges to the Message entity.
func (uu *UserUpdate) AddUserMessages(m ...*Message) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddUserMessageIDs(ids...)
}

// AddUserOrderIDs adds the "user_orders" edge to the Order entity by IDs.
func (uu *UserUpdate) AddUserOrderIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserOrderIDs(ids...)
	return uu
}

// AddUserOrders adds the "user_orders" edges to the Order entity.
func (uu *UserUpdate) AddUserOrders(o ...*Order) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddUserOrderIDs(ids...)
}

// AddUserRoomIDs adds the "user_rooms" edge to the RoomUser entity by IDs.
func (uu *UserUpdate) AddUserRoomIDs(ids ...string) *UserUpdate {
	uu.mutation.AddUserRoomIDs(ids...)
	return uu
}

// AddUserRooms adds the "user_rooms" edges to the RoomUser entity.
func (uu *UserUpdate) AddUserRooms(r ...*RoomUser) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddUserRoomIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (uu *UserUpdate) ClearPosts() *UserUpdate {
	uu.mutation.ClearPosts()
	return uu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (uu *UserUpdate) RemovePostIDs(ids ...string) *UserUpdate {
	uu.mutation.RemovePostIDs(ids...)
	return uu
}

// RemovePosts removes "posts" edges to Post entities.
func (uu *UserUpdate) RemovePosts(p ...*Post) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePostIDs(ids...)
}

// ClearUserComments clears all "user_comments" edges to the Comment entity.
func (uu *UserUpdate) ClearUserComments() *UserUpdate {
	uu.mutation.ClearUserComments()
	return uu
}

// RemoveUserCommentIDs removes the "user_comments" edge to Comment entities by IDs.
func (uu *UserUpdate) RemoveUserCommentIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserCommentIDs(ids...)
	return uu
}

// RemoveUserComments removes "user_comments" edges to Comment entities.
func (uu *UserUpdate) RemoveUserComments(c ...*Comment) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveUserCommentIDs(ids...)
}

// ClearUserCompletes clears all "user_completes" edges to the Complete entity.
func (uu *UserUpdate) ClearUserCompletes() *UserUpdate {
	uu.mutation.ClearUserCompletes()
	return uu
}

// RemoveUserCompleteIDs removes the "user_completes" edge to Complete entities by IDs.
func (uu *UserUpdate) RemoveUserCompleteIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserCompleteIDs(ids...)
	return uu
}

// RemoveUserCompletes removes "user_completes" edges to Complete entities.
func (uu *UserUpdate) RemoveUserCompletes(c ...*Complete) *UserUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveUserCompleteIDs(ids...)
}

// ClearUserDelivers clears all "user_delivers" edges to the Deliver entity.
func (uu *UserUpdate) ClearUserDelivers() *UserUpdate {
	uu.mutation.ClearUserDelivers()
	return uu
}

// RemoveUserDeliverIDs removes the "user_delivers" edge to Deliver entities by IDs.
func (uu *UserUpdate) RemoveUserDeliverIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserDeliverIDs(ids...)
	return uu
}

// RemoveUserDelivers removes "user_delivers" edges to Deliver entities.
func (uu *UserUpdate) RemoveUserDelivers(d ...*Deliver) *UserUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveUserDeliverIDs(ids...)
}

// ClearUserLikes clears all "user_likes" edges to the Like entity.
func (uu *UserUpdate) ClearUserLikes() *UserUpdate {
	uu.mutation.ClearUserLikes()
	return uu
}

// RemoveUserLikeIDs removes the "user_likes" edge to Like entities by IDs.
func (uu *UserUpdate) RemoveUserLikeIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserLikeIDs(ids...)
	return uu
}

// RemoveUserLikes removes "user_likes" edges to Like entities.
func (uu *UserUpdate) RemoveUserLikes(l ...*Like) *UserUpdate {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uu.RemoveUserLikeIDs(ids...)
}

// ClearUserMessages clears all "user_messages" edges to the Message entity.
func (uu *UserUpdate) ClearUserMessages() *UserUpdate {
	uu.mutation.ClearUserMessages()
	return uu
}

// RemoveUserMessageIDs removes the "user_messages" edge to Message entities by IDs.
func (uu *UserUpdate) RemoveUserMessageIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserMessageIDs(ids...)
	return uu
}

// RemoveUserMessages removes "user_messages" edges to Message entities.
func (uu *UserUpdate) RemoveUserMessages(m ...*Message) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveUserMessageIDs(ids...)
}

// ClearUserOrders clears all "user_orders" edges to the Order entity.
func (uu *UserUpdate) ClearUserOrders() *UserUpdate {
	uu.mutation.ClearUserOrders()
	return uu
}

// RemoveUserOrderIDs removes the "user_orders" edge to Order entities by IDs.
func (uu *UserUpdate) RemoveUserOrderIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserOrderIDs(ids...)
	return uu
}

// RemoveUserOrders removes "user_orders" edges to Order entities.
func (uu *UserUpdate) RemoveUserOrders(o ...*Order) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveUserOrderIDs(ids...)
}

// ClearUserRooms clears all "user_rooms" edges to the RoomUser entity.
func (uu *UserUpdate) ClearUserRooms() *UserUpdate {
	uu.mutation.ClearUserRooms()
	return uu
}

// RemoveUserRoomIDs removes the "user_rooms" edge to RoomUser entities by IDs.
func (uu *UserUpdate) RemoveUserRoomIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveUserRoomIDs(ids...)
	return uu
}

// RemoveUserRooms removes "user_rooms" edges to RoomUser entities.
func (uu *UserUpdate) RemoveUserRooms(r ...*RoomUser) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveUserRoomIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := uu.mutation.PictureURL(); ok {
		_spec.SetField(user.FieldPictureURL, field.TypeString, value)
	}
	if value, ok := uu.mutation.PickupNum(); ok {
		_spec.SetField(user.FieldPickupNum, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedPickupNum(); ok {
		_spec.AddField(user.FieldPickupNum, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Notified(); ok {
		_spec.SetField(user.FieldNotified, field.TypeBool, value)
	}
	if value, ok := uu.mutation.LinePay(); ok {
		_spec.SetField(user.FieldLinePay, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Fb(); ok {
		_spec.SetField(user.FieldFb, field.TypeBool, value)
	}
	if value, ok := uu.mutation.Comment(); ok {
		_spec.SetField(user.FieldComment, field.TypeString, value)
	}
	if value, ok := uu.mutation.DeliveredOrderCountLimit(); ok {
		_spec.SetField(user.FieldDeliveredOrderCountLimit, field.TypeInt, value)
	}
	if value, ok := uu.mutation.AddedDeliveredOrderCountLimit(); ok {
		_spec.AddField(user.FieldDeliveredOrderCountLimit, field.TypeInt, value)
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !uu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCommentsTable,
			Columns: []string{user.UserCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserCommentsIDs(); len(nodes) > 0 && !uu.mutation.UserCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCommentsTable,
			Columns: []string{user.UserCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCommentsTable,
			Columns: []string{user.UserCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserCompletesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCompletesTable,
			Columns: []string{user.UserCompletesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(complete.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserCompletesIDs(); len(nodes) > 0 && !uu.mutation.UserCompletesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCompletesTable,
			Columns: []string{user.UserCompletesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(complete.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserCompletesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCompletesTable,
			Columns: []string{user.UserCompletesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(complete.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserDeliversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserDeliversTable,
			Columns: []string{user.UserDeliversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserDeliversIDs(); len(nodes) > 0 && !uu.mutation.UserDeliversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserDeliversTable,
			Columns: []string{user.UserDeliversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserDeliversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserDeliversTable,
			Columns: []string{user.UserDeliversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserLikesTable,
			Columns: []string{user.UserLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserLikesIDs(); len(nodes) > 0 && !uu.mutation.UserLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserLikesTable,
			Columns: []string{user.UserLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserLikesTable,
			Columns: []string{user.UserLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMessagesTable,
			Columns: []string{user.UserMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserMessagesIDs(); len(nodes) > 0 && !uu.mutation.UserMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMessagesTable,
			Columns: []string{user.UserMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMessagesTable,
			Columns: []string{user.UserMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserOrdersTable,
			Columns: []string{user.UserOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserOrdersIDs(); len(nodes) > 0 && !uu.mutation.UserOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserOrdersTable,
			Columns: []string{user.UserOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserOrdersTable,
			Columns: []string{user.UserOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserRoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRoomsTable,
			Columns: []string{user.UserRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserRoomsIDs(); len(nodes) > 0 && !uu.mutation.UserRoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRoomsTable,
			Columns: []string{user.UserRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserRoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRoomsTable,
			Columns: []string{user.UserRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetDisplayName sets the "display_name" field.
func (uuo *UserUpdateOne) SetDisplayName(s string) *UserUpdateOne {
	uuo.mutation.SetDisplayName(s)
	return uuo
}

// SetPictureURL sets the "picture_url" field.
func (uuo *UserUpdateOne) SetPictureURL(s string) *UserUpdateOne {
	uuo.mutation.SetPictureURL(s)
	return uuo
}

// SetPickupNum sets the "pickup_num" field.
func (uuo *UserUpdateOne) SetPickupNum(f float64) *UserUpdateOne {
	uuo.mutation.ResetPickupNum()
	uuo.mutation.SetPickupNum(f)
	return uuo
}

// AddPickupNum adds f to the "pickup_num" field.
func (uuo *UserUpdateOne) AddPickupNum(f float64) *UserUpdateOne {
	uuo.mutation.AddPickupNum(f)
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(u user.Role) *UserUpdateOne {
	uuo.mutation.SetRole(u)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(u *user.Role) *UserUpdateOne {
	if u != nil {
		uuo.SetRole(*u)
	}
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(u user.Status) *UserUpdateOne {
	uuo.mutation.SetStatus(u)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(u *user.Status) *UserUpdateOne {
	if u != nil {
		uuo.SetStatus(*u)
	}
	return uuo
}

// SetNotified sets the "notified" field.
func (uuo *UserUpdateOne) SetNotified(b bool) *UserUpdateOne {
	uuo.mutation.SetNotified(b)
	return uuo
}

// SetNillableNotified sets the "notified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableNotified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetNotified(*b)
	}
	return uuo
}

// SetLinePay sets the "line_pay" field.
func (uuo *UserUpdateOne) SetLinePay(b bool) *UserUpdateOne {
	uuo.mutation.SetLinePay(b)
	return uuo
}

// SetNillableLinePay sets the "line_pay" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLinePay(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetLinePay(*b)
	}
	return uuo
}

// SetFb sets the "fb" field.
func (uuo *UserUpdateOne) SetFb(b bool) *UserUpdateOne {
	uuo.mutation.SetFb(b)
	return uuo
}

// SetNillableFb sets the "fb" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFb(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetFb(*b)
	}
	return uuo
}

// SetComment sets the "comment" field.
func (uuo *UserUpdateOne) SetComment(s string) *UserUpdateOne {
	uuo.mutation.SetComment(s)
	return uuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableComment(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetComment(*s)
	}
	return uuo
}

// SetDeliveredOrderCountLimit sets the "delivered_order_count_limit" field.
func (uuo *UserUpdateOne) SetDeliveredOrderCountLimit(i int) *UserUpdateOne {
	uuo.mutation.ResetDeliveredOrderCountLimit()
	uuo.mutation.SetDeliveredOrderCountLimit(i)
	return uuo
}

// SetNillableDeliveredOrderCountLimit sets the "delivered_order_count_limit" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeliveredOrderCountLimit(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetDeliveredOrderCountLimit(*i)
	}
	return uuo
}

// AddDeliveredOrderCountLimit adds i to the "delivered_order_count_limit" field.
func (uuo *UserUpdateOne) AddDeliveredOrderCountLimit(i int) *UserUpdateOne {
	uuo.mutation.AddDeliveredOrderCountLimit(i)
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (uuo *UserUpdateOne) AddPostIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddPostIDs(ids...)
	return uuo
}

// AddPosts adds the "posts" edges to the Post entity.
func (uuo *UserUpdateOne) AddPosts(p ...*Post) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPostIDs(ids...)
}

// AddUserCommentIDs adds the "user_comments" edge to the Comment entity by IDs.
func (uuo *UserUpdateOne) AddUserCommentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserCommentIDs(ids...)
	return uuo
}

// AddUserComments adds the "user_comments" edges to the Comment entity.
func (uuo *UserUpdateOne) AddUserComments(c ...*Comment) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddUserCommentIDs(ids...)
}

// AddUserCompleteIDs adds the "user_completes" edge to the Complete entity by IDs.
func (uuo *UserUpdateOne) AddUserCompleteIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserCompleteIDs(ids...)
	return uuo
}

// AddUserCompletes adds the "user_completes" edges to the Complete entity.
func (uuo *UserUpdateOne) AddUserCompletes(c ...*Complete) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddUserCompleteIDs(ids...)
}

// AddUserDeliverIDs adds the "user_delivers" edge to the Deliver entity by IDs.
func (uuo *UserUpdateOne) AddUserDeliverIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserDeliverIDs(ids...)
	return uuo
}

// AddUserDelivers adds the "user_delivers" edges to the Deliver entity.
func (uuo *UserUpdateOne) AddUserDelivers(d ...*Deliver) *UserUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddUserDeliverIDs(ids...)
}

// AddUserLikeIDs adds the "user_likes" edge to the Like entity by IDs.
func (uuo *UserUpdateOne) AddUserLikeIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserLikeIDs(ids...)
	return uuo
}

// AddUserLikes adds the "user_likes" edges to the Like entity.
func (uuo *UserUpdateOne) AddUserLikes(l ...*Like) *UserUpdateOne {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.AddUserLikeIDs(ids...)
}

// AddUserMessageIDs adds the "user_messages" edge to the Message entity by IDs.
func (uuo *UserUpdateOne) AddUserMessageIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserMessageIDs(ids...)
	return uuo
}

// AddUserMessages adds the "user_messages" edges to the Message entity.
func (uuo *UserUpdateOne) AddUserMessages(m ...*Message) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddUserMessageIDs(ids...)
}

// AddUserOrderIDs adds the "user_orders" edge to the Order entity by IDs.
func (uuo *UserUpdateOne) AddUserOrderIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserOrderIDs(ids...)
	return uuo
}

// AddUserOrders adds the "user_orders" edges to the Order entity.
func (uuo *UserUpdateOne) AddUserOrders(o ...*Order) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddUserOrderIDs(ids...)
}

// AddUserRoomIDs adds the "user_rooms" edge to the RoomUser entity by IDs.
func (uuo *UserUpdateOne) AddUserRoomIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddUserRoomIDs(ids...)
	return uuo
}

// AddUserRooms adds the "user_rooms" edges to the RoomUser entity.
func (uuo *UserUpdateOne) AddUserRooms(r ...*RoomUser) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddUserRoomIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (uuo *UserUpdateOne) ClearPosts() *UserUpdateOne {
	uuo.mutation.ClearPosts()
	return uuo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (uuo *UserUpdateOne) RemovePostIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemovePostIDs(ids...)
	return uuo
}

// RemovePosts removes "posts" edges to Post entities.
func (uuo *UserUpdateOne) RemovePosts(p ...*Post) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePostIDs(ids...)
}

// ClearUserComments clears all "user_comments" edges to the Comment entity.
func (uuo *UserUpdateOne) ClearUserComments() *UserUpdateOne {
	uuo.mutation.ClearUserComments()
	return uuo
}

// RemoveUserCommentIDs removes the "user_comments" edge to Comment entities by IDs.
func (uuo *UserUpdateOne) RemoveUserCommentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserCommentIDs(ids...)
	return uuo
}

// RemoveUserComments removes "user_comments" edges to Comment entities.
func (uuo *UserUpdateOne) RemoveUserComments(c ...*Comment) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveUserCommentIDs(ids...)
}

// ClearUserCompletes clears all "user_completes" edges to the Complete entity.
func (uuo *UserUpdateOne) ClearUserCompletes() *UserUpdateOne {
	uuo.mutation.ClearUserCompletes()
	return uuo
}

// RemoveUserCompleteIDs removes the "user_completes" edge to Complete entities by IDs.
func (uuo *UserUpdateOne) RemoveUserCompleteIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserCompleteIDs(ids...)
	return uuo
}

// RemoveUserCompletes removes "user_completes" edges to Complete entities.
func (uuo *UserUpdateOne) RemoveUserCompletes(c ...*Complete) *UserUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveUserCompleteIDs(ids...)
}

// ClearUserDelivers clears all "user_delivers" edges to the Deliver entity.
func (uuo *UserUpdateOne) ClearUserDelivers() *UserUpdateOne {
	uuo.mutation.ClearUserDelivers()
	return uuo
}

// RemoveUserDeliverIDs removes the "user_delivers" edge to Deliver entities by IDs.
func (uuo *UserUpdateOne) RemoveUserDeliverIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserDeliverIDs(ids...)
	return uuo
}

// RemoveUserDelivers removes "user_delivers" edges to Deliver entities.
func (uuo *UserUpdateOne) RemoveUserDelivers(d ...*Deliver) *UserUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveUserDeliverIDs(ids...)
}

// ClearUserLikes clears all "user_likes" edges to the Like entity.
func (uuo *UserUpdateOne) ClearUserLikes() *UserUpdateOne {
	uuo.mutation.ClearUserLikes()
	return uuo
}

// RemoveUserLikeIDs removes the "user_likes" edge to Like entities by IDs.
func (uuo *UserUpdateOne) RemoveUserLikeIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserLikeIDs(ids...)
	return uuo
}

// RemoveUserLikes removes "user_likes" edges to Like entities.
func (uuo *UserUpdateOne) RemoveUserLikes(l ...*Like) *UserUpdateOne {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return uuo.RemoveUserLikeIDs(ids...)
}

// ClearUserMessages clears all "user_messages" edges to the Message entity.
func (uuo *UserUpdateOne) ClearUserMessages() *UserUpdateOne {
	uuo.mutation.ClearUserMessages()
	return uuo
}

// RemoveUserMessageIDs removes the "user_messages" edge to Message entities by IDs.
func (uuo *UserUpdateOne) RemoveUserMessageIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserMessageIDs(ids...)
	return uuo
}

// RemoveUserMessages removes "user_messages" edges to Message entities.
func (uuo *UserUpdateOne) RemoveUserMessages(m ...*Message) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveUserMessageIDs(ids...)
}

// ClearUserOrders clears all "user_orders" edges to the Order entity.
func (uuo *UserUpdateOne) ClearUserOrders() *UserUpdateOne {
	uuo.mutation.ClearUserOrders()
	return uuo
}

// RemoveUserOrderIDs removes the "user_orders" edge to Order entities by IDs.
func (uuo *UserUpdateOne) RemoveUserOrderIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserOrderIDs(ids...)
	return uuo
}

// RemoveUserOrders removes "user_orders" edges to Order entities.
func (uuo *UserUpdateOne) RemoveUserOrders(o ...*Order) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveUserOrderIDs(ids...)
}

// ClearUserRooms clears all "user_rooms" edges to the RoomUser entity.
func (uuo *UserUpdateOne) ClearUserRooms() *UserUpdateOne {
	uuo.mutation.ClearUserRooms()
	return uuo
}

// RemoveUserRoomIDs removes the "user_rooms" edge to RoomUser entities by IDs.
func (uuo *UserUpdateOne) RemoveUserRoomIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveUserRoomIDs(ids...)
	return uuo
}

// RemoveUserRooms removes "user_rooms" edges to RoomUser entities.
func (uuo *UserUpdateOne) RemoveUserRooms(r ...*RoomUser) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveUserRoomIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Status(); ok {
		if err := user.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "User.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PictureURL(); ok {
		_spec.SetField(user.FieldPictureURL, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PickupNum(); ok {
		_spec.SetField(user.FieldPickupNum, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedPickupNum(); ok {
		_spec.AddField(user.FieldPickupNum, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.SetField(user.FieldRole, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Notified(); ok {
		_spec.SetField(user.FieldNotified, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.LinePay(); ok {
		_spec.SetField(user.FieldLinePay, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Fb(); ok {
		_spec.SetField(user.FieldFb, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.Comment(); ok {
		_spec.SetField(user.FieldComment, field.TypeString, value)
	}
	if value, ok := uuo.mutation.DeliveredOrderCountLimit(); ok {
		_spec.SetField(user.FieldDeliveredOrderCountLimit, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.AddedDeliveredOrderCountLimit(); ok {
		_spec.AddField(user.FieldDeliveredOrderCountLimit, field.TypeInt, value)
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !uuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PostsTable,
			Columns: []string{user.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCommentsTable,
			Columns: []string{user.UserCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserCommentsIDs(); len(nodes) > 0 && !uuo.mutation.UserCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCommentsTable,
			Columns: []string{user.UserCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCommentsTable,
			Columns: []string{user.UserCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserCompletesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCompletesTable,
			Columns: []string{user.UserCompletesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(complete.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserCompletesIDs(); len(nodes) > 0 && !uuo.mutation.UserCompletesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCompletesTable,
			Columns: []string{user.UserCompletesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(complete.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserCompletesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserCompletesTable,
			Columns: []string{user.UserCompletesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(complete.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserDeliversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserDeliversTable,
			Columns: []string{user.UserDeliversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserDeliversIDs(); len(nodes) > 0 && !uuo.mutation.UserDeliversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserDeliversTable,
			Columns: []string{user.UserDeliversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserDeliversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserDeliversTable,
			Columns: []string{user.UserDeliversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserLikesTable,
			Columns: []string{user.UserLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserLikesIDs(); len(nodes) > 0 && !uuo.mutation.UserLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserLikesTable,
			Columns: []string{user.UserLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserLikesTable,
			Columns: []string{user.UserLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMessagesTable,
			Columns: []string{user.UserMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserMessagesIDs(); len(nodes) > 0 && !uuo.mutation.UserMessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMessagesTable,
			Columns: []string{user.UserMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserMessagesTable,
			Columns: []string{user.UserMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserOrdersTable,
			Columns: []string{user.UserOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserOrdersIDs(); len(nodes) > 0 && !uuo.mutation.UserOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserOrdersTable,
			Columns: []string{user.UserOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserOrdersTable,
			Columns: []string{user.UserOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserRoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRoomsTable,
			Columns: []string{user.UserRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserRoomsIDs(); len(nodes) > 0 && !uuo.mutation.UserRoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRoomsTable,
			Columns: []string{user.UserRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserRoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRoomsTable,
			Columns: []string{user.UserRoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(roomuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
