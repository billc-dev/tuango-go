// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/billc-dev/tuango-go/ent/complete"
	"github.com/billc-dev/tuango-go/ent/schema"
	"github.com/billc-dev/tuango-go/ent/user"
)

// Complete is the model entity for the Complete schema.
type Complete struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID *string `json:"user_id,omitempty"`
	// Total holds the value of the "total" field.
	Total *float64 `json:"total,omitempty"`
	// Admin holds the value of the "admin" field.
	Admin *string `json:"admin,omitempty"`
	// LinePay holds the value of the "line_pay" field.
	LinePay *bool `json:"line_pay,omitempty"`
	// Confirmed holds the value of the "confirmed" field.
	Confirmed *bool `json:"confirmed,omitempty"`
	// Orders holds the value of the "orders" field.
	Orders []schema.CompleteOrder `json:"orders,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompleteQuery when eager-loading is set.
	Edges        CompleteEdges `json:"-"`
	selectValues sql.SelectValues
}

// CompleteEdges holds the relations/edges for other nodes in the graph.
type CompleteEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompleteEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Complete) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case complete.FieldOrders:
			values[i] = new([]byte)
		case complete.FieldLinePay, complete.FieldConfirmed:
			values[i] = new(sql.NullBool)
		case complete.FieldTotal:
			values[i] = new(sql.NullFloat64)
		case complete.FieldID, complete.FieldUserID, complete.FieldAdmin:
			values[i] = new(sql.NullString)
		case complete.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Complete fields.
func (c *Complete) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case complete.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case complete.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = new(string)
				*c.UserID = value.String
			}
		case complete.FieldTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				c.Total = new(float64)
				*c.Total = value.Float64
			}
		case complete.FieldAdmin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field admin", values[i])
			} else if value.Valid {
				c.Admin = new(string)
				*c.Admin = value.String
			}
		case complete.FieldLinePay:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field line_pay", values[i])
			} else if value.Valid {
				c.LinePay = new(bool)
				*c.LinePay = value.Bool
			}
		case complete.FieldConfirmed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field confirmed", values[i])
			} else if value.Valid {
				c.Confirmed = new(bool)
				*c.Confirmed = value.Bool
			}
		case complete.FieldOrders:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field orders", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Orders); err != nil {
					return fmt.Errorf("unmarshal field orders: %w", err)
				}
			}
		case complete.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = new(time.Time)
				*c.CreatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Complete.
// This includes values selected through modifiers, order, etc.
func (c *Complete) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Complete entity.
func (c *Complete) QueryUser() *UserQuery {
	return NewCompleteClient(c.config).QueryUser(c)
}

// Update returns a builder for updating this Complete.
// Note that you need to call Complete.Unwrap() before calling this method if this Complete
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Complete) Update() *CompleteUpdateOne {
	return NewCompleteClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Complete entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Complete) Unwrap() *Complete {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Complete is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Complete) String() string {
	var builder strings.Builder
	builder.WriteString("Complete(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	if v := c.UserID; v != nil {
		builder.WriteString("user_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Total; v != nil {
		builder.WriteString("total=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.Admin; v != nil {
		builder.WriteString("admin=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.LinePay; v != nil {
		builder.WriteString("line_pay=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.Confirmed; v != nil {
		builder.WriteString("confirmed=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("orders=")
	builder.WriteString(fmt.Sprintf("%v", c.Orders))
	builder.WriteString(", ")
	if v := c.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (c *Complete) MarshalJSON() ([]byte, error) {
	type Alias Complete
	return json.Marshal(&struct {
		*Alias
		CompleteEdges
	}{
		Alias:         (*Alias)(c),
		CompleteEdges: c.Edges,
	})
}

// Completes is a parsable slice of Complete.
type Completes []*Complete
