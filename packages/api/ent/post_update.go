// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/billc-dev/tuango-go/ent/comment"
	"github.com/billc-dev/tuango-go/ent/deliver"
	"github.com/billc-dev/tuango-go/ent/like"
	"github.com/billc-dev/tuango-go/ent/order"
	"github.com/billc-dev/tuango-go/ent/post"
	"github.com/billc-dev/tuango-go/ent/postitem"
	"github.com/billc-dev/tuango-go/ent/predicate"
	"github.com/billc-dev/tuango-go/ent/schema"
	"github.com/billc-dev/tuango-go/ent/user"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks     []Hook
	mutation  *PostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetSellerID sets the "seller_id" field.
func (pu *PostUpdate) SetSellerID(s string) *PostUpdate {
	pu.mutation.SetSellerID(s)
	return pu
}

// SetPostNum sets the "post_num" field.
func (pu *PostUpdate) SetPostNum(i int) *PostUpdate {
	pu.mutation.ResetPostNum()
	pu.mutation.SetPostNum(i)
	return pu
}

// AddPostNum adds i to the "post_num" field.
func (pu *PostUpdate) AddPostNum(i int) *PostUpdate {
	pu.mutation.AddPostNum(i)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PostUpdate) SetTitle(s string) *PostUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetBody sets the "body" field.
func (pu *PostUpdate) SetBody(s string) *PostUpdate {
	pu.mutation.SetBody(s)
	return pu
}

// SetDeadline sets the "deadline" field.
func (pu *PostUpdate) SetDeadline(s string) *PostUpdate {
	pu.mutation.SetDeadline(s)
	return pu
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (pu *PostUpdate) SetNillableDeadline(s *string) *PostUpdate {
	if s != nil {
		pu.SetDeadline(*s)
	}
	return pu
}

// SetDeliveryDate sets the "delivery_date" field.
func (pu *PostUpdate) SetDeliveryDate(s string) *PostUpdate {
	pu.mutation.SetDeliveryDate(s)
	return pu
}

// SetNillableDeliveryDate sets the "delivery_date" field if the given value is not nil.
func (pu *PostUpdate) SetNillableDeliveryDate(s *string) *PostUpdate {
	if s != nil {
		pu.SetDeliveryDate(*s)
	}
	return pu
}

// SetLikeCount sets the "like_count" field.
func (pu *PostUpdate) SetLikeCount(i int) *PostUpdate {
	pu.mutation.ResetLikeCount()
	pu.mutation.SetLikeCount(i)
	return pu
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (pu *PostUpdate) SetNillableLikeCount(i *int) *PostUpdate {
	if i != nil {
		pu.SetLikeCount(*i)
	}
	return pu
}

// AddLikeCount adds i to the "like_count" field.
func (pu *PostUpdate) AddLikeCount(i int) *PostUpdate {
	pu.mutation.AddLikeCount(i)
	return pu
}

// SetCommentCount sets the "comment_count" field.
func (pu *PostUpdate) SetCommentCount(i int) *PostUpdate {
	pu.mutation.ResetCommentCount()
	pu.mutation.SetCommentCount(i)
	return pu
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCommentCount(i *int) *PostUpdate {
	if i != nil {
		pu.SetCommentCount(*i)
	}
	return pu
}

// AddCommentCount adds i to the "comment_count" field.
func (pu *PostUpdate) AddCommentCount(i int) *PostUpdate {
	pu.mutation.AddCommentCount(i)
	return pu
}

// SetOrderCount sets the "order_count" field.
func (pu *PostUpdate) SetOrderCount(i int) *PostUpdate {
	pu.mutation.ResetOrderCount()
	pu.mutation.SetOrderCount(i)
	return pu
}

// SetNillableOrderCount sets the "order_count" field if the given value is not nil.
func (pu *PostUpdate) SetNillableOrderCount(i *int) *PostUpdate {
	if i != nil {
		pu.SetOrderCount(*i)
	}
	return pu
}

// AddOrderCount adds i to the "order_count" field.
func (pu *PostUpdate) AddOrderCount(i int) *PostUpdate {
	pu.mutation.AddOrderCount(i)
	return pu
}

// SetImages sets the "images" field.
func (pu *PostUpdate) SetImages(s []schema.Image) *PostUpdate {
	pu.mutation.SetImages(s)
	return pu
}

// AppendImages appends s to the "images" field.
func (pu *PostUpdate) AppendImages(s []schema.Image) *PostUpdate {
	pu.mutation.AppendImages(s)
	return pu
}

// SetStorageType sets the "storage_type" field.
func (pu *PostUpdate) SetStorageType(pt post.StorageType) *PostUpdate {
	pu.mutation.SetStorageType(pt)
	return pu
}

// SetStatus sets the "status" field.
func (pu *PostUpdate) SetStatus(po post.Status) *PostUpdate {
	pu.mutation.SetStatus(po)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PostUpdate) SetNillableStatus(po *post.Status) *PostUpdate {
	if po != nil {
		pu.SetStatus(*po)
	}
	return pu
}

// SetComment sets the "comment" field.
func (pu *PostUpdate) SetComment(s string) *PostUpdate {
	pu.mutation.SetComment(s)
	return pu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (pu *PostUpdate) SetNillableComment(s *string) *PostUpdate {
	if s != nil {
		pu.SetComment(*s)
	}
	return pu
}

// SetDelivered sets the "delivered" field.
func (pu *PostUpdate) SetDelivered(b bool) *PostUpdate {
	pu.mutation.SetDelivered(b)
	return pu
}

// SetNillableDelivered sets the "delivered" field if the given value is not nil.
func (pu *PostUpdate) SetNillableDelivered(b *bool) *PostUpdate {
	if b != nil {
		pu.SetDelivered(*b)
	}
	return pu
}

// SetIsInStock sets the "is_in_stock" field.
func (pu *PostUpdate) SetIsInStock(b bool) *PostUpdate {
	pu.mutation.SetIsInStock(b)
	return pu
}

// SetNillableIsInStock sets the "is_in_stock" field if the given value is not nil.
func (pu *PostUpdate) SetNillableIsInStock(b *bool) *PostUpdate {
	if b != nil {
		pu.SetIsInStock(*b)
	}
	return pu
}

// SetNormalTotal sets the "normal_total" field.
func (pu *PostUpdate) SetNormalTotal(f float64) *PostUpdate {
	pu.mutation.ResetNormalTotal()
	pu.mutation.SetNormalTotal(f)
	return pu
}

// SetNillableNormalTotal sets the "normal_total" field if the given value is not nil.
func (pu *PostUpdate) SetNillableNormalTotal(f *float64) *PostUpdate {
	if f != nil {
		pu.SetNormalTotal(*f)
	}
	return pu
}

// AddNormalTotal adds f to the "normal_total" field.
func (pu *PostUpdate) AddNormalTotal(f float64) *PostUpdate {
	pu.mutation.AddNormalTotal(f)
	return pu
}

// SetNormalFee sets the "normal_fee" field.
func (pu *PostUpdate) SetNormalFee(f float64) *PostUpdate {
	pu.mutation.ResetNormalFee()
	pu.mutation.SetNormalFee(f)
	return pu
}

// SetNillableNormalFee sets the "normal_fee" field if the given value is not nil.
func (pu *PostUpdate) SetNillableNormalFee(f *float64) *PostUpdate {
	if f != nil {
		pu.SetNormalFee(*f)
	}
	return pu
}

// AddNormalFee adds f to the "normal_fee" field.
func (pu *PostUpdate) AddNormalFee(f float64) *PostUpdate {
	pu.mutation.AddNormalFee(f)
	return pu
}

// SetExtraTotal sets the "extra_total" field.
func (pu *PostUpdate) SetExtraTotal(f float64) *PostUpdate {
	pu.mutation.ResetExtraTotal()
	pu.mutation.SetExtraTotal(f)
	return pu
}

// SetNillableExtraTotal sets the "extra_total" field if the given value is not nil.
func (pu *PostUpdate) SetNillableExtraTotal(f *float64) *PostUpdate {
	if f != nil {
		pu.SetExtraTotal(*f)
	}
	return pu
}

// AddExtraTotal adds f to the "extra_total" field.
func (pu *PostUpdate) AddExtraTotal(f float64) *PostUpdate {
	pu.mutation.AddExtraTotal(f)
	return pu
}

// SetExtraFee sets the "extra_fee" field.
func (pu *PostUpdate) SetExtraFee(f float64) *PostUpdate {
	pu.mutation.ResetExtraFee()
	pu.mutation.SetExtraFee(f)
	return pu
}

// SetNillableExtraFee sets the "extra_fee" field if the given value is not nil.
func (pu *PostUpdate) SetNillableExtraFee(f *float64) *PostUpdate {
	if f != nil {
		pu.SetExtraFee(*f)
	}
	return pu
}

// AddExtraFee adds f to the "extra_fee" field.
func (pu *PostUpdate) AddExtraFee(f float64) *PostUpdate {
	pu.mutation.AddExtraFee(f)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PostUpdate) SetCreatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCreatedAt(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PostUpdate) SetUpdatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetSeller sets the "seller" edge to the User entity.
func (pu *PostUpdate) SetSeller(u *User) *PostUpdate {
	return pu.SetSellerID(u.ID)
}

// AddPostCommentIDs adds the "post_comments" edge to the Comment entity by IDs.
func (pu *PostUpdate) AddPostCommentIDs(ids ...string) *PostUpdate {
	pu.mutation.AddPostCommentIDs(ids...)
	return pu
}

// AddPostComments adds the "post_comments" edges to the Comment entity.
func (pu *PostUpdate) AddPostComments(c ...*Comment) *PostUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddPostCommentIDs(ids...)
}

// AddPostDeliverIDs adds the "post_delivers" edge to the Deliver entity by IDs.
func (pu *PostUpdate) AddPostDeliverIDs(ids ...string) *PostUpdate {
	pu.mutation.AddPostDeliverIDs(ids...)
	return pu
}

// AddPostDelivers adds the "post_delivers" edges to the Deliver entity.
func (pu *PostUpdate) AddPostDelivers(d ...*Deliver) *PostUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddPostDeliverIDs(ids...)
}

// AddPostItemIDs adds the "post_items" edge to the PostItem entity by IDs.
func (pu *PostUpdate) AddPostItemIDs(ids ...string) *PostUpdate {
	pu.mutation.AddPostItemIDs(ids...)
	return pu
}

// AddPostItems adds the "post_items" edges to the PostItem entity.
func (pu *PostUpdate) AddPostItems(p ...*PostItem) *PostUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPostItemIDs(ids...)
}

// AddPostLikeIDs adds the "post_likes" edge to the Like entity by IDs.
func (pu *PostUpdate) AddPostLikeIDs(ids ...string) *PostUpdate {
	pu.mutation.AddPostLikeIDs(ids...)
	return pu
}

// AddPostLikes adds the "post_likes" edges to the Like entity.
func (pu *PostUpdate) AddPostLikes(l ...*Like) *PostUpdate {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pu.AddPostLikeIDs(ids...)
}

// AddPostOrderIDs adds the "post_orders" edge to the Order entity by IDs.
func (pu *PostUpdate) AddPostOrderIDs(ids ...string) *PostUpdate {
	pu.mutation.AddPostOrderIDs(ids...)
	return pu
}

// AddPostOrders adds the "post_orders" edges to the Order entity.
func (pu *PostUpdate) AddPostOrders(o ...*Order) *PostUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddPostOrderIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// ClearSeller clears the "seller" edge to the User entity.
func (pu *PostUpdate) ClearSeller() *PostUpdate {
	pu.mutation.ClearSeller()
	return pu
}

// ClearPostComments clears all "post_comments" edges to the Comment entity.
func (pu *PostUpdate) ClearPostComments() *PostUpdate {
	pu.mutation.ClearPostComments()
	return pu
}

// RemovePostCommentIDs removes the "post_comments" edge to Comment entities by IDs.
func (pu *PostUpdate) RemovePostCommentIDs(ids ...string) *PostUpdate {
	pu.mutation.RemovePostCommentIDs(ids...)
	return pu
}

// RemovePostComments removes "post_comments" edges to Comment entities.
func (pu *PostUpdate) RemovePostComments(c ...*Comment) *PostUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemovePostCommentIDs(ids...)
}

// ClearPostDelivers clears all "post_delivers" edges to the Deliver entity.
func (pu *PostUpdate) ClearPostDelivers() *PostUpdate {
	pu.mutation.ClearPostDelivers()
	return pu
}

// RemovePostDeliverIDs removes the "post_delivers" edge to Deliver entities by IDs.
func (pu *PostUpdate) RemovePostDeliverIDs(ids ...string) *PostUpdate {
	pu.mutation.RemovePostDeliverIDs(ids...)
	return pu
}

// RemovePostDelivers removes "post_delivers" edges to Deliver entities.
func (pu *PostUpdate) RemovePostDelivers(d ...*Deliver) *PostUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemovePostDeliverIDs(ids...)
}

// ClearPostItems clears all "post_items" edges to the PostItem entity.
func (pu *PostUpdate) ClearPostItems() *PostUpdate {
	pu.mutation.ClearPostItems()
	return pu
}

// RemovePostItemIDs removes the "post_items" edge to PostItem entities by IDs.
func (pu *PostUpdate) RemovePostItemIDs(ids ...string) *PostUpdate {
	pu.mutation.RemovePostItemIDs(ids...)
	return pu
}

// RemovePostItems removes "post_items" edges to PostItem entities.
func (pu *PostUpdate) RemovePostItems(p ...*PostItem) *PostUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePostItemIDs(ids...)
}

// ClearPostLikes clears all "post_likes" edges to the Like entity.
func (pu *PostUpdate) ClearPostLikes() *PostUpdate {
	pu.mutation.ClearPostLikes()
	return pu
}

// RemovePostLikeIDs removes the "post_likes" edge to Like entities by IDs.
func (pu *PostUpdate) RemovePostLikeIDs(ids ...string) *PostUpdate {
	pu.mutation.RemovePostLikeIDs(ids...)
	return pu
}

// RemovePostLikes removes "post_likes" edges to Like entities.
func (pu *PostUpdate) RemovePostLikes(l ...*Like) *PostUpdate {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return pu.RemovePostLikeIDs(ids...)
}

// ClearPostOrders clears all "post_orders" edges to the Order entity.
func (pu *PostUpdate) ClearPostOrders() *PostUpdate {
	pu.mutation.ClearPostOrders()
	return pu
}

// RemovePostOrderIDs removes the "post_orders" edge to Order entities by IDs.
func (pu *PostUpdate) RemovePostOrderIDs(ids ...string) *PostUpdate {
	pu.mutation.RemovePostOrderIDs(ids...)
	return pu
}

// RemovePostOrders removes "post_orders" edges to Order entities.
func (pu *PostUpdate) RemovePostOrders(o ...*Order) *PostUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemovePostOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PostUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PostUpdate) check() error {
	if v, ok := pu.mutation.Deadline(); ok {
		if err := post.DeadlineValidator(v); err != nil {
			return &ValidationError{Name: "deadline", err: fmt.Errorf(`ent: validator failed for field "Post.deadline": %w`, err)}
		}
	}
	if v, ok := pu.mutation.DeliveryDate(); ok {
		if err := post.DeliveryDateValidator(v); err != nil {
			return &ValidationError{Name: "delivery_date", err: fmt.Errorf(`ent: validator failed for field "Post.delivery_date": %w`, err)}
		}
	}
	if v, ok := pu.mutation.StorageType(); ok {
		if err := post.StorageTypeValidator(v); err != nil {
			return &ValidationError{Name: "storage_type", err: fmt.Errorf(`ent: validator failed for field "Post.storage_type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := post.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Post.status": %w`, err)}
		}
	}
	if _, ok := pu.mutation.SellerID(); pu.mutation.SellerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Post.seller"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PostUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PostNum(); ok {
		_spec.SetField(post.FieldPostNum, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedPostNum(); ok {
		_spec.AddField(post.FieldPostNum, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Body(); ok {
		_spec.SetField(post.FieldBody, field.TypeString, value)
	}
	if value, ok := pu.mutation.Deadline(); ok {
		_spec.SetField(post.FieldDeadline, field.TypeString, value)
	}
	if value, ok := pu.mutation.DeliveryDate(); ok {
		_spec.SetField(post.FieldDeliveryDate, field.TypeString, value)
	}
	if value, ok := pu.mutation.LikeCount(); ok {
		_spec.SetField(post.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedLikeCount(); ok {
		_spec.AddField(post.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.CommentCount(); ok {
		_spec.SetField(post.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedCommentCount(); ok {
		_spec.AddField(post.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.OrderCount(); ok {
		_spec.SetField(post.FieldOrderCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedOrderCount(); ok {
		_spec.AddField(post.FieldOrderCount, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Images(); ok {
		_spec.SetField(post.FieldImages, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, post.FieldImages, value)
		})
	}
	if value, ok := pu.mutation.StorageType(); ok {
		_spec.SetField(post.FieldStorageType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(post.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Comment(); ok {
		_spec.SetField(post.FieldComment, field.TypeString, value)
	}
	if value, ok := pu.mutation.Delivered(); ok {
		_spec.SetField(post.FieldDelivered, field.TypeBool, value)
	}
	if value, ok := pu.mutation.IsInStock(); ok {
		_spec.SetField(post.FieldIsInStock, field.TypeBool, value)
	}
	if value, ok := pu.mutation.NormalTotal(); ok {
		_spec.SetField(post.FieldNormalTotal, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedNormalTotal(); ok {
		_spec.AddField(post.FieldNormalTotal, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.NormalFee(); ok {
		_spec.SetField(post.FieldNormalFee, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedNormalFee(); ok {
		_spec.AddField(post.FieldNormalFee, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.ExtraTotal(); ok {
		_spec.SetField(post.FieldExtraTotal, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedExtraTotal(); ok {
		_spec.AddField(post.FieldExtraTotal, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.ExtraFee(); ok {
		_spec.SetField(post.FieldExtraFee, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedExtraFee(); ok {
		_spec.AddField(post.FieldExtraFee, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(post.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.SellerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.SellerTable,
			Columns: []string{post.SellerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SellerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.SellerTable,
			Columns: []string{post.SellerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PostCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostCommentsTable,
			Columns: []string{post.PostCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPostCommentsIDs(); len(nodes) > 0 && !pu.mutation.PostCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostCommentsTable,
			Columns: []string{post.PostCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PostCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostCommentsTable,
			Columns: []string{post.PostCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PostDeliversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostDeliversTable,
			Columns: []string{post.PostDeliversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPostDeliversIDs(); len(nodes) > 0 && !pu.mutation.PostDeliversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostDeliversTable,
			Columns: []string{post.PostDeliversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PostDeliversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostDeliversTable,
			Columns: []string{post.PostDeliversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PostItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostItemsTable,
			Columns: []string{post.PostItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPostItemsIDs(); len(nodes) > 0 && !pu.mutation.PostItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostItemsTable,
			Columns: []string{post.PostItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PostItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostItemsTable,
			Columns: []string{post.PostItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PostLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostLikesTable,
			Columns: []string{post.PostLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPostLikesIDs(); len(nodes) > 0 && !pu.mutation.PostLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostLikesTable,
			Columns: []string{post.PostLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PostLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostLikesTable,
			Columns: []string{post.PostLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PostOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostOrdersTable,
			Columns: []string{post.PostOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPostOrdersIDs(); len(nodes) > 0 && !pu.mutation.PostOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostOrdersTable,
			Columns: []string{post.PostOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PostOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostOrdersTable,
			Columns: []string{post.PostOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PostMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetSellerID sets the "seller_id" field.
func (puo *PostUpdateOne) SetSellerID(s string) *PostUpdateOne {
	puo.mutation.SetSellerID(s)
	return puo
}

// SetPostNum sets the "post_num" field.
func (puo *PostUpdateOne) SetPostNum(i int) *PostUpdateOne {
	puo.mutation.ResetPostNum()
	puo.mutation.SetPostNum(i)
	return puo
}

// AddPostNum adds i to the "post_num" field.
func (puo *PostUpdateOne) AddPostNum(i int) *PostUpdateOne {
	puo.mutation.AddPostNum(i)
	return puo
}

// SetTitle sets the "title" field.
func (puo *PostUpdateOne) SetTitle(s string) *PostUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetBody sets the "body" field.
func (puo *PostUpdateOne) SetBody(s string) *PostUpdateOne {
	puo.mutation.SetBody(s)
	return puo
}

// SetDeadline sets the "deadline" field.
func (puo *PostUpdateOne) SetDeadline(s string) *PostUpdateOne {
	puo.mutation.SetDeadline(s)
	return puo
}

// SetNillableDeadline sets the "deadline" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableDeadline(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetDeadline(*s)
	}
	return puo
}

// SetDeliveryDate sets the "delivery_date" field.
func (puo *PostUpdateOne) SetDeliveryDate(s string) *PostUpdateOne {
	puo.mutation.SetDeliveryDate(s)
	return puo
}

// SetNillableDeliveryDate sets the "delivery_date" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableDeliveryDate(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetDeliveryDate(*s)
	}
	return puo
}

// SetLikeCount sets the "like_count" field.
func (puo *PostUpdateOne) SetLikeCount(i int) *PostUpdateOne {
	puo.mutation.ResetLikeCount()
	puo.mutation.SetLikeCount(i)
	return puo
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableLikeCount(i *int) *PostUpdateOne {
	if i != nil {
		puo.SetLikeCount(*i)
	}
	return puo
}

// AddLikeCount adds i to the "like_count" field.
func (puo *PostUpdateOne) AddLikeCount(i int) *PostUpdateOne {
	puo.mutation.AddLikeCount(i)
	return puo
}

// SetCommentCount sets the "comment_count" field.
func (puo *PostUpdateOne) SetCommentCount(i int) *PostUpdateOne {
	puo.mutation.ResetCommentCount()
	puo.mutation.SetCommentCount(i)
	return puo
}

// SetNillableCommentCount sets the "comment_count" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCommentCount(i *int) *PostUpdateOne {
	if i != nil {
		puo.SetCommentCount(*i)
	}
	return puo
}

// AddCommentCount adds i to the "comment_count" field.
func (puo *PostUpdateOne) AddCommentCount(i int) *PostUpdateOne {
	puo.mutation.AddCommentCount(i)
	return puo
}

// SetOrderCount sets the "order_count" field.
func (puo *PostUpdateOne) SetOrderCount(i int) *PostUpdateOne {
	puo.mutation.ResetOrderCount()
	puo.mutation.SetOrderCount(i)
	return puo
}

// SetNillableOrderCount sets the "order_count" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableOrderCount(i *int) *PostUpdateOne {
	if i != nil {
		puo.SetOrderCount(*i)
	}
	return puo
}

// AddOrderCount adds i to the "order_count" field.
func (puo *PostUpdateOne) AddOrderCount(i int) *PostUpdateOne {
	puo.mutation.AddOrderCount(i)
	return puo
}

// SetImages sets the "images" field.
func (puo *PostUpdateOne) SetImages(s []schema.Image) *PostUpdateOne {
	puo.mutation.SetImages(s)
	return puo
}

// AppendImages appends s to the "images" field.
func (puo *PostUpdateOne) AppendImages(s []schema.Image) *PostUpdateOne {
	puo.mutation.AppendImages(s)
	return puo
}

// SetStorageType sets the "storage_type" field.
func (puo *PostUpdateOne) SetStorageType(pt post.StorageType) *PostUpdateOne {
	puo.mutation.SetStorageType(pt)
	return puo
}

// SetStatus sets the "status" field.
func (puo *PostUpdateOne) SetStatus(po post.Status) *PostUpdateOne {
	puo.mutation.SetStatus(po)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableStatus(po *post.Status) *PostUpdateOne {
	if po != nil {
		puo.SetStatus(*po)
	}
	return puo
}

// SetComment sets the "comment" field.
func (puo *PostUpdateOne) SetComment(s string) *PostUpdateOne {
	puo.mutation.SetComment(s)
	return puo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableComment(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetComment(*s)
	}
	return puo
}

// SetDelivered sets the "delivered" field.
func (puo *PostUpdateOne) SetDelivered(b bool) *PostUpdateOne {
	puo.mutation.SetDelivered(b)
	return puo
}

// SetNillableDelivered sets the "delivered" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableDelivered(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetDelivered(*b)
	}
	return puo
}

// SetIsInStock sets the "is_in_stock" field.
func (puo *PostUpdateOne) SetIsInStock(b bool) *PostUpdateOne {
	puo.mutation.SetIsInStock(b)
	return puo
}

// SetNillableIsInStock sets the "is_in_stock" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableIsInStock(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetIsInStock(*b)
	}
	return puo
}

// SetNormalTotal sets the "normal_total" field.
func (puo *PostUpdateOne) SetNormalTotal(f float64) *PostUpdateOne {
	puo.mutation.ResetNormalTotal()
	puo.mutation.SetNormalTotal(f)
	return puo
}

// SetNillableNormalTotal sets the "normal_total" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableNormalTotal(f *float64) *PostUpdateOne {
	if f != nil {
		puo.SetNormalTotal(*f)
	}
	return puo
}

// AddNormalTotal adds f to the "normal_total" field.
func (puo *PostUpdateOne) AddNormalTotal(f float64) *PostUpdateOne {
	puo.mutation.AddNormalTotal(f)
	return puo
}

// SetNormalFee sets the "normal_fee" field.
func (puo *PostUpdateOne) SetNormalFee(f float64) *PostUpdateOne {
	puo.mutation.ResetNormalFee()
	puo.mutation.SetNormalFee(f)
	return puo
}

// SetNillableNormalFee sets the "normal_fee" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableNormalFee(f *float64) *PostUpdateOne {
	if f != nil {
		puo.SetNormalFee(*f)
	}
	return puo
}

// AddNormalFee adds f to the "normal_fee" field.
func (puo *PostUpdateOne) AddNormalFee(f float64) *PostUpdateOne {
	puo.mutation.AddNormalFee(f)
	return puo
}

// SetExtraTotal sets the "extra_total" field.
func (puo *PostUpdateOne) SetExtraTotal(f float64) *PostUpdateOne {
	puo.mutation.ResetExtraTotal()
	puo.mutation.SetExtraTotal(f)
	return puo
}

// SetNillableExtraTotal sets the "extra_total" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableExtraTotal(f *float64) *PostUpdateOne {
	if f != nil {
		puo.SetExtraTotal(*f)
	}
	return puo
}

// AddExtraTotal adds f to the "extra_total" field.
func (puo *PostUpdateOne) AddExtraTotal(f float64) *PostUpdateOne {
	puo.mutation.AddExtraTotal(f)
	return puo
}

// SetExtraFee sets the "extra_fee" field.
func (puo *PostUpdateOne) SetExtraFee(f float64) *PostUpdateOne {
	puo.mutation.ResetExtraFee()
	puo.mutation.SetExtraFee(f)
	return puo
}

// SetNillableExtraFee sets the "extra_fee" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableExtraFee(f *float64) *PostUpdateOne {
	if f != nil {
		puo.SetExtraFee(*f)
	}
	return puo
}

// AddExtraFee adds f to the "extra_fee" field.
func (puo *PostUpdateOne) AddExtraFee(f float64) *PostUpdateOne {
	puo.mutation.AddExtraFee(f)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PostUpdateOne) SetCreatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCreatedAt(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PostUpdateOne) SetUpdatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetSeller sets the "seller" edge to the User entity.
func (puo *PostUpdateOne) SetSeller(u *User) *PostUpdateOne {
	return puo.SetSellerID(u.ID)
}

// AddPostCommentIDs adds the "post_comments" edge to the Comment entity by IDs.
func (puo *PostUpdateOne) AddPostCommentIDs(ids ...string) *PostUpdateOne {
	puo.mutation.AddPostCommentIDs(ids...)
	return puo
}

// AddPostComments adds the "post_comments" edges to the Comment entity.
func (puo *PostUpdateOne) AddPostComments(c ...*Comment) *PostUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddPostCommentIDs(ids...)
}

// AddPostDeliverIDs adds the "post_delivers" edge to the Deliver entity by IDs.
func (puo *PostUpdateOne) AddPostDeliverIDs(ids ...string) *PostUpdateOne {
	puo.mutation.AddPostDeliverIDs(ids...)
	return puo
}

// AddPostDelivers adds the "post_delivers" edges to the Deliver entity.
func (puo *PostUpdateOne) AddPostDelivers(d ...*Deliver) *PostUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddPostDeliverIDs(ids...)
}

// AddPostItemIDs adds the "post_items" edge to the PostItem entity by IDs.
func (puo *PostUpdateOne) AddPostItemIDs(ids ...string) *PostUpdateOne {
	puo.mutation.AddPostItemIDs(ids...)
	return puo
}

// AddPostItems adds the "post_items" edges to the PostItem entity.
func (puo *PostUpdateOne) AddPostItems(p ...*PostItem) *PostUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPostItemIDs(ids...)
}

// AddPostLikeIDs adds the "post_likes" edge to the Like entity by IDs.
func (puo *PostUpdateOne) AddPostLikeIDs(ids ...string) *PostUpdateOne {
	puo.mutation.AddPostLikeIDs(ids...)
	return puo
}

// AddPostLikes adds the "post_likes" edges to the Like entity.
func (puo *PostUpdateOne) AddPostLikes(l ...*Like) *PostUpdateOne {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return puo.AddPostLikeIDs(ids...)
}

// AddPostOrderIDs adds the "post_orders" edge to the Order entity by IDs.
func (puo *PostUpdateOne) AddPostOrderIDs(ids ...string) *PostUpdateOne {
	puo.mutation.AddPostOrderIDs(ids...)
	return puo
}

// AddPostOrders adds the "post_orders" edges to the Order entity.
func (puo *PostUpdateOne) AddPostOrders(o ...*Order) *PostUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddPostOrderIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// ClearSeller clears the "seller" edge to the User entity.
func (puo *PostUpdateOne) ClearSeller() *PostUpdateOne {
	puo.mutation.ClearSeller()
	return puo
}

// ClearPostComments clears all "post_comments" edges to the Comment entity.
func (puo *PostUpdateOne) ClearPostComments() *PostUpdateOne {
	puo.mutation.ClearPostComments()
	return puo
}

// RemovePostCommentIDs removes the "post_comments" edge to Comment entities by IDs.
func (puo *PostUpdateOne) RemovePostCommentIDs(ids ...string) *PostUpdateOne {
	puo.mutation.RemovePostCommentIDs(ids...)
	return puo
}

// RemovePostComments removes "post_comments" edges to Comment entities.
func (puo *PostUpdateOne) RemovePostComments(c ...*Comment) *PostUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemovePostCommentIDs(ids...)
}

// ClearPostDelivers clears all "post_delivers" edges to the Deliver entity.
func (puo *PostUpdateOne) ClearPostDelivers() *PostUpdateOne {
	puo.mutation.ClearPostDelivers()
	return puo
}

// RemovePostDeliverIDs removes the "post_delivers" edge to Deliver entities by IDs.
func (puo *PostUpdateOne) RemovePostDeliverIDs(ids ...string) *PostUpdateOne {
	puo.mutation.RemovePostDeliverIDs(ids...)
	return puo
}

// RemovePostDelivers removes "post_delivers" edges to Deliver entities.
func (puo *PostUpdateOne) RemovePostDelivers(d ...*Deliver) *PostUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemovePostDeliverIDs(ids...)
}

// ClearPostItems clears all "post_items" edges to the PostItem entity.
func (puo *PostUpdateOne) ClearPostItems() *PostUpdateOne {
	puo.mutation.ClearPostItems()
	return puo
}

// RemovePostItemIDs removes the "post_items" edge to PostItem entities by IDs.
func (puo *PostUpdateOne) RemovePostItemIDs(ids ...string) *PostUpdateOne {
	puo.mutation.RemovePostItemIDs(ids...)
	return puo
}

// RemovePostItems removes "post_items" edges to PostItem entities.
func (puo *PostUpdateOne) RemovePostItems(p ...*PostItem) *PostUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePostItemIDs(ids...)
}

// ClearPostLikes clears all "post_likes" edges to the Like entity.
func (puo *PostUpdateOne) ClearPostLikes() *PostUpdateOne {
	puo.mutation.ClearPostLikes()
	return puo
}

// RemovePostLikeIDs removes the "post_likes" edge to Like entities by IDs.
func (puo *PostUpdateOne) RemovePostLikeIDs(ids ...string) *PostUpdateOne {
	puo.mutation.RemovePostLikeIDs(ids...)
	return puo
}

// RemovePostLikes removes "post_likes" edges to Like entities.
func (puo *PostUpdateOne) RemovePostLikes(l ...*Like) *PostUpdateOne {
	ids := make([]string, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return puo.RemovePostLikeIDs(ids...)
}

// ClearPostOrders clears all "post_orders" edges to the Order entity.
func (puo *PostUpdateOne) ClearPostOrders() *PostUpdateOne {
	puo.mutation.ClearPostOrders()
	return puo
}

// RemovePostOrderIDs removes the "post_orders" edge to Order entities by IDs.
func (puo *PostUpdateOne) RemovePostOrderIDs(ids ...string) *PostUpdateOne {
	puo.mutation.RemovePostOrderIDs(ids...)
	return puo
}

// RemovePostOrders removes "post_orders" edges to Order entities.
func (puo *PostUpdateOne) RemovePostOrders(o ...*Order) *PostUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemovePostOrderIDs(ids...)
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PostUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := post.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PostUpdateOne) check() error {
	if v, ok := puo.mutation.Deadline(); ok {
		if err := post.DeadlineValidator(v); err != nil {
			return &ValidationError{Name: "deadline", err: fmt.Errorf(`ent: validator failed for field "Post.deadline": %w`, err)}
		}
	}
	if v, ok := puo.mutation.DeliveryDate(); ok {
		if err := post.DeliveryDateValidator(v); err != nil {
			return &ValidationError{Name: "delivery_date", err: fmt.Errorf(`ent: validator failed for field "Post.delivery_date": %w`, err)}
		}
	}
	if v, ok := puo.mutation.StorageType(); ok {
		if err := post.StorageTypeValidator(v); err != nil {
			return &ValidationError{Name: "storage_type", err: fmt.Errorf(`ent: validator failed for field "Post.storage_type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := post.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Post.status": %w`, err)}
		}
	}
	if _, ok := puo.mutation.SellerID(); puo.mutation.SellerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Post.seller"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PostUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.PostNum(); ok {
		_spec.SetField(post.FieldPostNum, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedPostNum(); ok {
		_spec.AddField(post.FieldPostNum, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Body(); ok {
		_spec.SetField(post.FieldBody, field.TypeString, value)
	}
	if value, ok := puo.mutation.Deadline(); ok {
		_spec.SetField(post.FieldDeadline, field.TypeString, value)
	}
	if value, ok := puo.mutation.DeliveryDate(); ok {
		_spec.SetField(post.FieldDeliveryDate, field.TypeString, value)
	}
	if value, ok := puo.mutation.LikeCount(); ok {
		_spec.SetField(post.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedLikeCount(); ok {
		_spec.AddField(post.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.CommentCount(); ok {
		_spec.SetField(post.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedCommentCount(); ok {
		_spec.AddField(post.FieldCommentCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.OrderCount(); ok {
		_spec.SetField(post.FieldOrderCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedOrderCount(); ok {
		_spec.AddField(post.FieldOrderCount, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Images(); ok {
		_spec.SetField(post.FieldImages, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, post.FieldImages, value)
		})
	}
	if value, ok := puo.mutation.StorageType(); ok {
		_spec.SetField(post.FieldStorageType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(post.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Comment(); ok {
		_spec.SetField(post.FieldComment, field.TypeString, value)
	}
	if value, ok := puo.mutation.Delivered(); ok {
		_spec.SetField(post.FieldDelivered, field.TypeBool, value)
	}
	if value, ok := puo.mutation.IsInStock(); ok {
		_spec.SetField(post.FieldIsInStock, field.TypeBool, value)
	}
	if value, ok := puo.mutation.NormalTotal(); ok {
		_spec.SetField(post.FieldNormalTotal, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedNormalTotal(); ok {
		_spec.AddField(post.FieldNormalTotal, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.NormalFee(); ok {
		_spec.SetField(post.FieldNormalFee, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedNormalFee(); ok {
		_spec.AddField(post.FieldNormalFee, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.ExtraTotal(); ok {
		_spec.SetField(post.FieldExtraTotal, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedExtraTotal(); ok {
		_spec.AddField(post.FieldExtraTotal, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.ExtraFee(); ok {
		_spec.SetField(post.FieldExtraFee, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedExtraFee(); ok {
		_spec.AddField(post.FieldExtraFee, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(post.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.SellerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.SellerTable,
			Columns: []string{post.SellerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SellerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   post.SellerTable,
			Columns: []string{post.SellerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PostCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostCommentsTable,
			Columns: []string{post.PostCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPostCommentsIDs(); len(nodes) > 0 && !puo.mutation.PostCommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostCommentsTable,
			Columns: []string{post.PostCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PostCommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostCommentsTable,
			Columns: []string{post.PostCommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PostDeliversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostDeliversTable,
			Columns: []string{post.PostDeliversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPostDeliversIDs(); len(nodes) > 0 && !puo.mutation.PostDeliversCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostDeliversTable,
			Columns: []string{post.PostDeliversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PostDeliversIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostDeliversTable,
			Columns: []string{post.PostDeliversColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deliver.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PostItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostItemsTable,
			Columns: []string{post.PostItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPostItemsIDs(); len(nodes) > 0 && !puo.mutation.PostItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostItemsTable,
			Columns: []string{post.PostItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PostItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostItemsTable,
			Columns: []string{post.PostItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(postitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PostLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostLikesTable,
			Columns: []string{post.PostLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPostLikesIDs(); len(nodes) > 0 && !puo.mutation.PostLikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostLikesTable,
			Columns: []string{post.PostLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PostLikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostLikesTable,
			Columns: []string{post.PostLikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PostOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostOrdersTable,
			Columns: []string{post.PostOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPostOrdersIDs(); len(nodes) > 0 && !puo.mutation.PostOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostOrdersTable,
			Columns: []string{post.PostOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PostOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.PostOrdersTable,
			Columns: []string{post.PostOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
