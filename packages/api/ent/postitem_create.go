// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/billc-dev/tuango-go/ent/orderitem"
	"github.com/billc-dev/tuango-go/ent/post"
	"github.com/billc-dev/tuango-go/ent/postitem"
)

// PostItemCreate is the builder for creating a PostItem entity.
type PostItemCreate struct {
	config
	mutation *PostItemMutation
	hooks    []Hook
}

// SetPostID sets the "post_id" field.
func (pic *PostItemCreate) SetPostID(s string) *PostItemCreate {
	pic.mutation.SetPostID(s)
	return pic
}

// SetIdentifier sets the "identifier" field.
func (pic *PostItemCreate) SetIdentifier(s string) *PostItemCreate {
	pic.mutation.SetIdentifier(s)
	return pic
}

// SetName sets the "name" field.
func (pic *PostItemCreate) SetName(s string) *PostItemCreate {
	pic.mutation.SetName(s)
	return pic
}

// SetPrice sets the "price" field.
func (pic *PostItemCreate) SetPrice(f float64) *PostItemCreate {
	pic.mutation.SetPrice(f)
	return pic
}

// SetStock sets the "stock" field.
func (pic *PostItemCreate) SetStock(f float64) *PostItemCreate {
	pic.mutation.SetStock(f)
	return pic
}

// SetID sets the "id" field.
func (pic *PostItemCreate) SetID(s string) *PostItemCreate {
	pic.mutation.SetID(s)
	return pic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pic *PostItemCreate) SetNillableID(s *string) *PostItemCreate {
	if s != nil {
		pic.SetID(*s)
	}
	return pic
}

// SetPost sets the "post" edge to the Post entity.
func (pic *PostItemCreate) SetPost(p *Post) *PostItemCreate {
	return pic.SetPostID(p.ID)
}

// AddPostItemIDs adds the "post_item" edge to the OrderItem entity by IDs.
func (pic *PostItemCreate) AddPostItemIDs(ids ...string) *PostItemCreate {
	pic.mutation.AddPostItemIDs(ids...)
	return pic
}

// AddPostItem adds the "post_item" edges to the OrderItem entity.
func (pic *PostItemCreate) AddPostItem(o ...*OrderItem) *PostItemCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pic.AddPostItemIDs(ids...)
}

// Mutation returns the PostItemMutation object of the builder.
func (pic *PostItemCreate) Mutation() *PostItemMutation {
	return pic.mutation
}

// Save creates the PostItem in the database.
func (pic *PostItemCreate) Save(ctx context.Context) (*PostItem, error) {
	pic.defaults()
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PostItemCreate) SaveX(ctx context.Context) *PostItem {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *PostItemCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *PostItemCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *PostItemCreate) defaults() {
	if _, ok := pic.mutation.ID(); !ok {
		v := postitem.DefaultID()
		pic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *PostItemCreate) check() error {
	if _, ok := pic.mutation.PostID(); !ok {
		return &ValidationError{Name: "post_id", err: errors.New(`ent: missing required field "PostItem.post_id"`)}
	}
	if _, ok := pic.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`ent: missing required field "PostItem.identifier"`)}
	}
	if _, ok := pic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PostItem.name"`)}
	}
	if _, ok := pic.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "PostItem.price"`)}
	}
	if _, ok := pic.mutation.Stock(); !ok {
		return &ValidationError{Name: "stock", err: errors.New(`ent: missing required field "PostItem.stock"`)}
	}
	if _, ok := pic.mutation.PostID(); !ok {
		return &ValidationError{Name: "post", err: errors.New(`ent: missing required edge "PostItem.post"`)}
	}
	return nil
}

func (pic *PostItemCreate) sqlSave(ctx context.Context) (*PostItem, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PostItem.ID type: %T", _spec.ID.Value)
		}
	}
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *PostItemCreate) createSpec() (*PostItem, *sqlgraph.CreateSpec) {
	var (
		_node = &PostItem{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(postitem.Table, sqlgraph.NewFieldSpec(postitem.FieldID, field.TypeString))
	)
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pic.mutation.Identifier(); ok {
		_spec.SetField(postitem.FieldIdentifier, field.TypeString, value)
		_node.Identifier = &value
	}
	if value, ok := pic.mutation.Name(); ok {
		_spec.SetField(postitem.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := pic.mutation.Price(); ok {
		_spec.SetField(postitem.FieldPrice, field.TypeFloat64, value)
		_node.Price = &value
	}
	if value, ok := pic.mutation.Stock(); ok {
		_spec.SetField(postitem.FieldStock, field.TypeFloat64, value)
		_node.Stock = &value
	}
	if nodes := pic.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postitem.PostTable,
			Columns: []string{postitem.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PostID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pic.mutation.PostItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postitem.PostItemTable,
			Columns: []string{postitem.PostItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PostItemCreateBulk is the builder for creating many PostItem entities in bulk.
type PostItemCreateBulk struct {
	config
	builders []*PostItemCreate
}

// Save creates the PostItem entities in the database.
func (picb *PostItemCreateBulk) Save(ctx context.Context) ([]*PostItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*PostItem, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *PostItemCreateBulk) SaveX(ctx context.Context) []*PostItem {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *PostItemCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *PostItemCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
