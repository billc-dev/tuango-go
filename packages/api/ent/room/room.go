// Code generated by ent, DO NOT EDIT.

package room

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the room type in the database.
	Label = "room"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLastMessage holds the string denoting the last_message field in the database.
	FieldLastMessage = "last_message"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeRoomMessages holds the string denoting the room_messages edge name in mutations.
	EdgeRoomMessages = "room_messages"
	// EdgeRoomUsers holds the string denoting the room_users edge name in mutations.
	EdgeRoomUsers = "room_users"
	// Table holds the table name of the room in the database.
	Table = "rooms"
	// RoomMessagesTable is the table that holds the room_messages relation/edge.
	RoomMessagesTable = "messages"
	// RoomMessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	RoomMessagesInverseTable = "messages"
	// RoomMessagesColumn is the table column denoting the room_messages relation/edge.
	RoomMessagesColumn = "room_id"
	// RoomUsersTable is the table that holds the room_users relation/edge.
	RoomUsersTable = "room_users"
	// RoomUsersInverseTable is the table name for the RoomUser entity.
	// It exists in this package in order to avoid circular dependency with the "roomuser" package.
	RoomUsersInverseTable = "room_users"
	// RoomUsersColumn is the table column denoting the room_users relation/edge.
	RoomUsersColumn = "room_id"
)

// Columns holds all SQL columns for room fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldName,
	FieldLastMessage,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypePrivate Type = "private"
	TypeGroup   Type = "group"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypePrivate, TypeGroup:
		return nil
	default:
		return fmt.Errorf("room: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Room queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLastMessage orders the results by the last_message field.
func ByLastMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastMessage, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRoomMessagesCount orders the results by room_messages count.
func ByRoomMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoomMessagesStep(), opts...)
	}
}

// ByRoomMessages orders the results by room_messages terms.
func ByRoomMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoomMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRoomUsersCount orders the results by room_users count.
func ByRoomUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRoomUsersStep(), opts...)
	}
}

// ByRoomUsers orders the results by room_users terms.
func ByRoomUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoomUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRoomMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoomMessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RoomMessagesTable, RoomMessagesColumn),
	)
}
func newRoomUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoomUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RoomUsersTable, RoomUsersColumn),
	)
}
