// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/billc-dev/tuango-go/ent/complete"
	"github.com/billc-dev/tuango-go/ent/schema"
	"github.com/billc-dev/tuango-go/ent/user"
)

// CompleteCreate is the builder for creating a Complete entity.
type CompleteCreate struct {
	config
	mutation *CompleteMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (cc *CompleteCreate) SetUserID(s string) *CompleteCreate {
	cc.mutation.SetUserID(s)
	return cc
}

// SetTotal sets the "total" field.
func (cc *CompleteCreate) SetTotal(f float64) *CompleteCreate {
	cc.mutation.SetTotal(f)
	return cc
}

// SetAdmin sets the "admin" field.
func (cc *CompleteCreate) SetAdmin(s string) *CompleteCreate {
	cc.mutation.SetAdmin(s)
	return cc
}

// SetLinePay sets the "line_pay" field.
func (cc *CompleteCreate) SetLinePay(b bool) *CompleteCreate {
	cc.mutation.SetLinePay(b)
	return cc
}

// SetNillableLinePay sets the "line_pay" field if the given value is not nil.
func (cc *CompleteCreate) SetNillableLinePay(b *bool) *CompleteCreate {
	if b != nil {
		cc.SetLinePay(*b)
	}
	return cc
}

// SetConfirmed sets the "confirmed" field.
func (cc *CompleteCreate) SetConfirmed(b bool) *CompleteCreate {
	cc.mutation.SetConfirmed(b)
	return cc
}

// SetNillableConfirmed sets the "confirmed" field if the given value is not nil.
func (cc *CompleteCreate) SetNillableConfirmed(b *bool) *CompleteCreate {
	if b != nil {
		cc.SetConfirmed(*b)
	}
	return cc
}

// SetOrders sets the "orders" field.
func (cc *CompleteCreate) SetOrders(so []schema.CompleteOrder) *CompleteCreate {
	cc.mutation.SetOrders(so)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CompleteCreate) SetCreatedAt(t time.Time) *CompleteCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CompleteCreate) SetNillableCreatedAt(t *time.Time) *CompleteCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CompleteCreate) SetID(s string) *CompleteCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CompleteCreate) SetNillableID(s *string) *CompleteCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// SetUser sets the "user" edge to the User entity.
func (cc *CompleteCreate) SetUser(u *User) *CompleteCreate {
	return cc.SetUserID(u.ID)
}

// Mutation returns the CompleteMutation object of the builder.
func (cc *CompleteCreate) Mutation() *CompleteMutation {
	return cc.mutation
}

// Save creates the Complete in the database.
func (cc *CompleteCreate) Save(ctx context.Context) (*Complete, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CompleteCreate) SaveX(ctx context.Context) *Complete {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CompleteCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CompleteCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CompleteCreate) defaults() {
	if _, ok := cc.mutation.LinePay(); !ok {
		v := complete.DefaultLinePay
		cc.mutation.SetLinePay(v)
	}
	if _, ok := cc.mutation.Confirmed(); !ok {
		v := complete.DefaultConfirmed
		cc.mutation.SetConfirmed(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := complete.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := complete.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CompleteCreate) check() error {
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Complete.user_id"`)}
	}
	if _, ok := cc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "Complete.total"`)}
	}
	if _, ok := cc.mutation.Admin(); !ok {
		return &ValidationError{Name: "admin", err: errors.New(`ent: missing required field "Complete.admin"`)}
	}
	if _, ok := cc.mutation.LinePay(); !ok {
		return &ValidationError{Name: "line_pay", err: errors.New(`ent: missing required field "Complete.line_pay"`)}
	}
	if _, ok := cc.mutation.Confirmed(); !ok {
		return &ValidationError{Name: "confirmed", err: errors.New(`ent: missing required field "Complete.confirmed"`)}
	}
	if _, ok := cc.mutation.Orders(); !ok {
		return &ValidationError{Name: "orders", err: errors.New(`ent: missing required field "Complete.orders"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Complete.created_at"`)}
	}
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Complete.user"`)}
	}
	return nil
}

func (cc *CompleteCreate) sqlSave(ctx context.Context) (*Complete, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Complete.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CompleteCreate) createSpec() (*Complete, *sqlgraph.CreateSpec) {
	var (
		_node = &Complete{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(complete.Table, sqlgraph.NewFieldSpec(complete.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Total(); ok {
		_spec.SetField(complete.FieldTotal, field.TypeFloat64, value)
		_node.Total = &value
	}
	if value, ok := cc.mutation.Admin(); ok {
		_spec.SetField(complete.FieldAdmin, field.TypeString, value)
		_node.Admin = &value
	}
	if value, ok := cc.mutation.LinePay(); ok {
		_spec.SetField(complete.FieldLinePay, field.TypeBool, value)
		_node.LinePay = &value
	}
	if value, ok := cc.mutation.Confirmed(); ok {
		_spec.SetField(complete.FieldConfirmed, field.TypeBool, value)
		_node.Confirmed = &value
	}
	if value, ok := cc.mutation.Orders(); ok {
		_spec.SetField(complete.FieldOrders, field.TypeJSON, value)
		_node.Orders = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(complete.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   complete.UserTable,
			Columns: []string{complete.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CompleteCreateBulk is the builder for creating many Complete entities in bulk.
type CompleteCreateBulk struct {
	config
	err      error
	builders []*CompleteCreate
}

// Save creates the Complete entities in the database.
func (ccb *CompleteCreateBulk) Save(ctx context.Context) ([]*Complete, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Complete, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CompleteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CompleteCreateBulk) SaveX(ctx context.Context) []*Complete {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CompleteCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CompleteCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
