// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/billc-dev/tuango-go/ent/orderitem"
	"github.com/billc-dev/tuango-go/ent/post"
	"github.com/billc-dev/tuango-go/ent/postitem"
	"github.com/billc-dev/tuango-go/ent/predicate"
)

// PostItemUpdate is the builder for updating PostItem entities.
type PostItemUpdate struct {
	config
	hooks     []Hook
	mutation  *PostItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PostItemUpdate builder.
func (piu *PostItemUpdate) Where(ps ...predicate.PostItem) *PostItemUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetPostID sets the "post_id" field.
func (piu *PostItemUpdate) SetPostID(s string) *PostItemUpdate {
	piu.mutation.SetPostID(s)
	return piu
}

// SetIdentifier sets the "identifier" field.
func (piu *PostItemUpdate) SetIdentifier(s string) *PostItemUpdate {
	piu.mutation.SetIdentifier(s)
	return piu
}

// SetName sets the "name" field.
func (piu *PostItemUpdate) SetName(s string) *PostItemUpdate {
	piu.mutation.SetName(s)
	return piu
}

// SetPrice sets the "price" field.
func (piu *PostItemUpdate) SetPrice(f float64) *PostItemUpdate {
	piu.mutation.ResetPrice()
	piu.mutation.SetPrice(f)
	return piu
}

// AddPrice adds f to the "price" field.
func (piu *PostItemUpdate) AddPrice(f float64) *PostItemUpdate {
	piu.mutation.AddPrice(f)
	return piu
}

// SetStock sets the "stock" field.
func (piu *PostItemUpdate) SetStock(f float64) *PostItemUpdate {
	piu.mutation.ResetStock()
	piu.mutation.SetStock(f)
	return piu
}

// AddStock adds f to the "stock" field.
func (piu *PostItemUpdate) AddStock(f float64) *PostItemUpdate {
	piu.mutation.AddStock(f)
	return piu
}

// SetPost sets the "post" edge to the Post entity.
func (piu *PostItemUpdate) SetPost(p *Post) *PostItemUpdate {
	return piu.SetPostID(p.ID)
}

// AddPostItemIDs adds the "post_item" edge to the OrderItem entity by IDs.
func (piu *PostItemUpdate) AddPostItemIDs(ids ...string) *PostItemUpdate {
	piu.mutation.AddPostItemIDs(ids...)
	return piu
}

// AddPostItem adds the "post_item" edges to the OrderItem entity.
func (piu *PostItemUpdate) AddPostItem(o ...*OrderItem) *PostItemUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return piu.AddPostItemIDs(ids...)
}

// Mutation returns the PostItemMutation object of the builder.
func (piu *PostItemUpdate) Mutation() *PostItemMutation {
	return piu.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (piu *PostItemUpdate) ClearPost() *PostItemUpdate {
	piu.mutation.ClearPost()
	return piu
}

// ClearPostItem clears all "post_item" edges to the OrderItem entity.
func (piu *PostItemUpdate) ClearPostItem() *PostItemUpdate {
	piu.mutation.ClearPostItem()
	return piu
}

// RemovePostItemIDs removes the "post_item" edge to OrderItem entities by IDs.
func (piu *PostItemUpdate) RemovePostItemIDs(ids ...string) *PostItemUpdate {
	piu.mutation.RemovePostItemIDs(ids...)
	return piu
}

// RemovePostItem removes "post_item" edges to OrderItem entities.
func (piu *PostItemUpdate) RemovePostItem(o ...*OrderItem) *PostItemUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return piu.RemovePostItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PostItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PostItemUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PostItemUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PostItemUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *PostItemUpdate) check() error {
	if _, ok := piu.mutation.PostID(); piu.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PostItem.post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (piu *PostItemUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostItemUpdate {
	piu.modifiers = append(piu.modifiers, modifiers...)
	return piu
}

func (piu *PostItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := piu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(postitem.Table, postitem.Columns, sqlgraph.NewFieldSpec(postitem.FieldID, field.TypeString))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.Identifier(); ok {
		_spec.SetField(postitem.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := piu.mutation.Name(); ok {
		_spec.SetField(postitem.FieldName, field.TypeString, value)
	}
	if value, ok := piu.mutation.Price(); ok {
		_spec.SetField(postitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := piu.mutation.AddedPrice(); ok {
		_spec.AddField(postitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := piu.mutation.Stock(); ok {
		_spec.SetField(postitem.FieldStock, field.TypeFloat64, value)
	}
	if value, ok := piu.mutation.AddedStock(); ok {
		_spec.AddField(postitem.FieldStock, field.TypeFloat64, value)
	}
	if piu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postitem.PostTable,
			Columns: []string{postitem.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postitem.PostTable,
			Columns: []string{postitem.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.PostItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postitem.PostItemTable,
			Columns: []string{postitem.PostItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.RemovedPostItemIDs(); len(nodes) > 0 && !piu.mutation.PostItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postitem.PostItemTable,
			Columns: []string{postitem.PostItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.PostItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postitem.PostItemTable,
			Columns: []string{postitem.PostItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(piu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PostItemUpdateOne is the builder for updating a single PostItem entity.
type PostItemUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PostItemMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetPostID sets the "post_id" field.
func (piuo *PostItemUpdateOne) SetPostID(s string) *PostItemUpdateOne {
	piuo.mutation.SetPostID(s)
	return piuo
}

// SetIdentifier sets the "identifier" field.
func (piuo *PostItemUpdateOne) SetIdentifier(s string) *PostItemUpdateOne {
	piuo.mutation.SetIdentifier(s)
	return piuo
}

// SetName sets the "name" field.
func (piuo *PostItemUpdateOne) SetName(s string) *PostItemUpdateOne {
	piuo.mutation.SetName(s)
	return piuo
}

// SetPrice sets the "price" field.
func (piuo *PostItemUpdateOne) SetPrice(f float64) *PostItemUpdateOne {
	piuo.mutation.ResetPrice()
	piuo.mutation.SetPrice(f)
	return piuo
}

// AddPrice adds f to the "price" field.
func (piuo *PostItemUpdateOne) AddPrice(f float64) *PostItemUpdateOne {
	piuo.mutation.AddPrice(f)
	return piuo
}

// SetStock sets the "stock" field.
func (piuo *PostItemUpdateOne) SetStock(f float64) *PostItemUpdateOne {
	piuo.mutation.ResetStock()
	piuo.mutation.SetStock(f)
	return piuo
}

// AddStock adds f to the "stock" field.
func (piuo *PostItemUpdateOne) AddStock(f float64) *PostItemUpdateOne {
	piuo.mutation.AddStock(f)
	return piuo
}

// SetPost sets the "post" edge to the Post entity.
func (piuo *PostItemUpdateOne) SetPost(p *Post) *PostItemUpdateOne {
	return piuo.SetPostID(p.ID)
}

// AddPostItemIDs adds the "post_item" edge to the OrderItem entity by IDs.
func (piuo *PostItemUpdateOne) AddPostItemIDs(ids ...string) *PostItemUpdateOne {
	piuo.mutation.AddPostItemIDs(ids...)
	return piuo
}

// AddPostItem adds the "post_item" edges to the OrderItem entity.
func (piuo *PostItemUpdateOne) AddPostItem(o ...*OrderItem) *PostItemUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return piuo.AddPostItemIDs(ids...)
}

// Mutation returns the PostItemMutation object of the builder.
func (piuo *PostItemUpdateOne) Mutation() *PostItemMutation {
	return piuo.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (piuo *PostItemUpdateOne) ClearPost() *PostItemUpdateOne {
	piuo.mutation.ClearPost()
	return piuo
}

// ClearPostItem clears all "post_item" edges to the OrderItem entity.
func (piuo *PostItemUpdateOne) ClearPostItem() *PostItemUpdateOne {
	piuo.mutation.ClearPostItem()
	return piuo
}

// RemovePostItemIDs removes the "post_item" edge to OrderItem entities by IDs.
func (piuo *PostItemUpdateOne) RemovePostItemIDs(ids ...string) *PostItemUpdateOne {
	piuo.mutation.RemovePostItemIDs(ids...)
	return piuo
}

// RemovePostItem removes "post_item" edges to OrderItem entities.
func (piuo *PostItemUpdateOne) RemovePostItem(o ...*OrderItem) *PostItemUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return piuo.RemovePostItemIDs(ids...)
}

// Where appends a list predicates to the PostItemUpdate builder.
func (piuo *PostItemUpdateOne) Where(ps ...predicate.PostItem) *PostItemUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PostItemUpdateOne) Select(field string, fields ...string) *PostItemUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PostItem entity.
func (piuo *PostItemUpdateOne) Save(ctx context.Context) (*PostItem, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PostItemUpdateOne) SaveX(ctx context.Context) *PostItem {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PostItemUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PostItemUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *PostItemUpdateOne) check() error {
	if _, ok := piuo.mutation.PostID(); piuo.mutation.PostCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PostItem.post"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (piuo *PostItemUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostItemUpdateOne {
	piuo.modifiers = append(piuo.modifiers, modifiers...)
	return piuo
}

func (piuo *PostItemUpdateOne) sqlSave(ctx context.Context) (_node *PostItem, err error) {
	if err := piuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(postitem.Table, postitem.Columns, sqlgraph.NewFieldSpec(postitem.FieldID, field.TypeString))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PostItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, postitem.FieldID)
		for _, f := range fields {
			if !postitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != postitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.Identifier(); ok {
		_spec.SetField(postitem.FieldIdentifier, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Name(); ok {
		_spec.SetField(postitem.FieldName, field.TypeString, value)
	}
	if value, ok := piuo.mutation.Price(); ok {
		_spec.SetField(postitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := piuo.mutation.AddedPrice(); ok {
		_spec.AddField(postitem.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := piuo.mutation.Stock(); ok {
		_spec.SetField(postitem.FieldStock, field.TypeFloat64, value)
	}
	if value, ok := piuo.mutation.AddedStock(); ok {
		_spec.AddField(postitem.FieldStock, field.TypeFloat64, value)
	}
	if piuo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postitem.PostTable,
			Columns: []string{postitem.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postitem.PostTable,
			Columns: []string{postitem.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.PostItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postitem.PostItemTable,
			Columns: []string{postitem.PostItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.RemovedPostItemIDs(); len(nodes) > 0 && !piuo.mutation.PostItemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postitem.PostItemTable,
			Columns: []string{postitem.PostItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.PostItemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postitem.PostItemTable,
			Columns: []string{postitem.PostItemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orderitem.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(piuo.modifiers...)
	_node = &PostItem{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
