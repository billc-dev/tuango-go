// Code generated by ent, DO NOT EDIT.

package complete

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/billc-dev/tuango-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Complete {
	return predicate.Complete(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Complete {
	return predicate.Complete(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Complete {
	return predicate.Complete(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Complete {
	return predicate.Complete(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Complete {
	return predicate.Complete(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Complete {
	return predicate.Complete(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Complete {
	return predicate.Complete(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Complete {
	return predicate.Complete(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Complete {
	return predicate.Complete(sql.FieldContainsFold(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldUserID, v))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v float64) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldTotal, v))
}

// Admin applies equality check predicate on the "admin" field. It's identical to AdminEQ.
func Admin(v string) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldAdmin, v))
}

// LinePay applies equality check predicate on the "line_pay" field. It's identical to LinePayEQ.
func LinePay(v bool) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldLinePay, v))
}

// Confirmed applies equality check predicate on the "confirmed" field. It's identical to ConfirmedEQ.
func Confirmed(v bool) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldConfirmed, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Complete {
	return predicate.Complete(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Complete {
	return predicate.Complete(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Complete {
	return predicate.Complete(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Complete {
	return predicate.Complete(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Complete {
	return predicate.Complete(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Complete {
	return predicate.Complete(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Complete {
	return predicate.Complete(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Complete {
	return predicate.Complete(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Complete {
	return predicate.Complete(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Complete {
	return predicate.Complete(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Complete {
	return predicate.Complete(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Complete {
	return predicate.Complete(sql.FieldContainsFold(FieldUserID, v))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v float64) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v float64) predicate.Complete {
	return predicate.Complete(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...float64) predicate.Complete {
	return predicate.Complete(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...float64) predicate.Complete {
	return predicate.Complete(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v float64) predicate.Complete {
	return predicate.Complete(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v float64) predicate.Complete {
	return predicate.Complete(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v float64) predicate.Complete {
	return predicate.Complete(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v float64) predicate.Complete {
	return predicate.Complete(sql.FieldLTE(FieldTotal, v))
}

// AdminEQ applies the EQ predicate on the "admin" field.
func AdminEQ(v string) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldAdmin, v))
}

// AdminNEQ applies the NEQ predicate on the "admin" field.
func AdminNEQ(v string) predicate.Complete {
	return predicate.Complete(sql.FieldNEQ(FieldAdmin, v))
}

// AdminIn applies the In predicate on the "admin" field.
func AdminIn(vs ...string) predicate.Complete {
	return predicate.Complete(sql.FieldIn(FieldAdmin, vs...))
}

// AdminNotIn applies the NotIn predicate on the "admin" field.
func AdminNotIn(vs ...string) predicate.Complete {
	return predicate.Complete(sql.FieldNotIn(FieldAdmin, vs...))
}

// AdminGT applies the GT predicate on the "admin" field.
func AdminGT(v string) predicate.Complete {
	return predicate.Complete(sql.FieldGT(FieldAdmin, v))
}

// AdminGTE applies the GTE predicate on the "admin" field.
func AdminGTE(v string) predicate.Complete {
	return predicate.Complete(sql.FieldGTE(FieldAdmin, v))
}

// AdminLT applies the LT predicate on the "admin" field.
func AdminLT(v string) predicate.Complete {
	return predicate.Complete(sql.FieldLT(FieldAdmin, v))
}

// AdminLTE applies the LTE predicate on the "admin" field.
func AdminLTE(v string) predicate.Complete {
	return predicate.Complete(sql.FieldLTE(FieldAdmin, v))
}

// AdminContains applies the Contains predicate on the "admin" field.
func AdminContains(v string) predicate.Complete {
	return predicate.Complete(sql.FieldContains(FieldAdmin, v))
}

// AdminHasPrefix applies the HasPrefix predicate on the "admin" field.
func AdminHasPrefix(v string) predicate.Complete {
	return predicate.Complete(sql.FieldHasPrefix(FieldAdmin, v))
}

// AdminHasSuffix applies the HasSuffix predicate on the "admin" field.
func AdminHasSuffix(v string) predicate.Complete {
	return predicate.Complete(sql.FieldHasSuffix(FieldAdmin, v))
}

// AdminEqualFold applies the EqualFold predicate on the "admin" field.
func AdminEqualFold(v string) predicate.Complete {
	return predicate.Complete(sql.FieldEqualFold(FieldAdmin, v))
}

// AdminContainsFold applies the ContainsFold predicate on the "admin" field.
func AdminContainsFold(v string) predicate.Complete {
	return predicate.Complete(sql.FieldContainsFold(FieldAdmin, v))
}

// LinePayEQ applies the EQ predicate on the "line_pay" field.
func LinePayEQ(v bool) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldLinePay, v))
}

// LinePayNEQ applies the NEQ predicate on the "line_pay" field.
func LinePayNEQ(v bool) predicate.Complete {
	return predicate.Complete(sql.FieldNEQ(FieldLinePay, v))
}

// ConfirmedEQ applies the EQ predicate on the "confirmed" field.
func ConfirmedEQ(v bool) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldConfirmed, v))
}

// ConfirmedNEQ applies the NEQ predicate on the "confirmed" field.
func ConfirmedNEQ(v bool) predicate.Complete {
	return predicate.Complete(sql.FieldNEQ(FieldConfirmed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Complete {
	return predicate.Complete(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Complete {
	return predicate.Complete(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Complete {
	return predicate.Complete(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Complete {
	return predicate.Complete(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Complete {
	return predicate.Complete(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Complete {
	return predicate.Complete(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Complete {
	return predicate.Complete(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Complete {
	return predicate.Complete(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Complete {
	return predicate.Complete(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Complete {
	return predicate.Complete(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Complete) predicate.Complete {
	return predicate.Complete(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Complete) predicate.Complete {
	return predicate.Complete(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Complete) predicate.Complete {
	return predicate.Complete(sql.NotPredicates(p))
}
