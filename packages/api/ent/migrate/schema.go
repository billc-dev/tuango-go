// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "comment", Type: field.TypeString, Size: 2147483647},
		{Name: "replies", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "post_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_posts_post_comments",
				Columns:    []*schema.Column{CommentsColumns[4]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "comments_users_user_comments",
				Columns:    []*schema.Column{CommentsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "comment_user_id",
				Unique:  false,
				Columns: []*schema.Column{CommentsColumns[5]},
			},
			{
				Name:    "comment_post_id",
				Unique:  false,
				Columns: []*schema.Column{CommentsColumns[4]},
			},
			{
				Name:    "comment_created_at",
				Unique:  false,
				Columns: []*schema.Column{CommentsColumns[3]},
			},
		},
	}
	// CompletesColumns holds the columns for the "completes" table.
	CompletesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "total", Type: field.TypeFloat64},
		{Name: "admin", Type: field.TypeString},
		{Name: "line_pay", Type: field.TypeBool, Default: false},
		{Name: "confirmed", Type: field.TypeBool, Default: false},
		{Name: "orders", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeString},
	}
	// CompletesTable holds the schema information for the "completes" table.
	CompletesTable = &schema.Table{
		Name:       "completes",
		Columns:    CompletesColumns,
		PrimaryKey: []*schema.Column{CompletesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "completes_users_user_completes",
				Columns:    []*schema.Column{CompletesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "complete_user_id",
				Unique:  false,
				Columns: []*schema.Column{CompletesColumns[7]},
			},
			{
				Name:    "complete_created_at",
				Unique:  false,
				Columns: []*schema.Column{CompletesColumns[6]},
			},
		},
	}
	// DeliversColumns holds the columns for the "delivers" table.
	DeliversColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "normal_orders", Type: field.TypeJSON},
		{Name: "extra_orders", Type: field.TypeJSON},
		{Name: "normal_total", Type: field.TypeFloat64, Default: 0},
		{Name: "normal_fee", Type: field.TypeFloat64, Default: 0},
		{Name: "extra_total", Type: field.TypeFloat64, Default: 0},
		{Name: "extra_fee", Type: field.TypeFloat64, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "post_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// DeliversTable holds the schema information for the "delivers" table.
	DeliversTable = &schema.Table{
		Name:       "delivers",
		Columns:    DeliversColumns,
		PrimaryKey: []*schema.Column{DeliversColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "delivers_posts_post_delivers",
				Columns:    []*schema.Column{DeliversColumns[9]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "delivers_users_user_delivers",
				Columns:    []*schema.Column{DeliversColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "deliver_user_id",
				Unique:  false,
				Columns: []*schema.Column{DeliversColumns[10]},
			},
			{
				Name:    "deliver_post_id",
				Unique:  false,
				Columns: []*schema.Column{DeliversColumns[9]},
			},
			{
				Name:    "deliver_created_at",
				Unique:  false,
				Columns: []*schema.Column{DeliversColumns[7]},
			},
		},
	}
	// LikesColumns holds the columns for the "likes" table.
	LikesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "post_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// LikesTable holds the schema information for the "likes" table.
	LikesTable = &schema.Table{
		Name:       "likes",
		Columns:    LikesColumns,
		PrimaryKey: []*schema.Column{LikesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "likes_posts_post_likes",
				Columns:    []*schema.Column{LikesColumns[2]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "likes_users_user_likes",
				Columns:    []*schema.Column{LikesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "like_user_id",
				Unique:  false,
				Columns: []*schema.Column{LikesColumns[3]},
			},
			{
				Name:    "like_post_id",
				Unique:  false,
				Columns: []*schema.Column{LikesColumns[2]},
			},
		},
	}
	// MessagesColumns holds the columns for the "messages" table.
	MessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "post_id", Type: field.TypeString, Nullable: true},
		{Name: "order_id", Type: field.TypeString, Nullable: true},
		{Name: "text", Type: field.TypeString, Nullable: true},
		{Name: "image", Type: field.TypeJSON, Nullable: true},
		{Name: "unsent", Type: field.TypeBool, Default: false},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"text", "imageUrl", "post", "order", "deliver", "complete"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "room_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// MessagesTable holds the schema information for the "messages" table.
	MessagesTable = &schema.Table{
		Name:       "messages",
		Columns:    MessagesColumns,
		PrimaryKey: []*schema.Column{MessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "messages_rooms_room_messages",
				Columns:    []*schema.Column{MessagesColumns[9]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "messages_users_user_messages",
				Columns:    []*schema.Column{MessagesColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// NotificationsColumns holds the columns for the "notifications" table.
	NotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "text", Type: field.TypeString},
		{Name: "query", Type: field.TypeJSON},
		{Name: "users", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
	}
	// NotificationsTable holds the schema information for the "notifications" table.
	NotificationsTable = &schema.Table{
		Name:       "notifications",
		Columns:    NotificationsColumns,
		PrimaryKey: []*schema.Column{NotificationsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "notification_created_at",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[4]},
			},
		},
	}
	// NotifiesColumns holds the columns for the "notifies" table.
	NotifiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "user_id", Type: field.TypeString},
		{Name: "line_token", Type: field.TypeString},
		{Name: "fb_token", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// NotifiesTable holds the schema information for the "notifies" table.
	NotifiesTable = &schema.Table{
		Name:       "notifies",
		Columns:    NotifiesColumns,
		PrimaryKey: []*schema.Column{NotifiesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "notify_user_id",
				Unique:  false,
				Columns: []*schema.Column{NotifiesColumns[1]},
			},
		},
	}
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "order_num", Type: field.TypeInt},
		{Name: "comment", Type: field.TypeString, Default: ""},
		{Name: "seller_comment", Type: field.TypeString, Default: ""},
		{Name: "has_name", Type: field.TypeBool, Default: false},
		{Name: "is_extra", Type: field.TypeBool, Default: false},
		{Name: "fb", Type: field.TypeBool, Default: false},
		{Name: "is_in_stock", Type: field.TypeBool, Default: false},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"ordered", "confirmed", "delivered", "completed", "missing", "canceled"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "post_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:       "orders",
		Columns:    OrdersColumns,
		PrimaryKey: []*schema.Column{OrdersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "orders_posts_post_orders",
				Columns:    []*schema.Column{OrdersColumns[11]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "orders_users_user_orders",
				Columns:    []*schema.Column{OrdersColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "order_user_id",
				Unique:  false,
				Columns: []*schema.Column{OrdersColumns[12]},
			},
			{
				Name:    "order_post_id",
				Unique:  false,
				Columns: []*schema.Column{OrdersColumns[11]},
			},
			{
				Name:    "order_created_at",
				Unique:  false,
				Columns: []*schema.Column{OrdersColumns[9]},
			},
		},
	}
	// OrderHistoriesColumns holds the columns for the "order_histories" table.
	OrderHistoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"ordered", "confirmed", "delivered", "completed", "missing", "canceled"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "order_id", Type: field.TypeString},
	}
	// OrderHistoriesTable holds the schema information for the "order_histories" table.
	OrderHistoriesTable = &schema.Table{
		Name:       "order_histories",
		Columns:    OrderHistoriesColumns,
		PrimaryKey: []*schema.Column{OrderHistoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "order_histories_orders_order_histories",
				Columns:    []*schema.Column{OrderHistoriesColumns[3]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "orderhistory_order_id",
				Unique:  false,
				Columns: []*schema.Column{OrderHistoriesColumns[3]},
			},
			{
				Name:    "orderhistory_created_at",
				Unique:  false,
				Columns: []*schema.Column{OrderHistoriesColumns[2]},
			},
		},
	}
	// OrderItemsColumns holds the columns for the "order_items" table.
	OrderItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "identifier", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "price", Type: field.TypeFloat64},
		{Name: "qty", Type: field.TypeFloat64},
		{Name: "location", Type: field.TypeString, Default: ""},
		{Name: "has_name", Type: field.TypeBool, Default: false},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"ordered", "confirmed", "delivered", "completed", "missing", "canceled"}},
		{Name: "order_id", Type: field.TypeString},
		{Name: "post_item_id", Type: field.TypeString},
	}
	// OrderItemsTable holds the schema information for the "order_items" table.
	OrderItemsTable = &schema.Table{
		Name:       "order_items",
		Columns:    OrderItemsColumns,
		PrimaryKey: []*schema.Column{OrderItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "order_items_orders_order_items",
				Columns:    []*schema.Column{OrderItemsColumns[8]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "order_items_post_items_post_item",
				Columns:    []*schema.Column{OrderItemsColumns[9]},
				RefColumns: []*schema.Column{PostItemsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "orderitem_order_id",
				Unique:  false,
				Columns: []*schema.Column{OrderItemsColumns[8]},
			},
		},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "post_num", Type: field.TypeInt},
		{Name: "title", Type: field.TypeString},
		{Name: "body", Type: field.TypeString, Size: 2147483647},
		{Name: "deadline", Type: field.TypeString, Size: 10, Default: ""},
		{Name: "delivery_date", Type: field.TypeString, Size: 10, Default: ""},
		{Name: "like_count", Type: field.TypeInt, Default: 0},
		{Name: "comment_count", Type: field.TypeInt, Default: 0},
		{Name: "order_count", Type: field.TypeInt, Default: 0},
		{Name: "images", Type: field.TypeJSON},
		{Name: "storage_type", Type: field.TypeEnum, Enums: []string{"roomTemp", "farmGoods", "refrigerated", "frozen"}},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"open", "closed", "completed", "canceled"}, Default: "open"},
		{Name: "comment", Type: field.TypeString, Default: ""},
		{Name: "delivered", Type: field.TypeBool, Default: false},
		{Name: "is_in_stock", Type: field.TypeBool, Default: false},
		{Name: "normal_total", Type: field.TypeFloat64, Default: 0},
		{Name: "normal_fee", Type: field.TypeFloat64, Default: 0},
		{Name: "extra_total", Type: field.TypeFloat64, Default: 0},
		{Name: "extra_fee", Type: field.TypeFloat64, Default: 0},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "seller_id", Type: field.TypeString},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "posts_users_posts",
				Columns:    []*schema.Column{PostsColumns[21]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "post_seller_id",
				Unique:  false,
				Columns: []*schema.Column{PostsColumns[21]},
			},
			{
				Name:    "post_post_num",
				Unique:  false,
				Columns: []*schema.Column{PostsColumns[1]},
			},
			{
				Name:    "post_created_at",
				Unique:  false,
				Columns: []*schema.Column{PostsColumns[19]},
			},
		},
	}
	// PostItemsColumns holds the columns for the "post_items" table.
	PostItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "identifier", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "price", Type: field.TypeFloat64},
		{Name: "stock", Type: field.TypeFloat64},
		{Name: "post_id", Type: field.TypeString},
	}
	// PostItemsTable holds the schema information for the "post_items" table.
	PostItemsTable = &schema.Table{
		Name:       "post_items",
		Columns:    PostItemsColumns,
		PrimaryKey: []*schema.Column{PostItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "post_items_posts_post_items",
				Columns:    []*schema.Column{PostItemsColumns[5]},
				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "postitem_post_id",
				Unique:  false,
				Columns: []*schema.Column{PostItemsColumns[5]},
			},
		},
	}
	// RoomsColumns holds the columns for the "rooms" table.
	RoomsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"private", "group"}},
		{Name: "name", Type: field.TypeString},
		{Name: "last_message", Type: field.TypeString},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// RoomsTable holds the schema information for the "rooms" table.
	RoomsTable = &schema.Table{
		Name:       "rooms",
		Columns:    RoomsColumns,
		PrimaryKey: []*schema.Column{RoomsColumns[0]},
	}
	// RoomUsersColumns holds the columns for the "room_users" table.
	RoomUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "last_read_message_id", Type: field.TypeString},
		{Name: "room_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// RoomUsersTable holds the schema information for the "room_users" table.
	RoomUsersTable = &schema.Table{
		Name:       "room_users",
		Columns:    RoomUsersColumns,
		PrimaryKey: []*schema.Column{RoomUsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "room_users_rooms_room_users",
				Columns:    []*schema.Column{RoomUsersColumns[2]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "room_users_users_user_rooms",
				Columns:    []*schema.Column{RoomUsersColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "roomuser_room_id_user_id",
				Unique:  true,
				Columns: []*schema.Column{RoomUsersColumns[2], RoomUsersColumns[3]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "display_name", Type: field.TypeString},
		{Name: "picture_url", Type: field.TypeString},
		{Name: "pickup_num", Type: field.TypeFloat64},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"basic", "seller", "admin"}, Default: "basic"},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"registered", "approved", "blocked"}, Default: "registered"},
		{Name: "notified", Type: field.TypeBool, Default: false},
		{Name: "line_pay", Type: field.TypeBool, Default: false},
		{Name: "fb", Type: field.TypeBool, Default: false},
		{Name: "comment", Type: field.TypeString, Default: ""},
		{Name: "delivered_order_count_limit", Type: field.TypeInt, Default: 10},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_username",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[1]},
			},
			{
				Name:    "user_pickup_num",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[4]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CommentsTable,
		CompletesTable,
		DeliversTable,
		LikesTable,
		MessagesTable,
		NotificationsTable,
		NotifiesTable,
		OrdersTable,
		OrderHistoriesTable,
		OrderItemsTable,
		PostsTable,
		PostItemsTable,
		RoomsTable,
		RoomUsersTable,
		UsersTable,
	}
)

func init() {
	CommentsTable.ForeignKeys[0].RefTable = PostsTable
	CommentsTable.ForeignKeys[1].RefTable = UsersTable
	CompletesTable.ForeignKeys[0].RefTable = UsersTable
	DeliversTable.ForeignKeys[0].RefTable = PostsTable
	DeliversTable.ForeignKeys[1].RefTable = UsersTable
	LikesTable.ForeignKeys[0].RefTable = PostsTable
	LikesTable.ForeignKeys[1].RefTable = UsersTable
	MessagesTable.ForeignKeys[0].RefTable = RoomsTable
	MessagesTable.ForeignKeys[1].RefTable = UsersTable
	OrdersTable.ForeignKeys[0].RefTable = PostsTable
	OrdersTable.ForeignKeys[1].RefTable = UsersTable
	OrderHistoriesTable.ForeignKeys[0].RefTable = OrdersTable
	OrderItemsTable.ForeignKeys[0].RefTable = OrdersTable
	OrderItemsTable.ForeignKeys[1].RefTable = PostItemsTable
	PostsTable.ForeignKeys[0].RefTable = UsersTable
	PostItemsTable.ForeignKeys[0].RefTable = PostsTable
	RoomUsersTable.ForeignKeys[0].RefTable = RoomsTable
	RoomUsersTable.ForeignKeys[1].RefTable = UsersTable
}
