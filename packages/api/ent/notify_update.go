// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/billc-dev/tuango-go/ent/notify"
	"github.com/billc-dev/tuango-go/ent/predicate"
)

// NotifyUpdate is the builder for updating Notify entities.
type NotifyUpdate struct {
	config
	hooks     []Hook
	mutation  *NotifyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the NotifyUpdate builder.
func (nu *NotifyUpdate) Where(ps ...predicate.Notify) *NotifyUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUserID sets the "user_id" field.
func (nu *NotifyUpdate) SetUserID(s string) *NotifyUpdate {
	nu.mutation.SetUserID(s)
	return nu
}

// SetLineToken sets the "line_token" field.
func (nu *NotifyUpdate) SetLineToken(s string) *NotifyUpdate {
	nu.mutation.SetLineToken(s)
	return nu
}

// SetFbToken sets the "fb_token" field.
func (nu *NotifyUpdate) SetFbToken(s string) *NotifyUpdate {
	nu.mutation.SetFbToken(s)
	return nu
}

// SetCreatedAt sets the "created_at" field.
func (nu *NotifyUpdate) SetCreatedAt(t time.Time) *NotifyUpdate {
	nu.mutation.SetCreatedAt(t)
	return nu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nu *NotifyUpdate) SetNillableCreatedAt(t *time.Time) *NotifyUpdate {
	if t != nil {
		nu.SetCreatedAt(*t)
	}
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NotifyUpdate) SetUpdatedAt(t time.Time) *NotifyUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// Mutation returns the NotifyMutation object of the builder.
func (nu *NotifyUpdate) Mutation() *NotifyMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotifyUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotifyUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotifyUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotifyUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NotifyUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := notify.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nu *NotifyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotifyUpdate {
	nu.modifiers = append(nu.modifiers, modifiers...)
	return nu
}

func (nu *NotifyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(notify.Table, notify.Columns, sqlgraph.NewFieldSpec(notify.FieldID, field.TypeString))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UserID(); ok {
		_spec.SetField(notify.FieldUserID, field.TypeString, value)
	}
	if value, ok := nu.mutation.LineToken(); ok {
		_spec.SetField(notify.FieldLineToken, field.TypeString, value)
	}
	if value, ok := nu.mutation.FbToken(); ok {
		_spec.SetField(notify.FieldFbToken, field.TypeString, value)
	}
	if value, ok := nu.mutation.CreatedAt(); ok {
		_spec.SetField(notify.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(notify.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(nu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notify.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NotifyUpdateOne is the builder for updating a single Notify entity.
type NotifyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *NotifyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (nuo *NotifyUpdateOne) SetUserID(s string) *NotifyUpdateOne {
	nuo.mutation.SetUserID(s)
	return nuo
}

// SetLineToken sets the "line_token" field.
func (nuo *NotifyUpdateOne) SetLineToken(s string) *NotifyUpdateOne {
	nuo.mutation.SetLineToken(s)
	return nuo
}

// SetFbToken sets the "fb_token" field.
func (nuo *NotifyUpdateOne) SetFbToken(s string) *NotifyUpdateOne {
	nuo.mutation.SetFbToken(s)
	return nuo
}

// SetCreatedAt sets the "created_at" field.
func (nuo *NotifyUpdateOne) SetCreatedAt(t time.Time) *NotifyUpdateOne {
	nuo.mutation.SetCreatedAt(t)
	return nuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuo *NotifyUpdateOne) SetNillableCreatedAt(t *time.Time) *NotifyUpdateOne {
	if t != nil {
		nuo.SetCreatedAt(*t)
	}
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NotifyUpdateOne) SetUpdatedAt(t time.Time) *NotifyUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// Mutation returns the NotifyMutation object of the builder.
func (nuo *NotifyUpdateOne) Mutation() *NotifyMutation {
	return nuo.mutation
}

// Where appends a list predicates to the NotifyUpdate builder.
func (nuo *NotifyUpdateOne) Where(ps ...predicate.Notify) *NotifyUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotifyUpdateOne) Select(field string, fields ...string) *NotifyUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notify entity.
func (nuo *NotifyUpdateOne) Save(ctx context.Context) (*Notify, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotifyUpdateOne) SaveX(ctx context.Context) *Notify {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotifyUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotifyUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NotifyUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := notify.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (nuo *NotifyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *NotifyUpdateOne {
	nuo.modifiers = append(nuo.modifiers, modifiers...)
	return nuo
}

func (nuo *NotifyUpdateOne) sqlSave(ctx context.Context) (_node *Notify, err error) {
	_spec := sqlgraph.NewUpdateSpec(notify.Table, notify.Columns, sqlgraph.NewFieldSpec(notify.FieldID, field.TypeString))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notify.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notify.FieldID)
		for _, f := range fields {
			if !notify.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notify.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UserID(); ok {
		_spec.SetField(notify.FieldUserID, field.TypeString, value)
	}
	if value, ok := nuo.mutation.LineToken(); ok {
		_spec.SetField(notify.FieldLineToken, field.TypeString, value)
	}
	if value, ok := nuo.mutation.FbToken(); ok {
		_spec.SetField(notify.FieldFbToken, field.TypeString, value)
	}
	if value, ok := nuo.mutation.CreatedAt(); ok {
		_spec.SetField(notify.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(notify.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(nuo.modifiers...)
	_node = &Notify{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notify.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
