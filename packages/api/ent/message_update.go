// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/billc-dev/tuango-go/ent/message"
	"github.com/billc-dev/tuango-go/ent/predicate"
	"github.com/billc-dev/tuango-go/ent/room"
	"github.com/billc-dev/tuango-go/ent/schema"
	"github.com/billc-dev/tuango-go/ent/user"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks     []Hook
	mutation  *MessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetRoomID sets the "room_id" field.
func (mu *MessageUpdate) SetRoomID(s string) *MessageUpdate {
	mu.mutation.SetRoomID(s)
	return mu
}

// SetUserID sets the "user_id" field.
func (mu *MessageUpdate) SetUserID(s string) *MessageUpdate {
	mu.mutation.SetUserID(s)
	return mu
}

// SetPostID sets the "post_id" field.
func (mu *MessageUpdate) SetPostID(s string) *MessageUpdate {
	mu.mutation.SetPostID(s)
	return mu
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillablePostID(s *string) *MessageUpdate {
	if s != nil {
		mu.SetPostID(*s)
	}
	return mu
}

// ClearPostID clears the value of the "post_id" field.
func (mu *MessageUpdate) ClearPostID() *MessageUpdate {
	mu.mutation.ClearPostID()
	return mu
}

// SetOrderID sets the "order_id" field.
func (mu *MessageUpdate) SetOrderID(s string) *MessageUpdate {
	mu.mutation.SetOrderID(s)
	return mu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableOrderID(s *string) *MessageUpdate {
	if s != nil {
		mu.SetOrderID(*s)
	}
	return mu
}

// ClearOrderID clears the value of the "order_id" field.
func (mu *MessageUpdate) ClearOrderID() *MessageUpdate {
	mu.mutation.ClearOrderID()
	return mu
}

// SetText sets the "text" field.
func (mu *MessageUpdate) SetText(s string) *MessageUpdate {
	mu.mutation.SetText(s)
	return mu
}

// SetNillableText sets the "text" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableText(s *string) *MessageUpdate {
	if s != nil {
		mu.SetText(*s)
	}
	return mu
}

// ClearText clears the value of the "text" field.
func (mu *MessageUpdate) ClearText() *MessageUpdate {
	mu.mutation.ClearText()
	return mu
}

// SetImage sets the "image" field.
func (mu *MessageUpdate) SetImage(s schema.Image) *MessageUpdate {
	mu.mutation.SetImage(s)
	return mu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableImage(s *schema.Image) *MessageUpdate {
	if s != nil {
		mu.SetImage(*s)
	}
	return mu
}

// ClearImage clears the value of the "image" field.
func (mu *MessageUpdate) ClearImage() *MessageUpdate {
	mu.mutation.ClearImage()
	return mu
}

// SetUnsent sets the "unsent" field.
func (mu *MessageUpdate) SetUnsent(b bool) *MessageUpdate {
	mu.mutation.SetUnsent(b)
	return mu
}

// SetNillableUnsent sets the "unsent" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableUnsent(b *bool) *MessageUpdate {
	if b != nil {
		mu.SetUnsent(*b)
	}
	return mu
}

// SetType sets the "type" field.
func (mu *MessageUpdate) SetType(m message.Type) *MessageUpdate {
	mu.mutation.SetType(m)
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MessageUpdate) SetCreatedAt(t time.Time) *MessageUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableCreatedAt(t *time.Time) *MessageUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MessageUpdate) SetUpdatedAt(t time.Time) *MessageUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetRoom sets the "room" edge to the Room entity.
func (mu *MessageUpdate) SetRoom(r *Room) *MessageUpdate {
	return mu.SetRoomID(r.ID)
}

// SetUser sets the "user" edge to the User entity.
func (mu *MessageUpdate) SetUser(u *User) *MessageUpdate {
	return mu.SetUserID(u.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (mu *MessageUpdate) ClearRoom() *MessageUpdate {
	mu.mutation.ClearRoom()
	return mu
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MessageUpdate) ClearUser() *MessageUpdate {
	mu.mutation.ClearUser()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MessageUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MessageUpdate) check() error {
	if v, ok := mu.mutation.GetType(); ok {
		if err := message.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Message.type": %w`, err)}
		}
	}
	if _, ok := mu.mutation.RoomID(); mu.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.room"`)
	}
	if _, ok := mu.mutation.UserID(); mu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MessageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MessageUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.PostID(); ok {
		_spec.SetField(message.FieldPostID, field.TypeString, value)
	}
	if mu.mutation.PostIDCleared() {
		_spec.ClearField(message.FieldPostID, field.TypeString)
	}
	if value, ok := mu.mutation.OrderID(); ok {
		_spec.SetField(message.FieldOrderID, field.TypeString, value)
	}
	if mu.mutation.OrderIDCleared() {
		_spec.ClearField(message.FieldOrderID, field.TypeString)
	}
	if value, ok := mu.mutation.Text(); ok {
		_spec.SetField(message.FieldText, field.TypeString, value)
	}
	if mu.mutation.TextCleared() {
		_spec.ClearField(message.FieldText, field.TypeString)
	}
	if value, ok := mu.mutation.Image(); ok {
		_spec.SetField(message.FieldImage, field.TypeJSON, value)
	}
	if mu.mutation.ImageCleared() {
		_spec.ClearField(message.FieldImage, field.TypeJSON)
	}
	if value, ok := mu.mutation.Unsent(); ok {
		_spec.SetField(message.FieldUnsent, field.TypeBool, value)
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(message.FieldType, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(message.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.RoomTable,
			Columns: []string{message.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.RoomTable,
			Columns: []string{message.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.UserTable,
			Columns: []string{message.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.UserTable,
			Columns: []string{message.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRoomID sets the "room_id" field.
func (muo *MessageUpdateOne) SetRoomID(s string) *MessageUpdateOne {
	muo.mutation.SetRoomID(s)
	return muo
}

// SetUserID sets the "user_id" field.
func (muo *MessageUpdateOne) SetUserID(s string) *MessageUpdateOne {
	muo.mutation.SetUserID(s)
	return muo
}

// SetPostID sets the "post_id" field.
func (muo *MessageUpdateOne) SetPostID(s string) *MessageUpdateOne {
	muo.mutation.SetPostID(s)
	return muo
}

// SetNillablePostID sets the "post_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillablePostID(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetPostID(*s)
	}
	return muo
}

// ClearPostID clears the value of the "post_id" field.
func (muo *MessageUpdateOne) ClearPostID() *MessageUpdateOne {
	muo.mutation.ClearPostID()
	return muo
}

// SetOrderID sets the "order_id" field.
func (muo *MessageUpdateOne) SetOrderID(s string) *MessageUpdateOne {
	muo.mutation.SetOrderID(s)
	return muo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableOrderID(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetOrderID(*s)
	}
	return muo
}

// ClearOrderID clears the value of the "order_id" field.
func (muo *MessageUpdateOne) ClearOrderID() *MessageUpdateOne {
	muo.mutation.ClearOrderID()
	return muo
}

// SetText sets the "text" field.
func (muo *MessageUpdateOne) SetText(s string) *MessageUpdateOne {
	muo.mutation.SetText(s)
	return muo
}

// SetNillableText sets the "text" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableText(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetText(*s)
	}
	return muo
}

// ClearText clears the value of the "text" field.
func (muo *MessageUpdateOne) ClearText() *MessageUpdateOne {
	muo.mutation.ClearText()
	return muo
}

// SetImage sets the "image" field.
func (muo *MessageUpdateOne) SetImage(s schema.Image) *MessageUpdateOne {
	muo.mutation.SetImage(s)
	return muo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableImage(s *schema.Image) *MessageUpdateOne {
	if s != nil {
		muo.SetImage(*s)
	}
	return muo
}

// ClearImage clears the value of the "image" field.
func (muo *MessageUpdateOne) ClearImage() *MessageUpdateOne {
	muo.mutation.ClearImage()
	return muo
}

// SetUnsent sets the "unsent" field.
func (muo *MessageUpdateOne) SetUnsent(b bool) *MessageUpdateOne {
	muo.mutation.SetUnsent(b)
	return muo
}

// SetNillableUnsent sets the "unsent" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableUnsent(b *bool) *MessageUpdateOne {
	if b != nil {
		muo.SetUnsent(*b)
	}
	return muo
}

// SetType sets the "type" field.
func (muo *MessageUpdateOne) SetType(m message.Type) *MessageUpdateOne {
	muo.mutation.SetType(m)
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MessageUpdateOne) SetCreatedAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableCreatedAt(t *time.Time) *MessageUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MessageUpdateOne) SetUpdatedAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetRoom sets the "room" edge to the Room entity.
func (muo *MessageUpdateOne) SetRoom(r *Room) *MessageUpdateOne {
	return muo.SetRoomID(r.ID)
}

// SetUser sets the "user" edge to the User entity.
func (muo *MessageUpdateOne) SetUser(u *User) *MessageUpdateOne {
	return muo.SetUserID(u.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (muo *MessageUpdateOne) ClearRoom() *MessageUpdateOne {
	muo.mutation.ClearRoom()
	return muo
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MessageUpdateOne) ClearUser() *MessageUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// Where appends a list predicates to the MessageUpdate builder.
func (muo *MessageUpdateOne) Where(ps ...predicate.Message) *MessageUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MessageUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MessageUpdateOne) check() error {
	if v, ok := muo.mutation.GetType(); ok {
		if err := message.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Message.type": %w`, err)}
		}
	}
	if _, ok := muo.mutation.RoomID(); muo.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.room"`)
	}
	if _, ok := muo.mutation.UserID(); muo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MessageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MessageUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.PostID(); ok {
		_spec.SetField(message.FieldPostID, field.TypeString, value)
	}
	if muo.mutation.PostIDCleared() {
		_spec.ClearField(message.FieldPostID, field.TypeString)
	}
	if value, ok := muo.mutation.OrderID(); ok {
		_spec.SetField(message.FieldOrderID, field.TypeString, value)
	}
	if muo.mutation.OrderIDCleared() {
		_spec.ClearField(message.FieldOrderID, field.TypeString)
	}
	if value, ok := muo.mutation.Text(); ok {
		_spec.SetField(message.FieldText, field.TypeString, value)
	}
	if muo.mutation.TextCleared() {
		_spec.ClearField(message.FieldText, field.TypeString)
	}
	if value, ok := muo.mutation.Image(); ok {
		_spec.SetField(message.FieldImage, field.TypeJSON, value)
	}
	if muo.mutation.ImageCleared() {
		_spec.ClearField(message.FieldImage, field.TypeJSON)
	}
	if value, ok := muo.mutation.Unsent(); ok {
		_spec.SetField(message.FieldUnsent, field.TypeBool, value)
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(message.FieldType, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(message.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.RoomTable,
			Columns: []string{message.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.RoomTable,
			Columns: []string{message.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.UserTable,
			Columns: []string{message.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.UserTable,
			Columns: []string{message.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
