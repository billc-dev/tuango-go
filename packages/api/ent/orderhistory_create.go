// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/billc-dev/tuango-go/ent/order"
	"github.com/billc-dev/tuango-go/ent/orderhistory"
)

// OrderHistoryCreate is the builder for creating a OrderHistory entity.
type OrderHistoryCreate struct {
	config
	mutation *OrderHistoryMutation
	hooks    []Hook
}

// SetOrderID sets the "order_id" field.
func (ohc *OrderHistoryCreate) SetOrderID(s string) *OrderHistoryCreate {
	ohc.mutation.SetOrderID(s)
	return ohc
}

// SetStatus sets the "status" field.
func (ohc *OrderHistoryCreate) SetStatus(o orderhistory.Status) *OrderHistoryCreate {
	ohc.mutation.SetStatus(o)
	return ohc
}

// SetCreatedAt sets the "created_at" field.
func (ohc *OrderHistoryCreate) SetCreatedAt(t time.Time) *OrderHistoryCreate {
	ohc.mutation.SetCreatedAt(t)
	return ohc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ohc *OrderHistoryCreate) SetNillableCreatedAt(t *time.Time) *OrderHistoryCreate {
	if t != nil {
		ohc.SetCreatedAt(*t)
	}
	return ohc
}

// SetID sets the "id" field.
func (ohc *OrderHistoryCreate) SetID(s string) *OrderHistoryCreate {
	ohc.mutation.SetID(s)
	return ohc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ohc *OrderHistoryCreate) SetNillableID(s *string) *OrderHistoryCreate {
	if s != nil {
		ohc.SetID(*s)
	}
	return ohc
}

// SetOrder sets the "order" edge to the Order entity.
func (ohc *OrderHistoryCreate) SetOrder(o *Order) *OrderHistoryCreate {
	return ohc.SetOrderID(o.ID)
}

// Mutation returns the OrderHistoryMutation object of the builder.
func (ohc *OrderHistoryCreate) Mutation() *OrderHistoryMutation {
	return ohc.mutation
}

// Save creates the OrderHistory in the database.
func (ohc *OrderHistoryCreate) Save(ctx context.Context) (*OrderHistory, error) {
	ohc.defaults()
	return withHooks(ctx, ohc.sqlSave, ohc.mutation, ohc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ohc *OrderHistoryCreate) SaveX(ctx context.Context) *OrderHistory {
	v, err := ohc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ohc *OrderHistoryCreate) Exec(ctx context.Context) error {
	_, err := ohc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohc *OrderHistoryCreate) ExecX(ctx context.Context) {
	if err := ohc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ohc *OrderHistoryCreate) defaults() {
	if _, ok := ohc.mutation.CreatedAt(); !ok {
		v := orderhistory.DefaultCreatedAt()
		ohc.mutation.SetCreatedAt(v)
	}
	if _, ok := ohc.mutation.ID(); !ok {
		v := orderhistory.DefaultID()
		ohc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ohc *OrderHistoryCreate) check() error {
	if _, ok := ohc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "OrderHistory.order_id"`)}
	}
	if _, ok := ohc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "OrderHistory.status"`)}
	}
	if v, ok := ohc.mutation.Status(); ok {
		if err := orderhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "OrderHistory.status": %w`, err)}
		}
	}
	if _, ok := ohc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderHistory.created_at"`)}
	}
	if _, ok := ohc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "OrderHistory.order"`)}
	}
	return nil
}

func (ohc *OrderHistoryCreate) sqlSave(ctx context.Context) (*OrderHistory, error) {
	if err := ohc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ohc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ohc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrderHistory.ID type: %T", _spec.ID.Value)
		}
	}
	ohc.mutation.id = &_node.ID
	ohc.mutation.done = true
	return _node, nil
}

func (ohc *OrderHistoryCreate) createSpec() (*OrderHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderHistory{config: ohc.config}
		_spec = sqlgraph.NewCreateSpec(orderhistory.Table, sqlgraph.NewFieldSpec(orderhistory.FieldID, field.TypeString))
	)
	if id, ok := ohc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ohc.mutation.Status(); ok {
		_spec.SetField(orderhistory.FieldStatus, field.TypeEnum, value)
		_node.Status = &value
	}
	if value, ok := ohc.mutation.CreatedAt(); ok {
		_spec.SetField(orderhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if nodes := ohc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderhistory.OrderTable,
			Columns: []string{orderhistory.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrderHistoryCreateBulk is the builder for creating many OrderHistory entities in bulk.
type OrderHistoryCreateBulk struct {
	config
	builders []*OrderHistoryCreate
}

// Save creates the OrderHistory entities in the database.
func (ohcb *OrderHistoryCreateBulk) Save(ctx context.Context) ([]*OrderHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ohcb.builders))
	nodes := make([]*OrderHistory, len(ohcb.builders))
	mutators := make([]Mutator, len(ohcb.builders))
	for i := range ohcb.builders {
		func(i int, root context.Context) {
			builder := ohcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ohcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ohcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ohcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ohcb *OrderHistoryCreateBulk) SaveX(ctx context.Context) []*OrderHistory {
	v, err := ohcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ohcb *OrderHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ohcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ohcb *OrderHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ohcb.Exec(ctx); err != nil {
		panic(err)
	}
}
